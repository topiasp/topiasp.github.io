{"version":3,"sources":["components/Menu.js","utils/extractOccurancesOfRegex.js","utils/extractChapters.js","utils/extractTitle.js","utils/extractNumberOfGroups.js","utils/extractResultTable.js","utils/columnsToRows.js","utils/utils.js","utils/extractModelFitInformation.js","utils/parseOut.js","components/FileLoader.js","components/DownloadCSVbutton.js","components/CheckboxList.js","components/ResultTable.js","components/ModelResults.js","components/WholeOutput.js","components/ModelFitInformation.js","App.js","index.js"],"names":["Menu","mplusOutput","handlePageChange","page","buttonStyle","margin","fontSize","buttonStyleWithBorder","border","style","backgroundColor","position","width","zIndex","top","label","map","opt","Button","key","uuidv4","onClick","extractOccurancesOfRegex","params","regex","idx","occurances","res","exec","string","push","result","id","contentStart","index","length","start","addEnds","obj","arr","end","i","extractChapterContent","headersObj","headers","headerIdx","header","content","substring","split","extractChapters","chapters","filteringRegex","filter","h","test","extractTitle","title","c","toLowerCase","indexOf","undefined","extractNumberOfGroups","StringContainingNumberOfGroups","match","replace","ensureCellKeyCount","cell","headercount","keys","values","ExtractTableRows","group","grouptableheaders","join","tablerows","occ","originalTableRows","r","or","row","additionalKey","rowObj","splice","rowAsObject","TableRowsToObject","concat","addKeyToCell","extractResultTable","cells","headerToFind","tableheaders","NumberOfGroups","alert","modelResults","chapt","flat","cellsToGroupComparison","elem","slice","columnsToRows","variables","cellsForGroupComparison","Object","reduce","variable","cellForGroupComparison","variableIndex","groupvalues","value","extractVariableValuesPerGroup","getUniqueFromArray","getOwnPropertyNames","trimString","s","handleModelFitChapter","chap","splitted","statistic","extractModelFitInformation","modelInformationChapter","chaptersOfModelInformation","parseOut","mplusoutputstring","parsed","standardizedModelResults","groups","modelFitInformation","find","FileLoader","handleFileLoad","showFileUpload","handleShowFileChange","Modal","show","onHide","Header","Title","Body","Footer","primary","type","display","onChange","htmlFor","className","downloadCSV","args","data","filename","link","csv","delimiter","Array","isArray","convertArrayOfCellsToCSV","encodeURI","document","createElement","setAttribute","click","DownloadCSVbutton","float","padding","CheckboxList","options","handleListChange","useState","showlist","setShowlist","isOptionSelected","option","selectedOptions","handleCheckBoxChange","e","clickedOption","target","updatedOptions","listStyle","angle","borderRadius","val","checked","ResultTable","tableFilters","setTableFilters","console","log","cellStyle","filterUpdate","Table","filters","dataToCells","ModelResults","results","headersForGroupTable","dataToCSVconversion","Container","WholeOutput","selectedChapters","setSelectedChapters","chapterHeaders","isHeaderSelected","clickedChapter","chapter","Row","Col","xs","marginLeft","marginTop","whiteSpace","fontFamily","dangerouslySetInnerHTML","__html","chapterContentContainer","ModelFitInformation","info","f","ob","App","setMplusOutput","setPage","setShowFileUpload","showModal","fileInput","file","files","reader","FileReader","onload","name","readAsText","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e96acec.chunk.js","sourcesContent":["import React from 'react'\r\nimport {  Button } from 'react-bootstrap'\r\n\r\nimport uuidv4 from 'uuid'\r\n\r\nconst Menu = ({ mplusOutput, handlePageChange, page }) => {\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n  const menuoptions = [\r\n    { page: 'wholeoutput',       label: 'Whole output' },\r\n    { page: 'modelfitinformation',  label: 'Model information' },\r\n    { page: 'modelresults',      label: 'Model results' },\r\n    { page: 'stdmodelresults',   label: 'Standardized model results' }\r\n  ]\r\n\r\n  const buttonStyle = {\r\n    margin: '0.5%',\r\n    fontSize: '80%'\r\n  }\r\n\r\n  const buttonStyleWithBorder = {\r\n    margin: '0.5%',\r\n    fontSize: '80%',\r\n    border: '3px solid white'\r\n  }\r\n\r\n  const menuBarStyle = {\r\n    backgroundColor: 'black',\r\n    position: 'fixed',\r\n    width: '100%',\r\n    zIndex: 999,\r\n    top: 0\r\n  }\r\n\r\n\r\n  return(\r\n    <div style={menuBarStyle}>\r\n      {\r\n        menuoptions.map(opt => <Button style={ opt.page === page ? buttonStyleWithBorder : buttonStyle } key={uuidv4()} onClick={ () =>  handlePageChange(opt.page)  }>{ opt.label }</Button>)\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Menu","\r\n\r\n\r\n// Gets hits of given regex (location)\r\nconst extractOccurancesOfRegex = (params) => {\r\n\r\n  const regex = params.regex\r\n  let idx = 0\r\n\r\n  const occurances = []\r\n  let res = ''\r\n  while ((res = regex.exec(params.string)) !== null) {\r\n    occurances.push({ result: res[0], id: 'C'+idx, contentStart: res.index + res[0].length, start: res.index  })\r\n    idx++\r\n  }\r\n\r\n  return { occurances: occurances,\r\n    string: params.string\r\n  }\r\n}\r\n\r\n\r\nexport default extractOccurancesOfRegex","\r\n\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n\r\n\r\n// Adds the end of string to hits gotten by extractOccurencesOfRegec\r\nconst addEnds = (obj) => {\r\n\r\n\r\n  let arr = obj.occurances\r\n  arr[arr.length-1].end = obj.string.length\r\n\r\n  for (let i = (arr.length-2); i >= 0;i--) {\r\n    arr[i].end = arr[(i+1)].start-1\r\n  }\r\n  obj.occurances = arr\r\n\r\n  return obj\r\n}\r\n\r\n// Gets strings between headers (extracted through extractOccurencesOfRegec)\r\nconst extractChapterContent = (headersObj) => {\r\n\r\n  let headers =  headersObj.occurances\r\n  const string = headersObj.string\r\n\r\n  const arr = []\r\n  for (let headerIdx in headers) {\r\n    let header = headers[headerIdx]\r\n    arr.push({\r\n      header: header,\r\n      id: header.id,\r\n      content: string.substring(header.contentStart,header.end).split('\\n')\r\n    })\r\n  }\r\n\r\n  headersObj.occurances = arr\r\n  return(headersObj)\r\n}\r\n\r\n// Brings them all together\r\n\r\nconst extractChapters = (params) => {\r\n\r\n\r\n\r\n  let headers = extractOccurancesOfRegex({ string: params.string, start: 0, chapters: [], regex: params.regex })\r\n\r\n  if (params.filteringRegex) {\r\n    headers.occurances = headers.occurances.filter((h) => !params.filteringRegex.test(h.result))\r\n  }\r\n\r\n  headers = addEnds(headers)\r\n\r\n  let chapters = extractChapterContent(headers)\r\n  return chapters.occurances\r\n\r\n}\r\n\r\nexport { extractChapters, extractChapterContent, addEnds }","const extractTitle = (chapters) => {\r\n  const title = chapters[0].content.filter((c) => c.toLowerCase().indexOf('title:')>-1)\r\n  return title === undefined ? undefined : title[0]\r\n}\r\n\r\nexport default extractTitle","const extractNumberOfGroups = (string) => {\r\n  const RegExpNumberOfGroups = /(Number of groups[ ]+[0-9]{1,2})/\r\n  const StringContainingNumberOfGroups =  string.match(RegExpNumberOfGroups)\r\n  return StringContainingNumberOfGroups ===  null ? undefined : StringContainingNumberOfGroups[0].replace(/[^0-9]/g,'') * 1\r\n}\r\n\r\nexport default extractNumberOfGroups","\r\nimport { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n// Ensure that each cell has as many keys as there are headers in the table\r\n\r\nconst ensureCellKeyCount = ({ cell, headercount }) => {\r\n\r\n  while (cell.keys.length + cell.values.length < headercount) {\r\n    cell.values.push('')\r\n  }\r\n  return cell\r\n}\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells = rowString.split(/([A-Z_\\-0-9.$]+)/).filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Group specific actions\r\n  let grouptableheaders = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  grouptableheaders = addEnds(grouptableheaders)\r\n\r\n  let grouptables = extractChapterContent(grouptableheaders)\r\n\r\n  let tablerows = grouptables.occurances.map((occ) => TableRowsToObject(occ))\r\n\r\n  // Add group as key to cells\r\n  const addKeyToCell = (cell,key) => {\r\n    cell.keys  =  [key].concat(cell.keys)\r\n    return cell\r\n  }\r\n  tablerows = tablerows.map((row) => row.map((cell) => addKeyToCell(cell,group.header.result)))\r\n\r\n  return(tablerows)\r\n}\r\n\r\n\r\n\r\nconst extractResultTable = (params) => {\r\n\r\n  const chapters = params.chapters\r\n  const headerToFind = params.headerToFind\r\n  const tableheaders = params.tableheaders\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (chapters === undefined | chapters === null) {\r\n    alert('No output loaded to get model results from!')\r\n  }\r\n\r\n  let cells\r\n\r\n  // Find the chapter that has the \"headerToFind\" (eg. MODEL RESULTS)\r\n  let modelResults = chapters.filter((chapt) => chapt.header.result === headerToFind)[0]\r\n\r\n  // If output has groups:\r\n  if (NumberOfGroups !== undefined & NumberOfGroups>1)  {\r\n\r\n\r\n    // Find group specific parts of the output\r\n    const RegExpGroup =  /Group [A-Z_]+$/gm\r\n    const groups = extractChapters({ string: modelResults.content.join('\\n'), regex: RegExpGroup })\r\n\r\n    const grouptablerows = groups.map((group) => ExtractTableRows(group))\r\n    cells = grouptablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n\r\n  // If output does not have gtroups\r\n  } else {\r\n\r\n    // This function works as it similar to number of groups = 1\r\n    let tablerows = ExtractTableRows(modelResults)\r\n    cells = tablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n  }\r\n  return(cells)\r\n\r\n}\r\n\r\nexport default extractResultTable","\r\n\r\n\r\n\r\nconst cellsToGroupComparison = (obj,elem) => {\r\n\r\n  let key = elem.keys.slice(1,3).join('') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      keys: elem.keys.slice(1,3),\r\n      values: [\r\n        {\r\n          group: elem.keys[0],\r\n          values: elem.values\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      group: elem.keys[0],\r\n      values: elem.values\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nconst columnsToRows = ({ cells, variables }) => {\r\n\r\n  let cellsForGroupComparison =  Object.values( cells.reduce(cellsToGroupComparison,{}) )\r\n\r\n  const extractVariableValuesPerGroup = (cellForGroupComparison,variable,variableIndex) => {\r\n    return cellForGroupComparison.values.map((groupvalues) =>  { return({ keys: cellForGroupComparison.keys.concat(variable),group: groupvalues.group,  value: groupvalues.values[variableIndex] }) } )\r\n  }\r\n\r\n  cellsForGroupComparison = variables.map((variable,idx) => {\r\n    return cellsForGroupComparison.map((cell) => extractVariableValuesPerGroup(cell,variable,idx))\r\n  }).flat()\r\n\r\n  return cellsForGroupComparison//.flat()\r\n}\r\n\r\n\r\nexport default columnsToRows\r\n","const getUniqueFromArray = (arr) => {\r\n\r\n  let f = (obj,elem) => {\r\n    obj[elem] = 1\r\n    return obj\r\n  }\r\n  const obj =   arr.reduce(f,{})\r\n\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\n\r\nconst trimString = (s) => {\r\n  return s.replace(/^[ ]{1,}/,'').replace(/[ ]{1,}$/,'')\r\n}\r\n\r\n\r\n\r\n\r\nexport { getUniqueFromArray, trimString }","\r\n\r\nimport { extractChapters } from './extractChapters'\r\nimport { trimString } from './utils'\r\n\r\n\r\n\r\n// this handles (extracst numbers and titles) single chapter in model fit information\r\nconst handleModelFitChapter = (chap) => {\r\n\r\n\r\n  const header = chap.header.result\r\n\r\n  const handleRow = (row) => {\r\n    // extract number and name of statistic\r\n    // by splitting with two or more spaces\r\n    const splitted = trimString(row).split(/[ ]{2,}/)\r\n    const statistic =  trimString(splitted[0])\r\n\r\n    return({\r\n      header: header,\r\n      statistic:  statistic,\r\n      value: splitted.length === 1 ? -1 : splitted.slice(1,).map(s => trimString(s)).join(', ')//splittetrimString(splitted[1])\r\n    })\r\n\r\n  }\r\n\r\n  return  chap.content.map(handleRow)\r\n\r\n}\r\n\r\n\r\n// modelInformationChapter = temp1.parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION')\r\n\r\nconst extractModelFitInformation = (modelInformationChapter) => {\r\n\r\n\r\n\r\n  // The model fit information is structured as follows:\r\n  // HEADER ROW\r\n  //      NAME_OF_STATISTIC       VALUE_OF_STATISTIC\r\n  // with exception of the first statistic 'Number of free parameters'\r\n\r\n\r\n  // First get chapters of model fit information based on header rows\r\n  const params = {\r\n    string: modelInformationChapter.content.join('\\n'),\r\n    regex: /^[A-Z*].+$/gm\r\n  }\r\n  let chaptersOfModelInformation = extractChapters(params)\r\n\r\n  // MANIPULATIONS\r\n\r\n  // 1. Remove useless chapter starting with *\r\n  chaptersOfModelInformation = chaptersOfModelInformation.filter(chap => chap.header.result.substring(0,1)!=='*')\r\n\r\n  // 2. Handle exception of first statistic and clean empty objects from content array\r\n  chaptersOfModelInformation = chaptersOfModelInformation.map(chap =>  {\r\n    chap.content = chap.content.filter(c => c.length>1)\r\n\r\n    if (chap.content.length === 0) {\r\n\r\n      chap.content = [ chap.header.result ] // if empty, replace w/ header\r\n      chap.header.result =  trimString( chap.header.result.replace(/[0-9]{1,}/,'') )//  removing any numbers from header (for exception Number of free parameters') // \r\n    }\r\n    return chap\r\n  })\r\n\r\n  // Get statistics\r\n  const statistics = chaptersOfModelInformation.map( handleModelFitChapter )\r\n\r\n  return statistics.flat()\r\n\r\n}\r\n\r\nexport default extractModelFitInformation\r\n","\r\nimport { extractChapters } from './extractChapters'\r\nimport extractTitle    from './extractTitle'\r\nimport extractNumberOfGroups from './extractNumberOfGroups'\r\nimport extractResultTable from './extractResultTable'\r\nimport columnsToRows from './columnsToRows'\r\nimport extractModelFitInformation from './extractModelFitInformation'\r\n\r\nimport { getUniqueFromArray } from './utils'\r\n\r\nconst parseOut = (mplusoutputstring) => {\r\n\r\n  const parsed = {}\r\n\r\n  // Extract main chapters\r\n  const RegExpChapter = /(^[A-Z][A-Z 0-9-]+[A-Z]$)/gm\r\n  parsed.chapters =  extractChapters({ string: mplusoutputstring, regex: RegExpChapter, filteringRegex: / (BY|WITH|ON)$/m  })\r\n  parsed.title    =  extractTitle(parsed.chapters)\r\n  parsed.NumberOfGroups = extractNumberOfGroups(mplusoutputstring)\r\n\r\n  // Extract model results\r\n  const variables = ['Estimate','S.E.','Est/S.E.','P-Value']\r\n  const tableheaders = ['Column1','Column2','Column3'].concat(variables)\r\n\r\n  let header = 'MODEL RESULTS'\r\n\r\n  let cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.modelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Extract standardized model results\r\n\r\n  header = 'STANDARDIZED MODEL RESULTS'\r\n\r\n  cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.standardizedModelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Get group names from model results\r\n  parsed.groups = getUniqueFromArray( parsed.modelResults.cells.flat().map((c) => c.group ) )\r\n\r\n  // extractModelFitInformation\r\n\r\n  parsed.modelFitInformation = extractModelFitInformation(parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION'))\r\n\r\n  return parsed\r\n}\r\n\r\nexport default parseOut","import React from 'react'\r\n\r\nimport {  Button, Modal } from 'react-bootstrap'\r\n\r\n\r\nconst FileLoader = (  { handleFileLoad, showFileUpload, handleShowFileChange }) => {\r\n\r\n  if (!showFileUpload) {\r\n    return('')\r\n  }\r\n\r\n  const inputStyle = {\r\n    display: 'none'\r\n  }\r\n\r\n\r\n  const handleUpload = () => handleShowFileChange()\r\n\r\n\r\n  return(\r\n\r\n    <Modal show={true}onHide={handleUpload}>\r\n      <Modal.Header>\r\n        <Modal.Title>Mplus output viewer</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>Upload an .out -file from Mplus</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button primary={'true'}> <input id=\"file-upload\" type=\"file\" style={inputStyle} onChange={ handleFileLoad }></input>\r\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\">Upload</label>\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default FileLoader","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst convertArrayOfCellsToCSV = (args) => {\r\n\r\n  let headers,data,delimiter\r\n\r\n  headers = args.headers\r\n  data    = args.data\r\n  delimiter = args.delimiter || ';'\r\n\r\n  let result = ''\r\n\r\n  result += headers.join(delimiter) + '\\n'\r\n\r\n\r\n  result += data.map((cell) => {\r\n    if (!Array.isArray(cell)) {\r\n      return cell.join(delimiter)\r\n    }\r\n    return cell.join(delimiter)\r\n  }).join('\\n')\r\n\r\n  return result\r\n}\r\n\r\nconst downloadCSV = (args) => {\r\n\r\n\r\n  let data, filename, link\r\n  let csv = convertArrayOfCellsToCSV(args)\r\n  if (csv === null) return\r\n\r\n\r\n  filename = args.filename || 'export.csv'\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv\r\n  }\r\n  data = encodeURI(csv)\r\n\r\n  link = document.createElement('a')\r\n  link.setAttribute('href', data)\r\n  link.setAttribute('download', filename)\r\n  link.click()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DownloadCSVbutton = ({ params, float }) => {\r\n\r\n  if (params === null) {\r\n    return('')\r\n  }\r\n\r\n  const data = params.data\r\n  const headers = params.headers\r\n\r\n  const handleClick = () => {\r\n    downloadCSV({ data: data, headers: headers })\r\n\r\n\r\n  }\r\n\r\n\r\n  const style = {\r\n    margin: '0.5%',\r\n    float: 'right',\r\n    fontSize: '75%',\r\n    padding: 3\r\n  }\r\n\r\n  return(\r\n    <Button\r\n      style = { style }\r\n      primary={'true'}\r\n      onClick={ handleClick }\r\n    >\r\n      Download as CSV\r\n    </Button>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default DownloadCSVbutton","import React, { useState } from 'react'\r\n\r\n\r\nimport { FaAngleRight,FaAngleDown } from 'react-icons/fa'\r\n\r\n\r\n\r\nconst CheckboxList = ({ options, handleListChange }) => {\r\n\r\n  const [showlist, setShowlist] = useState(false)\r\n\r\n  // Shorthand for checking if option is selected\r\n  const isOptionSelected = (option) => options.selectedOptions.indexOf(option)>-1\r\n\r\n  // On check change\r\n  const handleCheckBoxChange = (e) => {\r\n    const clickedOption = e.target.value\r\n    const isSelected = isOptionSelected(clickedOption)\r\n    const updatedOptions = isSelected ? options.selectedOptions.filter(opt => opt !== clickedOption) :  options.selectedOptions.concat(clickedOption) \r\n\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: updatedOptions\r\n    })\r\n\r\n  }\r\n\r\n\r\n  // Toggle list\r\n  const toggleListDisplay = () =>  setShowlist(!showlist)\r\n\r\n\r\n  const listStyle = {\r\n    display: showlist ? 'block' : 'none',\r\n    position: 'fixed',\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    border: '1px solid black'\r\n\r\n  }\r\n\r\n  const buttonStyle = {\r\n    border: '0.5px solid #0069d9',\r\n    borderRadius: '5px',\r\n    backgroundColor: 'white',\r\n    padding: '5px',\r\n    margin: '2px'\r\n  }\r\n\r\n  const angle = showlist ? <FaAngleDown/> : <FaAngleRight/>\r\n\r\n  return(\r\n    <div>\r\n      <button style={buttonStyle} onClick={toggleListDisplay}>{ options.label}{angle}</button>\r\n      <div style={listStyle}  >\r\n        {\r\n          options.values.map((val, idx) => {\r\n            const checked = isOptionSelected(val)\r\n            return(\r\n              <div key={idx + val}><input type='checkbox' checked={checked} onChange={handleCheckBoxChange}  value={val} />{ val}</div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default CheckboxList","import React,{ useState } from 'react'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nimport uuidv4 from 'uuid'\r\nimport CheckboxList from './CheckboxList'\r\n\r\n// Componente\r\n\r\n\r\nconst ResultTable = ({ headers, cells }) => {\r\n\r\n  const [tableFilters, setTableFilters] = useState({})\r\n\r\n  console.log('tableFilters ', tableFilters)\r\n\r\n  const tableStyle = { fontSize: '75%',padding: '1px' }\r\n  const cellStyle = { padding: 1 }\r\n\r\n  const dataToCells = (cells,idx) => {\r\n    const style = { backgroundColor: idx % 2 === 0 ? 'lightgrey' : '' }\r\n    return( <tr key={uuidv4()} style={style}>{ cells.map(c => <td key={uuidv4()} style={cellStyle}>{ c }</td>)}</tr>    )\r\n  }\r\n\r\n  // handle list change\r\n  const handleListChange = (filter) => {\r\n\r\n    const filterUpdate = { ...tableFilters }\r\n    filterUpdate[filter.label] = filter     // This fails if a table has two columns with identical names\r\n    setTableFilters(filterUpdate)\r\n  }\r\n\r\n\r\n\r\n  // handle headers\r\n  // if header has 'values' -attribute: create a select tag with options\r\n  // if not, plain string header\r\n  const createHeader = (header) => {\r\n    if (header.values !== undefined) {\r\n\r\n      const selectedOptions = tableFilters[header.label] !== undefined ? tableFilters[header.label].selectedOptions  : header.values\r\n\r\n      return(<CheckboxList options={ { label: header.label, selectedOptions: selectedOptions, values: header.values } } handleListChange={ handleListChange }/>)\r\n    }\r\n    return header.label\r\n  }\r\n\r\n  // apply filter set in state\r\n  // TODO: horrible\r\n  const applyFilter = (row) => {\r\n\r\n    let filters\r\n    let filter = true\r\n    let header\r\n    // loop through header and see if exists in filters\r\n    // Header is in filters, check that row value (of header index)\r\n    // is included in 'selectedOptions' attribute\r\n    for (let index=0; index<headers.length;index++) {\r\n      header = headers[index]\r\n      filters = tableFilters[header.label]\r\n      if (tableFilters[header.label] !== undefined) {\r\n        if (filters.selectedOptions.indexOf(row[header.index]) === -1) {\r\n          filter = false\r\n        }\r\n      }\r\n    }\r\n\r\n    return filter\r\n  }\r\n\r\n\r\n  return(\r\n    <Table style={tableStyle}  >\r\n      <thead>\r\n        <tr>\r\n          {\r\n            headers.map(createHeader).map(c => <th key={uuidv4()} style={cellStyle}>{ c }</th>)\r\n          }\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        { cells.filter(applyFilter).map((c,idx) => dataToCells(c,idx)) }\r\n      </tbody>\r\n    </Table>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default ResultTable","import React from 'react'\r\n\r\n\r\nimport { Container } from 'react-bootstrap'\r\nimport DownloadCSVbutton from './DownloadCSVbutton'\r\n\r\nimport ResultTable from './ResultTable'\r\n\r\n\r\nimport { getUniqueFromArray } from '../utils/utils'\r\n\r\n\r\nconst ModelResults = ({ results, show, groups  }) => {\r\n\r\n  if ( results === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  const cells = results.cells\r\n\r\n  //let headersForGroupTable = ['Parameter header','Parameter','Statistic'].concat( groups )\r\n  let headersForCSV = ['Parameter header','Parameter','Statistic','Group','Value']\r\n\r\n  let headersForGroupTable = [\r\n    { label: 'Parameter header', index: 0, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[0]) ) },\r\n    { label: 'Parameter', index: 1,  values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[1]) ) },\r\n    { label: 'Statistic', index: 2, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[2]) ) }\r\n  ]\r\n\r\n  headersForGroupTable = headersForGroupTable.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n\r\n\r\n  console.log('cell0', cells[0])\r\n\r\n  const cellGroupsAsColumns = (cell) => cell[0].keys.concat(cell.map((cell) => cell.value))\r\n\r\n\r\n  // Expects array of arrays\r\n  const dataToCSVconversion = cells.flat().map(cell => [...cell.keys].concat(cell.group).concat(cell.value) )\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{float: 'left'}}>{ results.header }</div>\r\n      <DownloadCSVbutton params = { { data: dataToCSVconversion, headers: headersForCSV } } />\r\n      <ResultTable\r\n        cells = { cells.map(cellGroupsAsColumns) }\r\n        headers = { headersForGroupTable }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nexport default ModelResults","import React,{ useState } from 'react'\r\n\r\nimport {  Col, Row } from 'react-bootstrap'\r\nimport uuidv4 from 'uuid'\r\n\r\nconst WholeOutput = ({ mplusOutput, show }) => {\r\n\r\n  const [ selectedChapters, setSelectedChapters ] = useState(['INPUT INSTRUCTIONS'])\r\n\r\n\r\n  if (mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  const getChapterHeaders = () => {\r\n    return mplusOutput === null ? [] : mplusOutput.parsed.chapters.map(chap =>   chap.header.result  )\r\n  }\r\n\r\n  const chapterHeaders = getChapterHeaders()\r\n\r\n  const chapters = mplusOutput.parsed.chapters\r\n\r\n  const toggleChapterSelection = (header) => {\r\n\r\n    if (  isHeaderSelected(header)  ) {\r\n      // Included in selected chapters -> remove it\r\n      return selectedChapters.filter(chapter => chapter !== header)\r\n    }\r\n    // Not included in selected chapters -> add it\r\n    return selectedChapters.concat(header)\r\n\r\n  }\r\n\r\n  // Shorthand for checking if header is selected\r\n  const isHeaderSelected = (header) => selectedChapters.indexOf(header)>-1\r\n\r\n  // Function handle checkbox changes\r\n\r\n  const handleCheckBoxChange = (e) => {\r\n    //e.preventDefault()\r\n\r\n    const clickedChapter = e.target.value\r\n    setSelectedChapters(toggleChapterSelection(clickedChapter))\r\n  }\r\n\r\n  // A container for each chapter\r\n  const chapterContentContainer = (chapter,idx) => {\r\n\r\n    const style = {\r\n      whiteSpace: 'pre-wrap',\r\n      fontFamily: 'Consolas',\r\n      fontSize: '70%',\r\n      display: isHeaderSelected( chapter.header ) ? '' : 'none'\r\n    }\r\n    const content = '<h6>'+chapter.header +'</h6>\\n' + chapter.content\r\n    return(\r\n      <Row key={uuidv4()}>\r\n        <div style={ style }  dangerouslySetInnerHTML={{ __html: content }} />\r\n      </Row>\r\n    )\r\n  }\r\n\r\n\r\n  // (De-)select all\r\n  const toggleSelectAll = () => {\r\n\r\n    if ( selectedChapters.length !== chapterHeaders.length) {\r\n\r\n      setSelectedChapters(chapterHeaders)\r\n\r\n    } else {\r\n\r\n      setSelectedChapters([])\r\n    }\r\n  }\r\n\r\n  const menuStyle = {\r\n    position: 'fixed',\r\n    marginLeft: '5%',\r\n    marginTop: '2%'\r\n  }\r\n\r\n  return(\r\n    <Row>\r\n      <Col xs={4}>\r\n        <div style = {menuStyle} >\r\n          <Row>\r\n            <input type='checkbox'  onClick={ toggleSelectAll }/><div style={{ fontSize: '65%' }}>{  selectedChapters.length !== chapterHeaders.length ? 'SELECT ALL' : 'DESELECT ALL' }</div>\r\n          </Row>\r\n          {\r\n            chapterHeaders.map(header =>  {\r\n              const checked = isHeaderSelected(header)\r\n              const style = { fontSize: '65%' }\r\n              return(\r\n                <Row key={uuidv4()}>\r\n                  <input type='checkbox' checked = { checked } onChange={handleCheckBoxChange} value = { header }/><div style={style}>{ header }</div>\r\n                </Row>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n\r\n      </Col>\r\n      <Col xs={8}>\r\n        {\r\n          chapters.map((chap,idx) => chapterContentContainer( { content: chap.content.join('\\n'), header: chap.header.result },idx) )\r\n        }\r\n      </Col>\r\n    </Row>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default WholeOutput","import React from 'react'\r\n\r\nimport { Container } from 'react-bootstrap'\r\nimport DownloadCSVButton from './DownloadCSVbutton'\r\n\r\n\r\nimport { getUniqueFromArray } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\n\r\n\r\nconst ModelFitInformation = ({ modelFitInformation, show }) => {\r\n  if ( modelFitInformation === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  console.log('model fit info', modelFitInformation)\r\n  // Hard coded headers for table (and CSV)\r\n  const headers = [\r\n    { label: 'Statistic group', index: 0, values: getUniqueFromArray( modelFitInformation.map(info => info.header) ) },\r\n    { label: 'Statistic', index: 1 },\r\n    { label: 'Value', index: 2 }\r\n  ]\r\n\r\n  console.log('headers', headers)\r\n\r\n\r\n  const objectsToArrays = (ob) => {\r\n    return([ob.header, ob.statistic, ob.value ])\r\n  }\r\n\r\n  // Expects array of arrays\r\n  const dataToCSVconversion = modelFitInformation.map(f => [ f.header, f.statistic, f.value  ])\r\n  \r\n\r\n  return(\r\n    <Container>\r\n      <div style={{float: 'left'}}>MODEL FIT INFORMATION</div>\r\n      <DownloadCSVButton  params = { { data: dataToCSVconversion, headers: headers } } />\r\n      <ResultTable\r\n        cells = { modelFitInformation.map(objectsToArrays) }\r\n        headers = { headers }\r\n      />\r\n\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\nexport default ModelFitInformation","import React, { useState, useEffect } from 'react'\nimport Menu from './components/Menu'\n\n//import dummydata from './dummydata/dummy.js'\n\n\nimport parseOut from './utils/parseOut'\nimport FileLoader from './components/FileLoader'\nimport ModelResults from './components/ModelResults'\nimport WholeOutput from './components/WholeOutput'\nimport ModelFitInformation from './components/ModelFitInformation'\n\n\n\nconst App = () => {\n\n  const [ mplusOutput, setMplusOutput ] = useState(null)\n  const [ page, setPage ] = useState('wholeoutput')\n  const [ showFileUpload, setShowFileUpload ] = useState(true)\n\n  //useEffect(() => { setMplusOutput({ filename: 'dummydata', string: dummydata.raw,parsed: parseOut(dummydata.raw) })  }, [])\n\n\n  const handleFileLoad = (e) => {\n    const fileInput = e.target\n    const file = fileInput.files[0]\n    const reader = new FileReader()\n\n    reader.onload = () =>  {\n      setMplusOutput(\n        {\n          string: reader.result\n          ,filename: fileInput.files[0].name\n          ,parsed: parseOut(reader.result)\n        })\n    }\n\n    reader.readAsText(file,'ISO-881')\n    setShowFileUpload(false)\n  }\n\n  const handlePageChange = (page) => {\n    setPage(page)\n  }\n\n  console.log('mplusOutput: ', mplusOutput)\n\n  const groups = mplusOutput !== null ? mplusOutput.parsed.groups : null\n\n  // Menu is position: fixed, so this:\n  const contentStyle = {\n    zIndex: -1,\n    marginTop: '5%'\n\n  }\n  const containerStyle = {\n    position: 'relative'\n  }\n\n  const showModal = showFileUpload & mplusOutput === null\n\n  return (\n    <div style={containerStyle}>\n\n      <FileLoader\n        handleFileLoad={handleFileLoad}\n        showFileUpload={ showModal }\n        handleShowFileChange = {() => setShowFileUpload(false) }/>\n\n      <Menu mplusOutput = { mplusOutput }     handlePageChange = { handlePageChange } page={page}/>\n      <div style={contentStyle}>\n        <WholeOutput          show = { page === 'wholeoutput' }         mplusOutput = { mplusOutput } />\n        <ModelFitInformation  show = { page === 'modelfitinformation' }    modelFitInformation = { mplusOutput !== null ? mplusOutput.parsed.modelFitInformation : null } />\n        <ModelResults         show = { page === 'modelresults' }  groups = { groups }   results = { mplusOutput !== null ? mplusOutput.parsed.modelResults : null } />\n        <ModelResults         show = { page === 'stdmodelresults' }  groups = { groups } results = { mplusOutput !== null ? mplusOutput.parsed.standardizedModelResults : null } />\n      </div>\n    </div>\n  )\n\n}\nexport default App\n","\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport React from 'react'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}