{"version":3,"sources":["components/Menu.js","utils/extractOccurancesOfRegex.js","utils/extractChapters.js","utils/extractTitle.js","utils/extractNumberOfGroups.js","utils/parseOut.js","components/FileLoader.js","components/CheckboxList.js","components/DownloadCSVbutton.js","components/ResultTable.js","utils/utils.js","utils/extractResultTable.js","utils/columnsToRows.js","components/Error.js","components/ModelResults.js","components/WholeOutput.js","utils/extractModelFitInformation.js","components/ModelFitInformation.js","utils/extractResidualOutput.js","components/ResidualOutput.js","utils/extractModelModIndices.js","components/ModelModificationIndices.js","App.js","index.js"],"names":["Menu","mplusOutput","handlePageChange","page","buttonStyle","margin","fontSize","buttonStyleWithBorder","border","style","backgroundColor","position","width","zIndex","top","label","map","opt","Button","key","uuidv4","onClick","extractOccurancesOfRegex","params","regex","idx","occurances","res","exec","string","push","result","id","contentStart","index","length","start","addEnds","obj","arr","end","i","extractChapterContent","headersObj","headers","headerIdx","header","content","substring","split","extractChapters","chapters","filteringRegex","filter","h","test","extractTitle","title","c","toLowerCase","indexOf","undefined","extractNumberOfGroups","StringContainingNumberOfGroups","match","replace","parseOut","mplusoutputstring","parsed","NumberOfGroups","e","Alert","FileLoader","handleFileLoad","showFileUpload","handleShowFileChange","useState","dragStatus","setDragStatus","dropAreaStyle","background","display","alignItems","justifyContent","transition","padding","Modal","show","onHide","Header","Title","Body","className","onDrop","event","preventDefault","stopPropagation","file","dataTransfer","files","name","alert","target","onDragEnter","onDragOver","onDragLeave","primary","type","onChange","htmlFor","reducer","state","action","Error","initialShowState","CheckboxList","options","handleListChange","useReducer","showlist","dispatch","useEffect","isOptionSelected","option","selectedOptions","handleCheckBoxChange","clickedOption","value","updatedOptions","concat","angle","borderRadius","boxShadow","marginBottom","values","val","checked","downloadCSV","args","data","filename","link","csv","delimiter","join","cell","Array","isArray","convertArrayOfCellsToCSV","encodeURI","document","createElement","setAttribute","click","DownloadCSVbutton","float","ResultTable","cells","tableFilters","setTableFilters","cellStyle","filterUpdate","Table","row","filters","everyother","color","dataToCells","getUniqueFromArray","reduce","elem","Object","getOwnPropertyNames","trimString","s","rowToColumn","obs","pivoted","pivot","entries","rows","column","ensureCellKeyCount","headercount","keys","ExtractTableRows","group","grouptableheaders","tablerows","occ","originalTableRows","r","or","additionalKey","rowObj","splice","rowAsObject","TableRowsToObject","addKeyToCell","extractResultTable","headerToFind","tableheaders","modelResults","find","chapt","flat","cellsToGroupComparison","slice","columnsToRows","variables","cellsForGroupComparison","variable","cellForGroupComparison","variableIndex","groupvalues","extractVariableValuesPerGroup","message","Container","variant","applyExtraction","ModelResults","results","groups","headersForGroupTable","WholeOutput","selectedChapters","setSelectedChapters","chapterHeaders","chap","isHeaderSelected","clickedChapter","chapter","Row","Col","xs","marginLeft","marginTop","whiteSpace","fontFamily","dangerouslySetInnerHTML","__html","chapterContentContainer","handleModelFitChapter","splitted","statistic","extractModelFitInformation","modelInformationChapter","chaptersOfModelInformation","ModelFitInformation","modelFitInformation","info","ob","parseESTIMATED","ESTIMATED_GROUP","chaptersOfEstimated","chapterDivider","parsedMeans","parseMeans","covariances","cov","means","gatherByKey","table","subtable","str","getTableStructure","getTableValues","parseUNIVARIATETABLE","headerRegex","datarows","minDepth","findIndex","t","tableRows","subtableHeader","tot","cur","rowStart","rowFix","m","mo","o","parameter","arrayOfObjects","indexOfTableSeparator","columns","col","body","rowKey","colKey","extractResidualOutput","ResidualOutputChapter","chaptersOfResidualOutput","ESTIMATED","UNIVARIATE","PARSED_ESTIMATED","univariateProportions","PARSED_UNIVARIATE_SINGLE_TABLE","E","correlationOrCovarianceTableFromData","pivotedCells","ResidualOutput","output","pivotedMeans","meansTable","propTable","props","trim","extractModelIndicesTable","modVariables","minimumMIvalue","groupName","subtableheaders","subtableCells","grouptable","tablerow","a","b","console","log","manipulateModificationIndicesToTableCells","indices","v","ModelModificationIndices","modelIndices","App","setMplusOutput","setPage","setShowFileUpload","showModal","reader","FileReader","onload","readAsText","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.47ea6464.chunk.js","sourcesContent":["import React from 'react'\r\nimport {  Button } from 'react-bootstrap'\r\n\r\nimport uuidv4 from 'uuid'\r\n\r\nconst Menu = ({ mplusOutput, handlePageChange, page }) => {\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n  const menuoptions = [\r\n    { page: 'wholeoutput',       label: 'Whole output' },\r\n    { page: 'modelfitinformation',  label: 'Model information' },\r\n    { page: 'modelresults',      label: 'Model results' },\r\n    { page: 'stdmodelresults',   label: 'Standardized model results' },\r\n    { page: 'residualoutput',   label: 'Residual output' },\r\n    { page: 'modelmodificationindices', label: 'Model modification indices' }\r\n  ]\r\n\r\n  const buttonStyle = {\r\n    margin: '0.5%',\r\n    fontSize: '80%'\r\n  }\r\n\r\n  const buttonStyleWithBorder = {\r\n    margin: '0.5%',\r\n    fontSize: '80%',\r\n    border: '3px solid white'\r\n  }\r\n\r\n  const menuBarStyle = {\r\n    backgroundColor: 'black',\r\n    position: 'fixed',\r\n    width: '100%',\r\n    zIndex: 999,\r\n    top: 0\r\n  }\r\n\r\n\r\n  return(\r\n    <div style={menuBarStyle}>\r\n      {\r\n        menuoptions.map(opt => <Button style={ opt.page === page ? buttonStyleWithBorder : buttonStyle } key={uuidv4()} onClick={ () =>  handlePageChange(opt.page)  }>{ opt.label }</Button>)\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Menu","\r\n\r\n\r\n// Gets hits of given regex (location)\r\nconst extractOccurancesOfRegex = (params) => {\r\n\r\n  const regex = params.regex\r\n  let idx = 0\r\n\r\n  const occurances = []\r\n  let res = ''\r\n  while ((res = regex.exec(params.string)) !== null) {\r\n    occurances.push({ result: res[0], id: 'C'+idx, contentStart: res.index + res[0].length, start: res.index  })\r\n    idx++\r\n  }\r\n\r\n  return { occurances: occurances,\r\n    string: params.string\r\n  }\r\n}\r\n\r\n\r\nexport default extractOccurancesOfRegex","\r\n\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n\r\n\r\n// Adds the end of string to hits gotten by extractOccurencesOfRegec\r\nconst addEnds = (obj) => {\r\n\r\n\r\n  let arr = obj.occurances\r\n  arr[arr.length-1].end = obj.string.length\r\n\r\n  for (let i = (arr.length-2); i >= 0;i--) {\r\n    arr[i].end = arr[(i+1)].start-1\r\n  }\r\n  obj.occurances = arr\r\n\r\n  return obj\r\n}\r\n\r\n// Gets strings between headers (extracted through extractOccurencesOfRegec)\r\nconst extractChapterContent = (headersObj) => {\r\n\r\n  let headers =  headersObj.occurances\r\n  const string = headersObj.string\r\n\r\n  const arr = []\r\n  for (let headerIdx in headers) {\r\n    let header = headers[headerIdx]\r\n    arr.push({\r\n      header: header,\r\n      id: header.id,\r\n      content: string.substring(header.contentStart,header.end).split('\\n')\r\n    })\r\n  }\r\n\r\n  headersObj.occurances = arr\r\n  return(headersObj)\r\n}\r\n\r\n// Brings them all together\r\n\r\nconst extractChapters = (params) => {\r\n\r\n\r\n\r\n  let headers = extractOccurancesOfRegex({ string: params.string, start: 0, chapters: [], regex: params.regex })\r\n\r\n  if (params.filteringRegex) {\r\n    headers.occurances = headers.occurances.filter((h) => !params.filteringRegex.test(h.result))\r\n  }\r\n\r\n  headers = addEnds(headers)\r\n\r\n  let chapters = extractChapterContent(headers)\r\n  return chapters.occurances\r\n\r\n}\r\n\r\nexport { extractChapters, extractChapterContent, addEnds }","const extractTitle = (chapters) => {\r\n  const title = chapters[0].content.filter((c) => c.toLowerCase().indexOf('title:')>-1)\r\n  return title === undefined ? undefined : title[0]\r\n}\r\n\r\nexport default extractTitle","const extractNumberOfGroups = (string) => {\r\n  const RegExpNumberOfGroups = /(Number of groups[ ]+[0-9]{1,2})/\r\n  const StringContainingNumberOfGroups =  string.match(RegExpNumberOfGroups)\r\n  return StringContainingNumberOfGroups ===  null ? undefined : StringContainingNumberOfGroups[0].replace(/[^0-9]/g,'') * 1\r\n}\r\n\r\nexport default extractNumberOfGroups","\r\nimport { extractChapters } from './extractChapters'\r\nimport extractTitle    from './extractTitle'\r\nimport extractNumberOfGroups from './extractNumberOfGroups'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\n\r\nconst parseOut = (mplusoutputstring) => {\r\n\r\n  const parsed = {}\r\n\r\n  // Extract main chapters\r\n  const RegExpChapter = /(^[A-Z][A-Z 0-9-]+[A-Z]$)/gm\r\n  try {\r\n    parsed.chapters =  extractChapters({ string: mplusoutputstring, regex: RegExpChapter, filteringRegex: / (BY|WITH|ON)$/m  })\r\n    parsed.title    =  extractTitle(parsed.chapters)\r\n    parsed.NumberOfGroups = extractNumberOfGroups(mplusoutputstring)\r\n  } catch(e) {\r\n    Alert('Error with extracting chapters: ', e)\r\n  }\r\n\r\n  return parsed\r\n}\r\n\r\nexport default parseOut","import React, { useState } from 'react'\r\n\r\nimport {  Button, Modal } from 'react-bootstrap'\r\n\r\n\r\nconst FileLoader = (  { handleFileLoad, showFileUpload, handleShowFileChange }) => {\r\n\r\n\r\n  const initialDragStatus = 'Drag an .out -file here'\r\n  const [dragStatus,setDragStatus] = useState(initialDragStatus)\r\n\r\n  if (!showFileUpload) {\r\n    return('')\r\n  }\r\n\r\n  const inputStyle = {\r\n    display: 'none'\r\n  }\r\n\r\n\r\n  const handleUpload = () => handleShowFileChange()\r\n\r\n\r\n  const dropAreaStyle = {\r\n    background: '#efefef' ,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    border: 'solid 3px transparent',\r\n    transition: 'all 250ms ease-in-out 0s',\r\n    position: 'relative',\r\n    padding: '35px',\r\n    fontSize: '120%',\r\n  }\r\n\r\n  // Drag and drop functionality\r\n  const onDragEnter = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    setDragStatus('Drop file')\r\n    event.target.style.border = 'dashed black 3px'\r\n  }\r\n  const onDragLeave =  event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    setDragStatus(initialDragStatus)\r\n    event.target.style.border = dropAreaStyle.border\r\n  }\r\n\r\n  const doNothing = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onDrop = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    const file = event.dataTransfer.files[0]\r\n\r\n    if ( file.name.toLowerCase().match(/.out$/) ) {\r\n\r\n      handleFileLoad(file)\r\n\r\n    } else {\r\n\r\n      alert('Not an .out -file!')\r\n      setDragStatus(initialDragStatus)\r\n      event.target.style.border = dropAreaStyle.border\r\n\r\n    }\r\n  }\r\n\r\n  return(\r\n\r\n    <Modal show={true}onHide={handleUpload}>\r\n      <Modal.Header>\r\n        <Modal.Title>Mplus output viewer</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div\r\n          className=\"DropArea\"\r\n          style={dropAreaStyle}\r\n          onDrop={onDrop}\r\n          onDragEnter={onDragEnter}\r\n          onDragOver={doNothing}\r\n          onDragLeave ={onDragLeave}\r\n        >\r\n          { dragStatus }\r\n        </div>\r\n\r\n      </Modal.Body>\r\n\r\n      <Button primary={'true'} style={{ margin: '1%'}} >\r\n        <input id=\"file-upload\" type=\"file\" style={inputStyle} onChange={ (e) => handleFileLoad(e.target.files[0]) }></input>\r\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload\"  style={{ margin: '0px' }}>Or use the file explorer</label>\r\n      </Button>\r\n\r\n    </Modal>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default FileLoader","import React, { useReducer, useEffect } from 'react'\r\n\r\n\r\nimport { FaAngleRight,FaAngleDown } from 'react-icons/fa'\r\n\r\n\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n  case 'show':\r\n    return { display: 'block', show: true }\r\n  case 'hide':\r\n    return { display: 'none', show: false }\r\n  default:\r\n    throw new Error()\r\n  }\r\n}\r\n\r\nconst initialShowState = () =>  { return({ display: 'block', show: true } )}\r\n\r\n\r\nconst CheckboxList = ({ options, handleListChange }) => {\r\n\r\n  const [showlist, dispatch] = useReducer(reducer,initialShowState)\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'hide' })\r\n  },[])\r\n\r\n  // Shorthand for checking if option is selected\r\n  const isOptionSelected = (option) => options.selectedOptions.indexOf(option)>-1\r\n\r\n  // On check change\r\n  const handleCheckBoxChange = (e) => {\r\n    const clickedOption = e.target.value\r\n    const isSelected = isOptionSelected(clickedOption)\r\n    const updatedOptions = isSelected ? options.selectedOptions.filter(opt => opt !== clickedOption) :  options.selectedOptions.concat(clickedOption)\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: updatedOptions\r\n    })\r\n  }\r\n\r\n  const areAllSelected = () => options.selectedOptions === options.values\r\n  // Select all\r\n  const toggleSelectAll = () => {\r\n\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: areAllSelected() ? [] : options.values\r\n    })\r\n\r\n  }\r\n\r\n\r\n  // Toggle list\r\n\r\n  const toggleListDisplay = () => {\r\n    if (showlist.show) {\r\n      dispatch({ type: 'hide' })\r\n    } else {\r\n      dispatch({ type: 'show' })\r\n    }\r\n  }\r\n\r\n\r\n  const listStyle = {\r\n\r\n    position: 'absolute',\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    border: '1px solid black',\r\n    boxShadow: '1px 1px'\r\n  }\r\n\r\n  const buttonStyle = {\r\n\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    backgroundColor: 'white',\r\n    padding: '3px',\r\n    margin: '2px'\r\n  }\r\n\r\n  const angle = showlist ? <FaAngleDown/> : <FaAngleRight/>\r\n\r\n  const selectAllButtonStyle = {\r\n    border: '1px solid black',\r\n    backgroundColor: 'white',\r\n    marginBottom: '10px'\r\n  }\r\n\r\n\r\n  return(\r\n    <div className={'buttonContainer'}>\r\n      <button style={buttonStyle} onClick={toggleListDisplay}>{ options.label}{angle}</button>\r\n      <div style={listStyle} className={'hidden'}  >\r\n        <button style={selectAllButtonStyle} onClick={ toggleSelectAll }>(De-)select all</button>\r\n        {\r\n          options.values.map((val, idx) => {\r\n            const checked = isOptionSelected(val)\r\n            return(\r\n              <div key={idx + val}><input type='checkbox' checked={checked} onChange={handleCheckBoxChange}  value={val} />{ val}</div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default CheckboxList","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst convertArrayOfCellsToCSV = (args) => {\r\n\r\n  let headers,data,delimiter\r\n\r\n  headers = args.headers\r\n  data    = args.data\r\n  delimiter = args.delimiter || ';'\r\n\r\n  let result = ''\r\n\r\n  result += headers.join(delimiter) + '\\n'\r\n\r\n\r\n  result += data.map((cell) => {\r\n    if (!Array.isArray(cell)) {\r\n      return cell.join(delimiter)\r\n    }\r\n    return cell.join(delimiter)\r\n  }).join('\\n')\r\n\r\n  return result\r\n}\r\n\r\nconst downloadCSV = (args) => {\r\n\r\n\r\n  let data, filename, link\r\n  let csv = convertArrayOfCellsToCSV(args)\r\n  if (csv === null) return\r\n\r\n\r\n  filename = args.filename || 'export.csv'\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv\r\n  }\r\n  data = encodeURI(csv)\r\n\r\n  link = document.createElement('a')\r\n  link.setAttribute('href', data)\r\n  link.setAttribute('download', filename)\r\n  link.click()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DownloadCSVbutton = ({ params, float }) => {\r\n\r\n  if (params === null) {\r\n    return('')\r\n  }\r\n\r\n  const data = params.data\r\n  const headers = params.headers\r\n\r\n  const handleClick = () => {\r\n    downloadCSV({ data: data, headers: headers })\r\n\r\n\r\n  }\r\n\r\n\r\n  const style = {\r\n    margin: '0.5%',\r\n    float: 'right',\r\n    fontSize: '75%',\r\n    padding: 3\r\n  }\r\n\r\n  return(\r\n    <Button\r\n      style = { style }\r\n      primary={'true'}\r\n      onClick={ handleClick }\r\n    >\r\n      Download as CSV\r\n    </Button>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default DownloadCSVbutton","import React,{ useState } from 'react'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nimport uuidv4 from 'uuid'\r\nimport CheckboxList from './CheckboxList'\r\n\r\nimport DownloadCSVbutton from './DownloadCSVbutton'\r\n\r\n// Componente\r\n\r\n\r\nconst ResultTable = ({ headers, cells }) => {\r\n\r\n  const [tableFilters, setTableFilters] = useState({})\r\n\r\n  const tableStyle = { fontSize: '75%',padding: '1px' }\r\n  const cellStyle = { padding: 2 }\r\n\r\n  const dataToCells = (cells,idx) => {\r\n    const everyother = idx % 2 === 0\r\n    const style = { backgroundColor: everyother ? 'rgba(185, 186, 187, 0.13)' : '', color: everyother ? 'black' : '' }\r\n    return( <tr key={uuidv4()} style={style}>{ cells.map(c => <td key={uuidv4()} style={cellStyle}>{ c }</td>)}</tr>    )\r\n  }\r\n\r\n  // handle list change\r\n  const handleListChange = (filter) => {\r\n\r\n    const filterUpdate = { ...tableFilters }\r\n    filterUpdate[filter.label] = filter     // This fails if a table has two columns with identical names\r\n    setTableFilters(filterUpdate)\r\n  }\r\n\r\n\r\n\r\n  // handle headers\r\n  // if header has 'values' -attribute: create a select tag with options\r\n  // if not, plain string header\r\n  const createHeader = (header) => {\r\n    if (header.values !== undefined) {\r\n\r\n      const selectedOptions = tableFilters[header.label] !== undefined ? tableFilters[header.label].selectedOptions  : header.values\r\n\r\n      return(<CheckboxList options={ { label: header.label, selectedOptions: selectedOptions, values: header.values } } handleListChange={ handleListChange }/>)\r\n    }\r\n    return header.label\r\n  }\r\n\r\n  // apply filter set in state\r\n  // TODO: horrible\r\n  const applyFilter = (row) => {\r\n\r\n    let filters\r\n    let filter = true\r\n    let header\r\n    // loop through header and see if exists in filters\r\n    // Header is in filters, check that row value (of header index)\r\n    // is included in 'selectedOptions' attribute\r\n    for (let index=0; index<headers.length;index++) {\r\n      header = headers[index]\r\n      filters = tableFilters[header.label]\r\n      if (tableFilters[header.label] !== undefined) {\r\n        if (filters.selectedOptions.indexOf(row[header.index]) === -1) {\r\n          filter = false\r\n        }\r\n      }\r\n    }\r\n\r\n    return filter\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <DownloadCSVbutton params = { { data: cells, headers: headers.map(h => h.label ) } } />\r\n      <Table style={tableStyle}  >\r\n        <thead>\r\n          <tr>\r\n            {\r\n              headers.map(createHeader).map(c => <th key={uuidv4()} style={cellStyle}>{ c }</th>)\r\n            }\r\n          </tr>\r\n\r\n        </thead>\r\n        <tbody>\r\n          { cells.filter(applyFilter).map((c,idx) => dataToCells(c,idx)) }\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default ResultTable","const getUniqueFromArray = (arr) => {\r\n\r\n  let f = (obj,elem) => {\r\n    obj[elem] = 1\r\n    return obj\r\n  }\r\n  const obj =   arr.reduce(f,{})\r\n\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\n\r\nconst trimString = (s) => {\r\n  return s.replace(/^[ ]{1,}/,'').replace(/[ ]{1,}$/,'')\r\n}\r\n\r\n\r\nconst rowToColumn = (obs) => {\r\n\r\n  const pivoted = obs.reduce(pivot,{})\r\n  return Object.entries(pivoted).map(e => e[1])\r\n\r\n\r\n}\r\n\r\n\r\nconst pivot = (obj,elem) => {\r\n\r\n  let key = elem.rows.join('_') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      rows: elem.rows,\r\n      values: [\r\n        {\r\n          column: elem.column,\r\n          values: elem.value\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      column: elem.column,\r\n      values: elem.value\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\nconst joinTwoArrays = (a,b) => {\r\n\r\n  if ( a.length !== b.length  ) {\r\n    console.log('warning: array lengths differ in joinToArrays. Combining only lenght of shorter array.')\r\n  }\r\n  const shorterArray = a.length <= b.length ? [...a] : [...b]\r\n\r\n  return shorterArray.map((a,idx) => [a,b[idx]])\r\n}\r\n\r\n\r\nexport { getUniqueFromArray, trimString, rowToColumn, joinTwoArrays }","\r\nimport { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n// Ensure that each cell has as many keys as there are headers in the table\r\n\r\nconst ensureCellKeyCount = ({ cell, headercount }) => {\r\n\r\n  while (cell.keys.length + cell.values.length < headercount) {\r\n    cell.values.push('')\r\n  }\r\n  return cell\r\n}\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells = rowString.split(/([A-Z_\\-0-9.$]+)/).filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Group specific actions\r\n  let grouptableheaders = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  grouptableheaders = addEnds(grouptableheaders)\r\n\r\n  let grouptables = extractChapterContent(grouptableheaders)\r\n\r\n  let tablerows = grouptables.occurances.map((occ) => TableRowsToObject(occ))\r\n\r\n  // Add group as key to cells\r\n  const addKeyToCell = (cell,key) => {\r\n    cell.keys  =  [key].concat(cell.keys)\r\n    return cell\r\n  }\r\n  tablerows = tablerows.map((row) => row.map((cell) => addKeyToCell(cell,group.header.result)))\r\n\r\n  return(tablerows)\r\n}\r\n\r\n\r\n\r\nconst extractResultTable = (params) => {\r\n\r\n  const chapters = params.chapters\r\n  const headerToFind = params.headerToFind\r\n  const tableheaders = params.tableheaders\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (chapters === undefined | chapters === null) {\r\n    throw new Error('MODEL RESULTS chapter not found!')\r\n  }\r\n\r\n  let cells\r\n\r\n  // Find the chapter that has the \"headerToFind\" (eg. MODEL RESULTS)\r\n  let modelResults = chapters.find((chapt) => chapt.header.result === headerToFind)\r\n\r\n  // If output has groups:\r\n  if (NumberOfGroups !== undefined & NumberOfGroups>1)  {\r\n\r\n\r\n    // Find group specific parts of the output\r\n    const RegExpGroup =  /Group [A-Z_]+$/gm\r\n    const groups = extractChapters({ string: modelResults.content.join('\\n'), regex: RegExpGroup })\r\n\r\n    const grouptablerows = groups.map((group) => ExtractTableRows(group))\r\n    cells = grouptablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n\r\n  // If output does not have gtroups\r\n  } else {\r\n\r\n    // This function works as it similar to number of groups = 1\r\n    let tablerows = ExtractTableRows(modelResults)\r\n    cells = tablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n  }\r\n  return(cells)\r\n\r\n}\r\n\r\nexport default extractResultTable","\r\n\r\n\r\n\r\nconst cellsToGroupComparison = (obj,elem) => {\r\n\r\n  let key = elem.keys.slice(1,3).join('') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      keys: elem.keys.slice(1,3),\r\n      values: [\r\n        {\r\n          group: elem.keys[0],\r\n          values: elem.values\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      group: elem.keys[0],\r\n      values: elem.values\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nconst columnsToRows = ({ cells, variables }) => {\r\n\r\n  let cellsForGroupComparison =  Object.values( cells.reduce(cellsToGroupComparison,{}) )\r\n\r\n  const extractVariableValuesPerGroup = (cellForGroupComparison,variable,variableIndex) => {\r\n    return cellForGroupComparison.values.map((groupvalues) =>  { return({ keys: cellForGroupComparison.keys.concat(variable),group: groupvalues.group,  value: groupvalues.values[variableIndex] }) } )\r\n  }\r\n\r\n  cellsForGroupComparison = variables.map((variable,idx) => {\r\n    return cellsForGroupComparison.map((cell) => extractVariableValuesPerGroup(cell,variable,idx))\r\n  }).flat()\r\n\r\n  return cellsForGroupComparison//.flat()\r\n}\r\n\r\n\r\nexport default columnsToRows\r\n","import React from 'react'\r\nimport { Container, Alert } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst Error = ({ message, type }) => {\r\n\r\n  return(\r\n    <Container>\r\n      <Alert variant={ type ? type : 'danger' }>\r\n        { message }\r\n      </Alert>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Error","import React from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport ResultTable from './ResultTable'\r\nimport { getUniqueFromArray } from '../utils/utils'\r\nimport extractResultTable from '../utils/extractResultTable'\r\nimport columnsToRows from '../utils/columnsToRows'\r\nimport Error from './Error'\r\n\r\n\r\nconst ModelResults = ({ mplusOutput, show, type  }) => {\r\n\r\n  if ( mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  // Extract results (depending on type )\r\n  let results\r\n\r\n  try {\r\n    results = applyExtraction(mplusOutput,type)\r\n  } catch(e) {\r\n    return(\r\n      <Error message={ 'Error with parsing model results: ' + e.message }/>\r\n    )\r\n  }\r\n\r\n\r\n  const groups = getUniqueFromArray( results.cells.flat().map((c) => c.group ) )\r\n\r\n\r\n  /// Create results\r\n\r\n  const cells = results.cells\r\n\r\n\r\n  let headersForGroupTable = [\r\n    { label: 'Parameter header', index: 0, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[0]) ) },\r\n    { label: 'Parameter', index: 1,  values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[1]) ) },\r\n    { label: 'Statistic', index: 2, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[2]) ) }\r\n  ]\r\n\r\n  headersForGroupTable = headersForGroupTable.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n\r\n\r\n  const cellGroupsAsColumns = (cell) => cell[0].keys.concat(cell.map((cell) => cell.value))\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{ float: 'left' }}>{ results.header }</div>\r\n      <ResultTable\r\n        cells = { cells.map(cellGroupsAsColumns) }\r\n        headers = { headersForGroupTable }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst applyExtraction = (mplusOutput,type) => {\r\n\r\n  let variables = ['Estimate','S.E.','Est/S.E.','P-Value']\r\n  let tableheaders = ['Column1','Column2','Column3'].concat(variables)\r\n\r\n  const parsed = mplusOutput.parsed\r\n\r\n\r\n  let header = type === 'standardized' ? 'STANDARDIZED MODEL RESULTS' : 'MODEL RESULTS'\r\n\r\n  let cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  return {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n}\r\n\r\n\r\nexport default ModelResults","import React,{ useState } from 'react'\r\n\r\nimport {  Col, Row } from 'react-bootstrap'\r\nimport uuidv4 from 'uuid'\r\n\r\nconst WholeOutput = ({ mplusOutput, show }) => {\r\n\r\n  const [ selectedChapters, setSelectedChapters ] = useState(['THE MODEL ESTIMATION TERMINATED NORMALLY'])\r\n\r\n  const getChapterHeaders = () => {\r\n    return mplusOutput === null ? [] : mplusOutput.parsed.chapters.map(chap =>   chap.header.result  )\r\n  }\r\n\r\n\r\n  if (mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n\r\n\r\n  const chapterHeaders = getChapterHeaders()\r\n\r\n  const chapters = mplusOutput.parsed.chapters\r\n\r\n  const toggleChapterSelection = (header) => {\r\n\r\n    if (  isHeaderSelected(header)  ) {\r\n      // Included in selected chapters -> remove it\r\n      return selectedChapters.filter(chapter => chapter !== header)\r\n    }\r\n    // Not included in selected chapters -> add it\r\n    return selectedChapters.concat(header)\r\n\r\n  }\r\n\r\n  // Shorthand for checking if header is selected\r\n  const isHeaderSelected = (header) => selectedChapters.indexOf(header)>-1\r\n\r\n  // Function handle checkbox changes\r\n\r\n  const handleCheckBoxChange = (e) => {\r\n    //e.preventDefault()\r\n\r\n    const clickedChapter = e.target.value\r\n    setSelectedChapters(toggleChapterSelection(clickedChapter))\r\n  }\r\n\r\n  // A container for each chapter\r\n  const chapterContentContainer = (chapter,idx) => {\r\n\r\n    const style = {\r\n      whiteSpace: 'pre-wrap',\r\n      fontFamily: 'Consolas',\r\n      fontSize: '70%',\r\n      display: isHeaderSelected( chapter.header ) ? '' : 'none'\r\n    }\r\n    const content = '<h6>'+chapter.header +'</h6>\\n' + '<div>' + chapter.content + '</div>'\r\n    return(\r\n      <div key={uuidv4()}>\r\n        <div style={ style }  dangerouslySetInnerHTML={{ __html: content }} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  // (De-)select all\r\n  const toggleSelectAll = () => {\r\n\r\n    if ( selectedChapters.length !== chapterHeaders.length) {\r\n\r\n      setSelectedChapters(chapterHeaders)\r\n\r\n    } else {\r\n\r\n      setSelectedChapters([])\r\n    }\r\n  }\r\n\r\n  const menuStyle = {\r\n    position: 'fixed',\r\n    marginLeft: '5%',\r\n    marginTop: '2%'\r\n  }\r\n\r\n  return(\r\n    <div style={ { width: '100%' } }>\r\n      <Row>\r\n        <Col xs={4}>\r\n          <div style = {menuStyle} >\r\n            <div style={{ fontSize: '65%' }}>\r\n              <input type='checkbox'  onClick={ toggleSelectAll }/>\r\n              {  selectedChapters.length !== chapterHeaders.length ? 'SELECT ALL' : 'DESELECT ALL' }\r\n            </div>\r\n            {\r\n              chapterHeaders.map(header =>  {\r\n                const checked = isHeaderSelected(header)\r\n                const style = { fontSize: '65%' }\r\n                return(\r\n                  <div key={uuidv4()} style={style}>\r\n                    <input type='checkbox' checked = { checked } onChange={handleCheckBoxChange} value = { header }/>\r\n                    { header }\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n\r\n        </Col>\r\n        <Col xs={8}>\r\n          {\r\n            chapters.map((chap,idx) => chapterContentContainer( { content: chap.content.join('\\n'), header: chap.header.result },idx) )\r\n          }\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default WholeOutput","\r\n\r\nimport { extractChapters } from './extractChapters'\r\nimport { trimString } from './utils'\r\n\r\n\r\n\r\n// this handles (extracst numbers and titles) single chapter in model fit information\r\nconst handleModelFitChapter = (chap) => {\r\n\r\n\r\n  const header = chap.header.result\r\n\r\n  const handleRow = (row) => {\r\n    // extract number and name of statistic\r\n    // by splitting with two or more spaces\r\n    const splitted = trimString(row).split(/[ ]{2,}/)\r\n    const statistic =  trimString(splitted[0])\r\n\r\n    return({\r\n      header: header,\r\n      statistic:  statistic,\r\n      value: splitted.length === 1 ? -1 : splitted.slice(1,).map(s => trimString(s)).join(', ')//splittetrimString(splitted[1])\r\n    })\r\n\r\n  }\r\n\r\n  return  chap.content.map(handleRow)\r\n\r\n}\r\n\r\n\r\n// modelInformationChapter = temp1.parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION')\r\n\r\nconst extractModelFitInformation = (modelInformationChapter) => {\r\n\r\n\r\n\r\n  // The model fit information is structured as follows:\r\n  // HEADER ROW\r\n  //      NAME_OF_STATISTIC       VALUE_OF_STATISTIC\r\n  // with exception of the first statistic 'Number of free parameters'\r\n\r\n\r\n  // First get chapters of model fit information based on header rows\r\n  const params = {\r\n    string: modelInformationChapter.content.join('\\n'),\r\n    regex: /^[A-Z*].+$/gm\r\n  }\r\n  let chaptersOfModelInformation = extractChapters(params)\r\n\r\n  // MANIPULATIONS\r\n\r\n  // 1. Remove useless chapter starting with *\r\n  chaptersOfModelInformation = chaptersOfModelInformation.filter(chap => chap.header.result.substring(0,1)!=='*')\r\n\r\n  // 2. Handle exception of first statistic and clean empty objects from content array\r\n  chaptersOfModelInformation = chaptersOfModelInformation.map(chap =>  {\r\n    chap.content = chap.content.filter(c => c.length>1)\r\n\r\n    if (chap.content.length === 0) {\r\n\r\n      chap.content = [ chap.header.result ] // if empty, replace w/ header\r\n      chap.header.result =  trimString( chap.header.result.replace(/[0-9]{1,}/,'') )//  removing any numbers from header (for exception Number of free parameters') // \r\n    }\r\n    return chap\r\n  })\r\n\r\n  // Get statistics\r\n  const statistics = chaptersOfModelInformation.map( handleModelFitChapter )\r\n\r\n  return statistics.flat()\r\n\r\n}\r\n\r\nexport default extractModelFitInformation\r\n","import React from 'react'\r\n\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\n\r\nimport { getUniqueFromArray } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\nimport extractModelFitInformation from '../utils/extractModelFitInformation'\r\nimport Error from './Error'\r\n\r\n\r\nconst ModelFitInformation = ({ mplusOutput, show }) => {\r\n  if ( mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  // extractModelFitInformation\r\n  let modelFitInformation\r\n  try {\r\n    modelFitInformation = extractModelFitInformation(mplusOutput.parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION'))\r\n  } catch(e) {\r\n    return(\r\n      <Error message={ 'Error with parsing model fit information: ' + e.message }/>\r\n    )\r\n  }\r\n\r\n  // Hard coded headers for table\r\n  const headers = [\r\n    { label: 'Statistic group', index: 0, values: getUniqueFromArray( modelFitInformation.map(info => info.header) ) },\r\n    { label: 'Statistic', index: 1 },\r\n    { label: 'Value', index: 2 }\r\n  ]\r\n\r\n  const objectsToArrays = (ob) => {\r\n    return([ob.header, ob.statistic, ob.value ])\r\n  }\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{ float: 'left' }}>MODEL FIT INFORMATION</div>\r\n      <ResultTable\r\n        cells = { modelFitInformation.map(objectsToArrays) }\r\n        headers = { headers }\r\n      />\r\n\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\nexport default ModelFitInformation","import { extractChapters } from './extractChapters'\r\n\r\n/*\r\nThe structure of residual output is as follows:\r\n   ESTIMATED MODEL AND RESIDUALS (OBSERVED - ESTIMATED) FOR groupname\r\n         Model Estimated Means/Intercepts/Thresholds\r\n         Residuals for Means/Intercepts/Thresholds\r\n         Standardized Residuals (z-scores) for Means/Intercepts/Threshold\r\n         Normalized Residuals for Means/Intercepts/Threshold\r\n         Model Estimated Covariances/Correlations/Residual Correlations\r\n      \t Model Estimated Correlations/Residual Correlations\r\n         Residuals for Covariances/Correlations/Residual Correlations\r\n         Residuals for Correlations/Residual Correlations\r\n\r\n   UNIVARIATE PROPORTIONS FOR CATEGORICAL VARIABLES FOR groupname\r\n*/\r\n\r\nconst parseESTIMATED = (ESTIMATED_GROUP) => {\r\n\r\n\r\n  const params = {\r\n    string: ESTIMATED_GROUP.content.join('\\n'),\r\n    regex: /[A-Z][a-z][a-zA-Z/ ()\\\\-]{1,}$/gm\r\n  }\r\n  let chaptersOfEstimated = extractChapters(params)\r\n\r\n\r\n  let group = /FOR (.+$)/.exec(ESTIMATED_GROUP.header.result) // Get group name from header text\r\n\r\n  if (group !== null) { // If no group is found, assume the analysis was not grouped\r\n\r\n    group = group[1] // Cant be done earlier -> would result to error with undefined\r\n    // Add group to each chapter\r\n    chaptersOfEstimated = chaptersOfEstimated.map(chap => {\r\n      return { ...chap, group: group }\r\n    })\r\n  }\r\n\r\n\r\n  // Separate based on nature of table\r\n  //  1. Means: Model Estimated Means.. & Residuals for means\r\n  //  2. Covariances: These are cross-tabulations\r\n\r\n  const chapterDivider = (chap) => /Residuals.+for Means/.test(chap.header.result) |  chap.header.result.indexOf('Model Estimated Means') > -1\r\n\r\n  const means = chaptersOfEstimated.filter(chapterDivider)\r\n  const parsedMeans = means.map(parseMeans)\r\n\r\n\r\n  let covariances =  chaptersOfEstimated.filter(chap => !chapterDivider(chap))\r\n\r\n  covariances = covariances.map(cov => {\r\n    return { ...cov, key: cov.header.result }  // Add key for gatherByKey\r\n  })\r\n  // this gathers covarience/correlation tables that are spread into several tables in the output\r\n  const  gatheredCovariances = gatherByKey(covariances)\r\n\r\n\r\n  let parsedCovariances =   gatheredCovariances.map(table => {\r\n    return {\r\n      header: table.header,\r\n      key: table.header, // Prepare for gatherByKey\r\n      content:  table.content.map(subtable => {\r\n        const str = getTableStructure(subtable)\r\n        return getTableValues(str)\r\n      }).flat()\r\n      // add group\r\n        .map(obs => {\r\n          return { ...obs,group: group, keys: obs.keys }\r\n        })\r\n    }\r\n  })\r\n\r\n\r\n  return {\r\n    means: parsedMeans,\r\n    covariances: parsedCovariances\r\n  }\r\n}\r\n\r\n\r\nconst parseUNIVARIATETABLE = table => {\r\n\r\n\r\n  const rows = table.content.filter(row => row!=='')\r\n  let group = /FOR ([^ ]+)$/.exec(table.header.result) // Get group name from header text. It is assumed that group name does not contain white spaces\r\n\r\n  group = group ? group[1] : 'Unknown group' //\r\n\r\n  const headerRegex = /Variable.+Observed/\r\n\r\n  const header = rows.find(row => row.match(headerRegex))\r\n  let datarows = rows.filter(row => !row.match(headerRegex))\r\n  datarows = datarows.filter(row => row.match(/[A-Za-z0-9]/)) // Contains non-whitespace characters so !== '' does not work\r\n\r\n  // Count the number of blanks\r\n  // This tells us the indentation of rows\r\n  const rowDepth = datarows.map(r => r.split(' ').findIndex(c => c!==''))\r\n  const minDepth = rowDepth.reduce((t,c) => c<t ? c : t)\r\n  // find and mark subtableheaders\r\n  datarows = datarows.map(row => ({ content: row, subtableHeader: row.split(' ').findIndex(c => c!=='')  === minDepth    })  )\r\n\r\n  const subtables = datarows.reduce((tot,cur) => {\r\n\r\n    if (cur.subtableHeader) {\r\n      return( tot.concat([{ header: cur.content.replace(/^[ ]+/,''), rows: [] }]) )\r\n    }\r\n\r\n    tot[ (tot.length-1)].rows.push( cur )\r\n    return(tot)\r\n\r\n  } ,[])\r\n\r\n  // Create table rows: group, subtable header, values\r\n  const tableRows = subtables.map(subtable => {\r\n    const rowStart = [ group,subtable.header ]\r\n\r\n    return subtable.rows.map(row => {\r\n      // Category 1 -> Category1. Eases splitting\r\n      const rowFix = row.content.replace(/Category[ ]+([0-9]?)/,'Category$1')\r\n\r\n      return rowStart.concat(  rowFix.split(/[ ]+/gi).filter(val => val !== '') )\r\n    })\r\n\r\n  })\r\n\r\n  return {\r\n    headers: header.split(/[ ]{2,}/g).filter(val => val !== ''),\r\n    cells: tableRows\r\n  }\r\n}\r\n\r\n\r\nconst parseMeans = (means) => {\r\n\r\n  const r =  means.content\r\n    .filter(t => /[^ ]/.test(t))\r\n    .map(m => m.split(' ').filter(res => res.length>1))\r\n    .map(m => m.filter(mo => /[0-9A-Z]/.test(mo) )).filter(m => m.length>0)\r\n\r\n  return r[0].map((o,idx) => {\r\n    return { parameter: o, value: r[1][idx], group: means.group, statistic: means.header.result }\r\n  })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst extractResidualOutput = (ResidualOutputChapter) => {\r\n\r\n\r\n  const params = {\r\n    string: ResidualOutputChapter.chapter.content.join('\\n'),\r\n    regex:  ResidualOutputChapter.NumberOfGroups > 1 ?   /^[A-Z ()-]{2,}FOR.+$/gm : /^[A-Z ()-]+$/gm\r\n  }\r\n  const chaptersOfResidualOutput = extractChapters(params)\r\n\r\n\r\n  // Divide into two for ease\r\n  const ESTIMATED = chaptersOfResidualOutput.filter(chap => chap.header.result.indexOf('ESTIMATED MODEL AND RESIDUAL') > -1)\r\n  const UNIVARIATE = chaptersOfResidualOutput.filter(chap => chap.header.result.indexOf('ESTIMATED MODEL AND RESIDUAL') === -1)\r\n\r\n  const PARSED_ESTIMATED  = ESTIMATED.map(parseESTIMATED)\r\n\r\n  let univariateProportions = undefined\r\n  if (UNIVARIATE.length>0) {\r\n    const PARSED_UNIVARIATE = UNIVARIATE.map(parseUNIVARIATETABLE)\r\n    const PARSED_UNIVARIATE_SINGLE_TABLE = PARSED_UNIVARIATE.reduce((tot,cur) => (!tot) ? cur : { ...tot, cells: tot.cells.concat(cur.cells) }, undefined)\r\n    univariateProportions = {\r\n      ...PARSED_UNIVARIATE_SINGLE_TABLE\r\n      ,cells: PARSED_UNIVARIATE_SINGLE_TABLE.cells.flat()\r\n    }\r\n  }\r\n\r\n\r\n  return {\r\n    means: PARSED_ESTIMATED.map(E => E.means.flat()).flat(),\r\n    covariances: gatherByKey( PARSED_ESTIMATED.map(E => E.covariances).flat() ),\r\n    univariateProportions\r\n  }\r\n}\r\n\r\n\r\nconst gatherByKey = arrayOfObjects => {\r\n\r\n  const gatherer = (obj,elem) => {\r\n\r\n    let key = elem.key // Defines the key to distinguish tables\r\n\r\n    if (obj[key]===undefined) {\r\n\r\n      obj[key] = {\r\n        header: key,\r\n        content: [elem.content]\r\n      }\r\n\r\n    } else {\r\n\r\n      obj[key].content.push(elem.content)\r\n    }\r\n\r\n    return obj\r\n  }\r\n\r\n  return Object.entries(arrayOfObjects.reduce(gatherer,{})).map(arr => arr[1])\r\n}\r\n\r\n\r\n\r\n\r\nconst getTableStructure = (table) => {\r\n\r\n  // Remove empty\r\n  table = table.filter(row => row.replace('\\r','').length>0) // Contains new lines\r\n\r\n  // Finds the index of the row that separates header row from table body\r\n  const indexOfTableSeparator = table.findIndex(row => /^[_ \\r]*$/.test(row))\r\n\r\n  // get columns\r\n  const columns = table[(indexOfTableSeparator-1)].split(/[ ]{1,}/).filter(col => col.length>1)\r\n\r\n  // table body\r\n  let body = table.slice((indexOfTableSeparator+1),)\r\n\r\n  return ({\r\n    columns: columns,\r\n    body: body\r\n  })\r\n\r\n}\r\n\r\n\r\nconst getTableValues = ({ body, columns }) => {\r\n\r\n  const rowsSplitted = body.filter(row => /[0-9]/.test(row)).map(row => row.split(/[ ]{1,}/).filter(cell => cell.length>0))\r\n\r\n  const assignColumnNamesToValues = (values) => {\r\n\r\n    const rowKey = values[0]\r\n\r\n    return values.slice(1,).map((val,idx) => {\r\n      return {\r\n        rowKey: rowKey,\r\n        colKey: columns[idx],\r\n        keys: [rowKey,columns[idx]],\r\n        value: val\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  return rowsSplitted.map(assignColumnNamesToValues).flat()\r\n\r\n}\r\n\r\n\r\nexport default extractResidualOutput","import React from 'react'\r\n\r\nimport { getUniqueFromArray, rowToColumn } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\nimport Error from './Error'\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\nimport uuidv4 from 'uuid'\r\nimport extractResidualOutput from '../utils/extractResidualOutput'\r\n\r\nconst ResidualOutput = ({ mplusOutput,show }) => {\r\n\r\n  if ( mplusOutput === null || !show || mplusOutput === undefined ) {\r\n    return('')\r\n  }\r\n\r\n  let output = undefined\r\n\r\n  // Try extracting output\r\n  try {\r\n\r\n    output = extractResidualOutput({ chapter: mplusOutput.parsed.chapters.find(chap => chap.header.result==='RESIDUAL OUTPUT'), NumberOfGroups: mplusOutput.parsed.NumberOfGroups })\r\n\r\n  } catch(e) {\r\n\r\n    return(\r\n      <Error   message={ 'Error with parsing residual output: ' + e.message }/>\r\n    )\r\n  }\r\n\r\n\r\n\r\n  let groups = getUniqueFromArray( output.means.map(o => o.group) )\r\n\r\n  const groupsExist = groups.length > 0 ? true : false\r\n\r\n  if ( !groupsExist ) {\r\n    groups = ['Value']\r\n  }\r\n\r\n  let headers = [\r\n    { label: 'Statistic', index: 0, values: getUniqueFromArray( output.means.map(o => o.statistic) ) },\r\n    { label: 'Parameter', index: 1, values: getUniqueFromArray( output.means.map(o => o.parameter) ) },\r\n  ]\r\n\r\n  headers = headers.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n  // Define rows and column for pivoting\r\n  output.means = output.means.map(m => {\r\n    return { ...m, rows: [ m.statistic, m.parameter], column: m.group }\r\n  })\r\n\r\n  const pivotedMeans = rowToColumn(output.means)\r\n\r\n  // If no group present, no output.means\r\n  let meansTable = ((means) => {\r\n\r\n    if (means.length === 0 ) {\r\n      return ''\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>Estimates and residuals for Means/Intercepts/Tresholds</h3>\r\n        <ResultTable\r\n          cells = {  pivotedMeans.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n          headers={ headers }/>\r\n      </div>\r\n    )\r\n  })(output.means)\r\n  // univariateProportions\r\n  let propTable = ((props) => {\r\n\r\n    if (props === undefined) {\r\n      return ''\r\n    }\r\n\r\n\r\n    // Add headers: Group and parameter\r\n\r\n    let headers = [\r\n      { label: 'Group', index: 0, values:  groups },\r\n      { label: 'Variable', index: 1, values: getUniqueFromArray( props.cells.map(o => o[1] ) ) },\r\n      { label: 'Category', index: 1, values: getUniqueFromArray( props.cells.map(o => o[2] ) )   }\r\n    ]\r\n    // Variable = Parameter here\r\n    headers = headers.concat( props.headers.filter(h => h !== 'Variable').map(h => ({ 'label': h }) )  )\r\n\r\n    return (\r\n      <div>\r\n        <h3>Univariate proportions for categorical variables</h3>\r\n        <ResultTable\r\n          cells = {  props.cells }\r\n          headers={  headers }/>\r\n      </div>\r\n    )\r\n  })(output.univariateProportions)\r\n\r\n\r\n  // Return tables\r\n\r\n  return(\r\n    <Container>\r\n      {\r\n        meansTable\r\n      }\r\n      <h2>Covariance/Correlation tables</h2>\r\n      {\r\n        output.covariances.map(cov => correlationOrCovarianceTableFromData(cov,groups))\r\n      }\r\n      <h2></h2>\r\n      {\r\n        propTable\r\n      }\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\n\r\nconst correlationOrCovarianceTableFromData = (data,columns) => {\r\n\r\n\r\n\r\n\r\n  const cells  = data.content.flat().map(o => {  return { column: o.group, rows: o.keys, value: o.value } })\r\n\r\n  const pivotedCells = rowToColumn(cells)\r\n\r\n\r\n  let headers = [\r\n    { label: 'Parameter 1',  index: 0, values: getUniqueFromArray( cells.map(cell => cell.rows[0] ) )  },\r\n    { label: 'Parameter 2',  index: 1, values: getUniqueFromArray( cells.map(cell => cell.rows[1] ) ) },\r\n  ].concat( columns.map(group => {   return({ 'label': group })  }))\r\n\r\n\r\n  return(\r\n    <div key={uuidv4()} >\r\n      <h3>{ data.header }</h3>\r\n      <ResultTable\r\n        cells = {  pivotedCells.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n        headers={ headers }/>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default ResidualOutput","import { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\nimport { joinTwoArrays } from '../utils/utils'\r\n\r\n\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells =   rowString\r\n      .split(/([0-9]+\\.[0-9]+)/)\r\n      .filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n      .map(cell => cell.trim())\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Return if no mod indices\r\n  // .includes is dangerous since must account for newline characters\r\n  if ( group.content.find(c => c.indexOf('No modification indices above the minimum value')>-1) ) {\r\n    return(undefined)\r\n  }\r\n\r\n  const groupName = group.header.result.replace('Group ','')\r\n\r\n  group.content = group.content.filter(c => c.length>1)\r\n\r\n  let  subtableheaders  = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  subtableheaders       = addEnds(subtableheaders)\r\n  const subtables       = extractChapterContent(subtableheaders)\r\n\r\n  let subtableCells     = subtables.occurances.map(TableRowsToObject).flat().map(cell => ({ ...cell, values: cell.values.filter(val => !(/[^0-9.-]/.test(val))) }) )\r\n  subtableCells = subtableCells.map(cell => ({ ...cell, keys: [groupName].concat(cell.keys) }) )\r\n\r\n\r\n  return( subtableCells )\r\n}\r\n\r\n\r\n\r\nconst extractModelIndicesTable = (params) => {\r\n\r\n  const chapter = params.chapter\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (NumberOfGroups === 1 | chapter === undefined | chapter === null) {\r\n    // Apparently, if no groups in analysis -> no mod indices\r\n    return undefined\r\n  }\r\n\r\n\r\n  const modVariables =  ['M.I.'  ,'E.P.C.' ,'Std E.P.C.' ,'StdYX E.P.C.']\r\n\r\n\r\n  // Find limit for minimum M.I. value\r\n  const minimumMIvalue = chapter.content.find(row => row.indexOf('Minimum M.I. value for printing the modification index')>-1)\r\n\r\n\r\n  // Find group specific parts of the output\r\n  const RegExpGroup =  /Group [A-Z_]+$/gm\r\n  const groups = extractChapters({ string: chapter.content.join('\\n'), regex: RegExpGroup })\r\n\r\n  const cells = groups\r\n    .map((group) => ExtractTableRows(group))\r\n    .filter(grouptable => grouptable !== undefined)\r\n    .flat()\r\n    .map(tablerow => ({ ...tablerow, columns: modVariables }))\r\n    .map(table => {\r\n      return joinTwoArrays(table.columns,table.values).map(arr => ({ keys: table.keys.concat(arr[0]), value: arr[1]   }))\r\n    }).flat()\r\n\r\n\r\n  return({\r\n    cells,\r\n    minimumMIvalue\r\n  })\r\n\r\n}\r\n\r\nexport default extractModelIndicesTable","import React from 'react'\r\n\r\nimport { getUniqueFromArray, rowToColumn } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\nimport { Container } from 'react-bootstrap'\r\nimport extractModelIndicesTable from '../utils/extractModelModIndices'\r\nimport Error from './Error'\r\n\r\n\r\n\r\nconst ModelModificationIndices = ({ mplusOutput,show }) => {\r\n\r\n  if ( mplusOutput === undefined || mplusOutput === null || !show  ) {\r\n    return ''\r\n  }\r\n\r\n  // extract model mod indices\r\n  let modelIndices\r\n  try {\r\n    modelIndices = extractModelIndicesTable(\r\n      { chapter: mplusOutput.parsed.chapters.find(chap => chap.header.result==='MODEL MODIFICATION INDICES')\r\n        , NumberOfGroups: mplusOutput.parsed.NumberOfGroups\r\n      })\r\n  } catch(e) {\r\n    return(\r\n      <Error message={'Error with parsing model mod. indices: ' + e.message }/>\r\n    )\r\n  }\r\n\r\n  // Return warnign message if no mod. indices exist\r\n  if ( modelIndices === undefined  ) {\r\n    return(\r\n      <Error type='warning' message='No model modification indices to display'/>\r\n    )\r\n  }\r\n\r\n  console.log('modelIndices',modelIndices)\r\n\r\n\r\n  let groups = getUniqueFromArray( modelIndices.cells.map(o => o.keys[0]) )\r\n  const cells = manipulateModificationIndicesToTableCells( modelIndices.cells, groups)\r\n\r\n\r\n\r\n  // Table headers\r\n  let headers = [\r\n\r\n    { label: 'Subtable header', index: 0, values: getUniqueFromArray( cells.map(cell => cell.rows[1]) ) },\r\n    { label: 'Parameter', index: 1, values: getUniqueFromArray( cells.map(cell => cell.rows[2]) ) },\r\n    { label: 'Statistic', index: 2, values: getUniqueFromArray( cells.map(cell => cell.rows[3]) ) },\r\n  ]\r\n\r\n  headers = headers.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <h3>Model modification indices</h3>\r\n      <div>\r\n        { modelIndices.minimumMIvalue }\r\n      </div>\r\n      <div>\r\n        A group is not shown in the table if no modification indices are above the minimum value.\r\n      </div>\r\n      <ResultTable\r\n        cells = {  cells.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n        headers={ headers }/>\r\n    </Container>\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst manipulateModificationIndicesToTableCells = (indices,groups) => {\r\n\r\n  console.log('idnices',indices)\r\n  \r\n  let cells = indices.map(cell => ({ ...cell, column: cell.keys[0], rows: cell.keys.slice(1,) }))\r\n  cells = rowToColumn(cells)\r\n\r\n\r\n  // add empty cells to table for coherence\r\n  const ensureCellCount = cell => {\r\n    const values =  groups\r\n      .map(group => {\r\n        // Check if value for group exists\r\n        const value = cell.values.find(v => v.column === group)\r\n        // And replace with null observation if not\r\n        return value !== undefined ? value : { column: group, value: null }\r\n      })\r\n\r\n    return { ...cell, values: values }\r\n  }\r\n\r\n  cells = cells.map(ensureCellCount)\r\n  \r\n  return cells\r\n}\r\n\r\nexport default ModelModificationIndices","import React, { useState } from 'react'\nimport Menu from './components/Menu'\n\n\n\nimport parseOut from './utils/parseOut'\nimport FileLoader from './components/FileLoader'\nimport ModelResults from './components/ModelResults'\nimport WholeOutput from './components/WholeOutput'\nimport ModelFitInformation from './components/ModelFitInformation'\nimport ResidualOutput from './components/ResidualOutput'\nimport ModelModificationIndices from './components/ModelModificationIndices'\n\nimport './bootstrap.min.css'\n\nconst App = () => {\n\n  const [ mplusOutput, setMplusOutput ] = useState(null)\n  const [ page, setPage ] = useState('wholeoutput')\n  const [ showFileUpload, setShowFileUpload ] = useState(true)\n\n  const handleFileLoad = (file) => {\n\n    const reader = new FileReader()\n\n    reader.onload = () =>  {\n      setMplusOutput(\n        {\n          string: reader.result\n          ,filename: file.name\n          ,parsed: parseOut(reader.result)\n        })\n    }\n\n    reader.readAsText(file,'ISO-881')\n    setShowFileUpload(false)\n  }\n\n  const handlePageChange = (page) => {\n    setPage(page)\n  }\n\n\n\n  // Menu is position: fixed, so this:\n  const contentStyle = {\n    zIndex: -1,\n    marginTop: '5%'\n\n  }\n  const containerStyle = {\n    position: 'relative'\n  }\n\n  const showModal = showFileUpload & mplusOutput === null\n\n  return (\n    <div style={containerStyle}>\n\n      <FileLoader\n        handleFileLoad={handleFileLoad}\n        showFileUpload={ showModal }\n        handleShowFileChange = {() => setShowFileUpload(false) }/>\n\n      <Menu mplusOutput = { mplusOutput }     handlePageChange = { handlePageChange } page={page}/>\n\n\n      <div style={contentStyle}>\n        <WholeOutput              show = { page === 'wholeoutput' }               mplusOutput = { mplusOutput } />\n        <ModelFitInformation      show = { page === 'modelfitinformation' }       mplusOutput = { mplusOutput } />\n        <ModelResults             show = { page === 'modelresults'    }           mplusOutput = { mplusOutput } />\n        <ModelResults             show = { page === 'stdmodelresults' }           mplusOutput = { mplusOutput } type='standardized' />\n        <ResidualOutput           show = { page === 'residualoutput'  }           mplusOutput = { mplusOutput } />\n        <ModelModificationIndices show = {  page === 'modelmodificationindices' } mplusOutput={ mplusOutput }/>\n      </div>\n      \n\n\n    </div>\n  )\n\n}\nexport default App\n","\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport React from 'react'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}