{"version":3,"sources":["components/Menu.js","utils/extractOccurancesOfRegex.js","utils/extractChapters.js","utils/extractTitle.js","utils/extractNumberOfGroups.js","utils/extractResultTable.js","utils/extractResidualOutput.js","utils/columnsToRows.js","utils/utils.js","utils/extractModelFitInformation.js","utils/parseOut.js","components/FileLoader.js","components/CheckboxList.js","components/DownloadCSVbutton.js","components/ResultTable.js","components/ModelResults.js","components/WholeOutput.js","components/ModelFitInformation.js","components/ResidualOutput.js","App.js","index.js"],"names":["Menu","mplusOutput","handlePageChange","page","buttonStyle","margin","fontSize","buttonStyleWithBorder","border","style","backgroundColor","position","width","zIndex","top","label","map","opt","Button","key","uuidv4","onClick","extractOccurancesOfRegex","params","regex","idx","occurances","res","exec","string","push","result","id","contentStart","index","length","start","addEnds","obj","arr","end","i","extractChapterContent","headersObj","headers","headerIdx","header","content","substring","split","extractChapters","chapters","filteringRegex","filter","h","test","extractTitle","title","c","toLowerCase","indexOf","undefined","extractNumberOfGroups","StringContainingNumberOfGroups","match","replace","ensureCellKeyCount","cell","headercount","keys","values","ExtractTableRows","group","grouptableheaders","join","tablerows","occ","originalTableRows","r","or","row","additionalKey","rowObj","splice","rowAsObject","TableRowsToObject","concat","addKeyToCell","extractResultTable","cells","headerToFind","tableheaders","NumberOfGroups","alert","modelResults","chapt","flat","parseESTIMATED","ESTIMATED_GROUP","chaptersOfEstimated","console","log","chap","chapterDivider","parsedMeans","parseMeans","covariances","cov","gatheredCovariances","gatherByKey","parsedCovariances","table","subtable","str","getTableStructure","getTableValues","obs","means","t","m","mo","o","parameter","value","statistic","arrayOfObjects","Object","entries","reduce","elem","indexOfTableSeparator","findIndex","columns","col","body","slice","rowKey","val","colKey","extractResidualOutput","ResidualOutputChapter","chapter","chaptersOfResidualOutput","ESTIMATED","UNIVARIATE","PARSED_ESTIMATED","E","cellsToGroupComparison","columnsToRows","variables","cellsForGroupComparison","variable","cellForGroupComparison","variableIndex","groupvalues","extractVariableValuesPerGroup","getUniqueFromArray","getOwnPropertyNames","trimString","s","rowToColumn","pivoted","pivot","e","rows","column","handleModelFitChapter","splitted","extractModelFitInformation","modelInformationChapter","chaptersOfModelInformation","parseOut","mplusoutputstring","parsed","standardizedModelResults","groups","modelFitInformation","find","residualOutput","message","FileLoader","handleFileLoad","showFileUpload","handleShowFileChange","Modal","show","onHide","Header","Title","Body","Footer","primary","type","display","onChange","htmlFor","className","reducer","state","action","Error","initialShowState","CheckboxList","options","handleListChange","useReducer","showlist","dispatch","useEffect","isOptionSelected","option","selectedOptions","handleCheckBoxChange","clickedOption","target","updatedOptions","angle","borderRadius","padding","boxShadow","marginBottom","checked","downloadCSV","args","data","filename","link","csv","delimiter","Array","isArray","convertArrayOfCellsToCSV","encodeURI","document","createElement","setAttribute","click","DownloadCSVbutton","float","ResultTable","useState","tableFilters","setTableFilters","cellStyle","filterUpdate","Table","filters","everyother","color","dataToCells","ModelResults","results","headersForGroupTable","Container","WholeOutput","selectedChapters","setSelectedChapters","chapterHeaders","isHeaderSelected","clickedChapter","Row","Col","xs","marginLeft","marginTop","whiteSpace","fontFamily","dangerouslySetInnerHTML","__html","chapterContentContainer","ModelFitInformation","info","ob","correlationOrCovarianceTableFromData","pivotedCells","ResidualOutput","output","pivotedMeans","meansTable","App","setMplusOutput","setPage","setShowFileUpload","showModal","fileInput","file","files","reader","FileReader","onload","name","readAsText","ReactDOM","render","getElementById"],"mappings":"yPA+CeA,EA1CF,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,KAC7C,GAAoB,OAAhBF,EACF,MAAO,GAGT,IAQMG,EAAc,CAClBC,OAAQ,OACRC,SAAU,OAGNC,EAAwB,CAC5BF,OAAQ,OACRC,SAAU,MACVE,OAAQ,mBAYV,OACE,yBAAKC,MAVc,CACnBC,gBAAiB,QACjBC,SAAU,QACVC,MAAO,OACPC,OAAQ,IACRC,IAAK,IAxBa,CAClB,CAAEX,KAAM,cAAqBY,MAAO,gBACpC,CAAEZ,KAAM,sBAAwBY,MAAO,qBACvC,CAAEZ,KAAM,eAAqBY,MAAO,iBACpC,CAAEZ,KAAM,kBAAqBY,MAAO,8BACpC,CAAEZ,KAAM,iBAAoBY,MAAO,oBA0BnBC,IAAI,SAAAC,GAAG,OAAI,kBAACC,EAAA,EAAD,CAAQT,MAAQQ,EAAId,OAASA,EAAOI,EAAwBH,EAAce,IAAKC,MAAUC,QAAU,kBAAOnB,EAAiBe,EAAId,QAAWc,EAAIF,WCnB9JO,EAlBkB,SAACC,GAOhC,IALA,IAAMC,EAAQD,EAAOC,MACjBC,EAAM,EAEJC,EAAa,GACfC,EAAM,GACmC,QAArCA,EAAMH,EAAMI,KAAKL,EAAOM,UAC9BH,EAAWI,KAAK,CAAEC,OAAQJ,EAAI,GAAIK,GAAI,IAAIP,EAAKQ,aAAcN,EAAIO,MAAQP,EAAI,GAAGQ,OAAQC,MAAOT,EAAIO,QACnGT,IAGF,MAAO,CAAEC,WAAYA,EACnBG,OAAQN,EAAOM,SCTbQ,EAAU,SAACC,GAGf,IAAIC,EAAMD,EAAIZ,WACda,EAAIA,EAAIJ,OAAO,GAAGK,IAAMF,EAAIT,OAAOM,OAEnC,IAAK,IAAIM,EAAKF,EAAIJ,OAAO,EAAIM,GAAK,EAAEA,IAClCF,EAAIE,GAAGD,IAAMD,EAAKE,EAAE,GAAIL,MAAM,EAIhC,OAFAE,EAAIZ,WAAaa,EAEVD,GAIHI,EAAwB,SAACC,GAE7B,IAAIC,EAAWD,EAAWjB,WACpBG,EAASc,EAAWd,OAEpBU,EAAM,GACZ,IAAK,IAAIM,KAAaD,EAAS,CAC7B,IAAIE,EAASF,EAAQC,GACrBN,EAAIT,KAAK,CACPgB,OAAQA,EACRd,GAAIc,EAAOd,GACXe,QAASlB,EAAOmB,UAAUF,EAAOb,aAAaa,EAAON,KAAKS,MAAM,QAKpE,OADAN,EAAWjB,WAAaa,EACjBI,GAKHO,EAAkB,SAAC3B,GAIvB,IAAIqB,EAAUtB,EAAyB,CAAEO,OAAQN,EAAOM,OAAQO,MAAO,EAAGe,SAAU,GAAI3B,MAAOD,EAAOC,QAStG,OAPID,EAAO6B,iBACTR,EAAQlB,WAAakB,EAAQlB,WAAW2B,OAAO,SAACC,GAAD,OAAQ/B,EAAO6B,eAAeG,KAAKD,EAAEvB,WAGtFa,EAAUP,EAAQO,GAEHF,EAAsBE,GACrBlB,YCpDH8B,EALM,SAACL,GACpB,IAAMM,EAAQN,EAAS,GAAGJ,QAAQM,OAAO,SAACK,GAAD,OAAOA,EAAEC,cAAcC,QAAQ,WAAW,IACnF,YAAiBC,IAAVJ,OAAsBI,EAAYJ,EAAM,ICIlCK,EANe,SAACjC,GAC7B,IACMkC,EAAkClC,EAAOmC,MADlB,oCAE7B,OAA2C,OAApCD,OAA2CF,EAAsE,EAA1DE,EAA+B,GAAGE,QAAQ,UAAU,KCI9GC,EAAqB,SAAC,GAE1B,IAFqD,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAE3BD,EAAKE,KAAKlC,OAASgC,EAAKG,OAAOnC,OAASiC,GAC7CD,EAAKG,OAAOxC,KAAK,IAEnB,OAAOqC,GAiCHI,EAAmB,SAACC,GAGxB,IAAIC,EAAoBnD,EAAyB,CAAEO,OAAQ2C,EAAMzB,QAAQ2B,KAAK,MAAOtC,MAAO,EAAGe,SAAU,GAAI3B,MAAO,oBACpHiD,EAAoBpC,EAAQoC,GAE5B,IAEIE,EAFcjC,EAAsB+B,GAEZ/C,WAAWV,IAAI,SAAC4D,GAAD,OApCrB,SAAClD,GAEvB,IAMImD,EAAqBnD,EAAWqB,QAAQ/B,IAAI,SAAC8D,GAAD,OAA8BA,EALtD7B,MAAM,oBAAoBI,OAAO,SAACc,GAAD,MAAU,WAAWZ,KAAKY,OAKDd,OAAO,SAACyB,GAAD,OAAOA,EAAE3C,OAAO,IAazG,OADkB0C,EAAkB7D,IAAI,SAAC+D,GAAD,OARpB,SAACC,EAAIC,GACvB,IAAMC,EAAS,GAIf,OAHAA,EAAOb,KAAO,CAAEY,EAAeD,EAAI,IACnCA,EAAIG,OAAO,EAAE,GACbD,EAAOZ,OAASU,EACTE,EAGuCE,CAAYL,EAAGrD,EAAWoB,OAAOf,UAgB7BsD,CAAkBT,KAStE,OAFAD,EAAYA,EAAU3D,IAAI,SAACgE,GAAD,OAASA,EAAIhE,IAAI,SAACmD,GAAD,OAJtB,SAACA,EAAKhD,GAEzB,OADAgD,EAAKE,KAAS,CAAClD,GAAKmE,OAAOnB,EAAKE,MACzBF,EAE4CoB,CAAapB,EAAKK,EAAM1B,OAAOf,aA+CvEyD,EAxCY,SAACjE,GAE1B,IASIkE,EATEtC,EAAW5B,EAAO4B,SAClBuC,EAAenE,EAAOmE,aACtBC,EAAepE,EAAOoE,aACtBC,EAAiBrE,EAAOqE,oBAEb/B,IAAbV,EAAsC,OAAbA,GAC3B0C,MAAM,+CAMR,IAAIC,EAAe3C,EAASE,OAAO,SAAC0C,GAAD,OAAWA,EAAMjD,OAAOf,SAAW2D,IAAc,GAGpF,QAAuB7B,IAAnB+B,EAA+BA,EAAe,EAAI,CASpDH,GADAA,EAHevC,EAAgB,CAAErB,OAAQiE,EAAa/C,QAAQ2B,KAAK,MAAOlD,MADrD,qBAGSR,IAAI,SAACwD,GAAD,OAAWD,EAAiBC,KACvCxD,IAAI,SAACuB,GAAD,OAASA,EAAIyD,SAAQA,QAClChF,IAAI,SAACmD,GAAD,OAAUD,EAAmB,CAAEC,KAAMA,EAAMC,YAAauB,EAAaxD,eAGlF,CAKLsD,GADAA,EADgBlB,EAAiBuB,GACf9E,IAAI,SAACuB,GAAD,OAASA,EAAIyD,SAAQA,QAC7BhF,IAAI,SAACmD,GAAD,OAAUD,EAAmB,CAAEC,KAAMA,EAAMC,YAAauB,EAAaxD,WAEzF,OAAOsD,G,2jBCxFT,IAAMQ,EAAiB,SAACC,GAEtB,IAAM3E,EAAS,CACbM,OAAQqE,EAAgBnD,QAAQ2B,KAAK,MACrClD,MAAO,4BAEL2E,EAAsBjD,EAAgB3B,GAG1C6E,QAAQC,IAAI,uBAEZ,IAAI7B,EAAQ,YAAY5C,KAAKsE,EAAgBpD,OAAOf,QAEtC,OAAVyC,IAEFA,EAAQA,EAAM,GAEd2B,EAAsBA,EAAoBnF,IAAI,SAAAsF,GAC5C,OAAO,EAAP,GAAYA,EAAZ,CAAkB9B,MAAOA,OAU7B,IAAM+B,EAAiB,SAACD,GAAD,OAAUA,EAAKxD,OAAOf,OAAO6B,QAAQ,0BAA4B,EAAI0C,EAAKxD,OAAOf,OAAO6B,QAAQ,wBAA0B,GAG3I4C,EADQL,EAAoB9C,OAAOkD,GACfvF,IAAIyF,GAE9BL,QAAQC,IAAI,cAAcG,GAE1B,IAAIE,EAAeP,EAAoB9C,OAAO,SAAAiD,GAAI,OAAKC,EAAeD,KAEtEI,EAAcA,EAAY1F,IAAI,SAAA2F,GAC5B,OAAO,EAAP,GAAYA,EAAZ,CAAiBxF,IAAKwF,EAAI7D,OAAOf,WAGnC,IAAO6E,EAAsBC,EAAYH,GAEzCN,QAAQC,IAAI,sBAAsBO,GAGlC,IAAIE,EAAsBF,EAAoB5F,IAAI,SAAA+F,GAChD,MAAO,CACLjE,OAAQiE,EAAMjE,OACd3B,IAAK4F,EAAMjE,OACXC,QAAUgE,EAAMhE,QAAQ/B,IAAI,SAAAgG,GAC1B,IAAMC,EAAMC,EAAkBF,GAC9B,OAAOG,EAAeF,KACrBjB,OAEAhF,IAAI,SAAAoG,GACH,OAAO,EAAP,GAAYA,EAAZ,CAAgB5C,MAAOA,EAAOH,KAAM+C,EAAI/C,YAOhD,OAFA+B,QAAQC,IAAI,oBAAoBS,GAEzB,CACLO,MAAOb,EACPE,YAAaI,IAIXL,EAAa,SAACY,GAElB,IAAMvC,EAAKuC,EAAMtE,QACdM,OAAO,SAAAiE,GAAC,MAAI,OAAO/D,KAAK+D,KACxBtG,IAAI,SAAAuG,GAAC,OAAIA,EAAEtE,MAAM,KAAKI,OAAO,SAAA1B,GAAG,OAAIA,EAAIQ,OAAO,MAC/CnB,IAAI,SAAAuG,GAAC,OAAIA,EAAElE,OAAO,SAAAmE,GAAE,MAAI,WAAWjE,KAAKiE,OAAOnE,OAAO,SAAAkE,GAAC,OAAIA,EAAEpF,OAAO,IAEvE,OAAO2C,EAAE,GAAG9D,IAAI,SAACyG,EAAEhG,GACjB,MAAO,CAAEiG,UAAWD,EAAGE,MAAO7C,EAAE,GAAGrD,GAAM+C,MAAO6C,EAAM7C,MAAOoD,UAAWP,EAAMvE,OAAOf,WAsCnF8E,EAAc,SAAAgB,GAqBlB,OAAOC,OAAOC,QAAQF,EAAeG,OAnBpB,SAAC1F,EAAI2F,GAEpB,IAAI9G,EAAM8G,EAAK9G,IAcf,YAZe0C,IAAXvB,EAAInB,GAENmB,EAAInB,GAAO,CACT2B,OAAQ3B,EACR4B,QAAS,CAACkF,EAAKlF,UAKjBT,EAAInB,GAAK4B,QAAQjB,KAAKmG,EAAKlF,SAGtBT,GAG4C,KAAKtB,IAAI,SAAAuB,GAAG,OAAIA,EAAI,MAMrE2E,EAAoB,SAACH,GAMzB,IAAMmB,GAHNnB,EAAQA,EAAM1D,OAAO,SAAA2B,GAAG,OAAIA,EAAIf,QAAQ,KAAK,IAAI9B,OAAO,KAGpBgG,UAAU,SAAAnD,GAAG,MAAI,YAAYzB,KAAKyB,KAQtE,MAAQ,CACNoD,QANcrB,EAAOmB,EAAsB,GAAIjF,MAAM,WAAWI,OAAO,SAAAgF,GAAG,OAAIA,EAAIlG,OAAO,IAOzFmG,KAJSvB,EAAMwB,MAAOL,EAAsB,KAU1Cf,EAAiB,SAAC,GAAuB,IAArBmB,EAAoB,EAApBA,KAAMF,EAAc,EAAdA,QAmB9B,OAjBqBE,EAAKjF,OAAO,SAAA2B,GAAG,MAAI,QAAQzB,KAAKyB,KAAMhE,IAAI,SAAAgE,GAAG,OAAIA,EAAI/B,MAAM,WAAWI,OAAO,SAAAc,GAAI,OAAIA,EAAKhC,OAAO,MAiBlGnB,IAfc,SAACsD,GAEjC,IAAMkE,EAASlE,EAAO,GAEtB,OAAOA,EAAOiE,MAAM,GAAIvH,IAAI,SAACyH,EAAIhH,GAC/B,MAAO,CACL+G,OAAQA,EACRE,OAAQN,EAAQ3G,GAChB4C,KAAM,CAACmE,EAAOJ,EAAQ3G,IACtBkG,MAAOc,OAMsCzC,QAKtC2C,EAtGe,SAACC,GAG7B,IAAMrH,EAAS,CACbM,OAAQ+G,EAAsBC,QAAQ9F,QAAQ2B,KAAK,MACnDlD,MAAQoH,EAAsBhD,eAAiB,EAAM,yBAA2B,kBAE5EkD,EAA2B5F,EAAgB3B,GAI3CwH,EAAYD,EAAyBzF,OAAO,SAAAiD,GAAI,OAAIA,EAAKxD,OAAOf,OAAO6B,QAAQ,iCAAmC,IAClHoF,EAAaF,EAAyBzF,OAAO,SAAAiD,GAAI,OAAoE,IAAhEA,EAAKxD,OAAOf,OAAO6B,QAAQ,kCAEtFwC,QAAQC,IAAI,YAAa0C,GACzB3C,QAAQC,IAAI,aAAa2C,GAEzB,IAAMC,EAAoBF,EAAU/H,IAAIiF,GAKxC,OAHAG,QAAQC,IAAI,mBAAoB4C,GAGzB,CACL5B,MAAO4B,EAAiBjI,IAAI,SAAAkI,GAAC,OAAIA,EAAE7B,MAAMrB,SAAQA,OACjDU,YAAaG,EAAaoC,EAAiBjI,IAAI,SAAAkI,GAAC,OAAIA,EAAExC,cAAaV,UCzHjEmD,EAAyB,SAAC7G,EAAI2F,GAElC,IAAI9G,EAAM8G,EAAK5D,KAAKkE,MAAM,EAAE,GAAG7D,KAAK,IAuBpC,YArBeb,IAAXvB,EAAInB,GAENmB,EAAInB,GAAO,CACTkD,KAAM4D,EAAK5D,KAAKkE,MAAM,EAAE,GACxBjE,OAAQ,CACN,CACEE,MAAOyD,EAAK5D,KAAK,GACjBC,OAAQ2D,EAAK3D,UAOnBhC,EAAInB,GAAKmD,OAAOxC,KAAK,CACnB0C,MAAOyD,EAAK5D,KAAK,GACjBC,OAAQ2D,EAAK3D,SAKVhC,GAsBM8G,EAhBO,SAAC,GAA0B,IAAxB3D,EAAuB,EAAvBA,MAAO4D,EAAgB,EAAhBA,UAE1BC,EAA2BxB,OAAOxD,OAAQmB,EAAMuC,OAAOmB,EAAuB,KAUlF,OAJAG,EAA0BD,EAAUrI,IAAI,SAACuI,EAAS9H,GAChD,OAAO6H,EAAwBtI,IAAI,SAACmD,GAAD,OALC,SAACqF,EAAuBD,EAASE,GACrE,OAAOD,EAAuBlF,OAAOtD,IAAI,SAAC0I,GAAmB,MAAO,CAAErF,KAAMmF,EAAuBnF,KAAKiB,OAAOiE,GAAU/E,MAAOkF,EAAYlF,MAAQmD,MAAO+B,EAAYpF,OAAOmF,MAIjIE,CAA8BxF,EAAKoF,EAAS9H,OACxFuE,QC7CC4D,EAAqB,SAACrH,GAE1B,IAIMD,EAAQC,EAAIyF,OAJV,SAAC1F,EAAI2F,GAEX,OADA3F,EAAI2F,GAAQ,EACL3F,GAEkB,IAE3B,OAAOwF,OAAO+B,oBAAoBvH,IAI9BwH,EAAa,SAACC,GAClB,OAAOA,EAAE9F,QAAQ,WAAW,IAAIA,QAAQ,WAAW,KAI/C+F,EAAc,SAAC5C,GAEnB,IAAM6C,EAAU7C,EAAIY,OAAOkC,EAAM,IACjC,OAAOpC,OAAOC,QAAQkC,GAASjJ,IAAI,SAAAmJ,GAAC,OAAIA,EAAE,MAMtCD,EAAQ,SAAC5H,EAAI2F,GAEjB,IAAI9G,EAAM8G,EAAKmC,KAAK1F,KAAK,KAuBzB,YArBeb,IAAXvB,EAAInB,GAENmB,EAAInB,GAAO,CACTiJ,KAAMnC,EAAKmC,KACX9F,OAAQ,CACN,CACE+F,OAAQpC,EAAKoC,OACb/F,OAAQ2D,EAAKN,SAOnBrF,EAAInB,GAAKmD,OAAOxC,KAAK,CACnBuI,OAAQpC,EAAKoC,OACb/F,OAAQ2D,EAAKN,QAKVrF,GC3CHgI,EAAwB,SAAChE,GAG7B,IAAMxD,EAASwD,EAAKxD,OAAOf,OAgB3B,OAAQuE,EAAKvD,QAAQ/B,IAdH,SAACgE,GAGjB,IAAMuF,EAAWT,EAAW9E,GAAK/B,MAAM,WACjC2E,EAAakC,EAAWS,EAAS,IAEvC,MAAO,CACLzH,OAAQA,EACR8E,UAAYA,EACZD,MAA2B,IAApB4C,EAASpI,QAAgB,EAAIoI,EAAShC,MAAM,GAAIvH,IAAI,SAAA+I,GAAC,OAAID,EAAWC,KAAIrF,KAAK,UAqD3E8F,EAzCoB,SAACC,GAWlC,IAAMlJ,EAAS,CACbM,OAAQ4I,EAAwB1H,QAAQ2B,KAAK,MAC7ClD,MAAO,gBAELkJ,EAA6BxH,EAAgB3B,GAsBjD,OAdAmJ,GAHAA,EAA6BA,EAA2BrH,OAAO,SAAAiD,GAAI,MAAwC,MAApCA,EAAKxD,OAAOf,OAAOiB,UAAU,EAAE,MAG9ChC,IAAI,SAAAsF,GAQ1D,OAPAA,EAAKvD,QAAUuD,EAAKvD,QAAQM,OAAO,SAAAK,GAAC,OAAIA,EAAEvB,OAAO,IAErB,IAAxBmE,EAAKvD,QAAQZ,SAEfmE,EAAKvD,QAAU,CAAEuD,EAAKxD,OAAOf,QAC7BuE,EAAKxD,OAAOf,OAAU+H,EAAYxD,EAAKxD,OAAOf,OAAOkC,QAAQ,YAAY,MAEpEqC,KAIqCtF,IAAKsJ,GAEjCtE,QCNL2E,EAtDE,SAACC,GAEhB,IAAMC,EAAS,GAIfA,EAAO1H,SAAYD,EAAgB,CAAErB,OAAQ+I,EAAmBpJ,MAD1C,8BACgE4B,eAAgB,oBACtGyH,EAAOpH,MAAYD,EAAaqH,EAAO1H,UACvC0H,EAAOjF,eAAiB9B,EAAsB8G,GAG9C,IAAMvB,EAAY,CAAC,WAAW,OAAO,WAAW,WAC1C1D,EAAe,CAAC,UAAU,UAAU,WAAWL,OAAO+D,GAExDvG,EAAS,gBAET2C,EAAQD,EACV,CAAErC,SAAU0H,EAAO1H,SAAUuC,aAAc5C,EAAO6C,aAAcA,EAAcC,eAAgBiF,EAAOjF,iBAGvGiF,EAAO/E,aAAe,CACpBhD,OAAQA,EACR2C,MAAO2D,EAAc,CAAE3D,MAAOA,EAAO4D,UAAWA,KAKlDvG,EAAS,6BAET2C,EAAQD,EACN,CAAErC,SAAU0H,EAAO1H,SAAUuC,aAAc5C,EAAO6C,aAAcA,EAAcC,eAAgBiF,EAAOjF,iBAGvGiF,EAAOC,yBAA2B,CAChChI,OAAQA,EACR2C,MAAO2D,EAAc,CAAE3D,MAAOA,EAAO4D,UAAWA,KAIlDwB,EAAOE,OAASnB,EAAoBiB,EAAO/E,aAAaL,MAAMO,OAAOhF,IAAI,SAAC0C,GAAD,OAAOA,EAAEc,SAIlFqG,EAAOG,oBAAsBR,EAA2BK,EAAO1H,SAAS8H,KAAK,SAAA3E,GAAI,MAAyB,0BAArBA,EAAKxD,OAAOf,UAGjG,IACE8I,EAAOK,eAAiBvC,EAAsB,CAAEE,QAASgC,EAAO1H,SAAS8H,KAAK,SAAA3E,GAAI,MAAyB,oBAArBA,EAAKxD,OAAOf,SAA6B6D,eAAgBiF,EAAOjF,iBACtJ,MAAMuE,GACN/D,QAAQC,IAAI,UAAW8D,EAAEgB,SAE3B,OAAON,G,SCtBMO,EAnCI,SAAC,GAAgE,IAA5DC,EAA2D,EAA3DA,eAAgBC,EAA2C,EAA3CA,eAAgBC,EAA2B,EAA3BA,qBAEtD,IAAKD,EACH,MAAO,GAWT,OAEE,kBAACE,EAAA,EAAD,CAAOC,MAAM,EAAKC,OALC,kBAAMH,MAMvB,kBAACC,EAAA,EAAMG,OAAP,KACE,kBAACH,EAAA,EAAMI,MAAP,6BAEF,kBAACJ,EAAA,EAAMK,KAAP,wCACA,kBAACL,EAAA,EAAMM,OAAP,KACE,kBAAC5K,EAAA,EAAD,CAAQ6K,QAAS,QAAjB,IAA2B,2BAAO/J,GAAG,cAAcgK,KAAK,OAAOvL,MAhBlD,CACjBwL,QAAS,QAe6EC,SAAWb,IAC3F,2BAAOc,QAAQ,cAAcC,UAAU,qBAAsB3L,MAAO,CAAEJ,OAAQ,QAA9E,c,0BCrBV,SAASgM,EAAQC,EAAOC,GACtB,OAAQA,EAAOP,MACf,IAAK,OACH,MAAO,CAAEC,QAAS,QAASR,MAAM,GACnC,IAAK,OACH,MAAO,CAAEQ,QAAS,OAAQR,MAAM,GAClC,QACE,MAAM,IAAIe,OAId,IAAMC,EAAmB,WAAS,MAAO,CAAER,QAAS,QAASR,MAAM,IAgGpDiB,EA7FM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBAAuB,EAEzBC,qBAAWR,EAAQI,GAFM,mBAE/CK,EAF+C,KAErCC,EAFqC,KAKtDC,oBAAU,WACRD,EAAS,CAAEf,KAAM,UACjB,IAGF,IAAMiB,EAAmB,SAACC,GAAD,OAAYP,EAAQQ,gBAAgBvJ,QAAQsJ,IAAS,GAGxEE,EAAuB,SAACjD,GAC5B,IAAMkD,EAAgBlD,EAAEmD,OAAO3F,MAEzB4F,EADaN,EAAiBI,GACAV,EAAQQ,gBAAgB9J,OAAO,SAAApC,GAAG,OAAIA,IAAQoM,IAAkBV,EAAQQ,gBAAgB7H,OAAO+H,GACnIT,EAAiB,CACf7L,MAAO4L,EAAQ5L,MACfoM,gBAAiBI,KA6CfC,EAAQV,EAAW,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAS1C,OACE,yBAAKV,UAAW,mBACd,4BAAQ3L,MApBQ,CAElBD,OAAQ,OACRiN,aAAc,MACd/M,gBAAiB,QACjBgN,QAAS,MACTrN,OAAQ,OAcsBgB,QAtCN,WACpByL,EAASrB,KACXsB,EAAS,CAAEf,KAAM,SAEjBe,EAAS,CAAEf,KAAM,WAkCyCW,EAAQ5L,MAAOyM,GACzE,yBAAK/M,MA9BS,CAEhBE,SAAU,WACVD,gBAAiB,QACjBgN,QAAS,GACTlN,OAAQ,kBACRmN,UAAW,WAwBcvB,UAAW,UAChC,4BAAQ3L,MAXe,CAC3BD,OAAQ,kBACRE,gBAAiB,QACjBkN,aAAc,QAQ2BvM,QApDnB,WAEtBuL,EAAiB,CACf7L,MAAO4L,EAAQ5L,MACfoM,gBANyBR,EAAQQ,kBAAoBR,EAAQrI,OAMzB,GAAKqI,EAAQrI,WAgD/C,mBAEEqI,EAAQrI,OAAOtD,IAAI,SAACyH,EAAKhH,GACvB,IAAMoM,EAAUZ,EAAiBxE,GACjC,OACE,yBAAKtH,IAAKM,EAAMgH,GAAK,2BAAOuD,KAAK,WAAW6B,QAASA,EAAS3B,SAAUkB,EAAuBzF,MAAOc,IAASA,QC3EvHqF,EAAc,SAACC,GAGnB,IAAIC,EAAMC,EAAUC,EAChBC,EA3B2B,SAACJ,GAEhC,IAAInL,EAAQoL,EAAKI,EAEjBxL,EAAUmL,EAAKnL,QACfoL,EAAUD,EAAKC,KACfI,EAAYL,EAAKK,WAAa,IAE9B,IAAIrM,EAAS,GAYb,OAVAA,GAAUa,EAAQ8B,KAAK0J,GAAa,KAGpCrM,GAAUiM,EAAKhN,IAAI,SAACmD,GAClB,OAAKkK,MAAMC,QAAQnK,GAGZA,EAAKO,KAAK0J,KAChB1J,KAAK,MASE6J,CAAyBR,GACvB,OAARI,IAGJF,EAAWF,EAAKE,UAAY,aAEvBE,EAAInK,MAAM,sBACbmK,EAAM,+BAAiCA,GAEzCH,EAAOQ,UAAUL,IAEjBD,EAAOO,SAASC,cAAc,MACzBC,aAAa,OAAQX,GAC1BE,EAAKS,aAAa,WAAYV,GAC9BC,EAAKU,UA4CQC,EApCW,SAAC,GAAuB,IAArBtN,EAAoB,EAApBA,OAAoB,EAAZuN,MAEnC,GAAe,OAAXvN,EACF,MAAO,GAGT,IAAMyM,EAAOzM,EAAOyM,KACdpL,EAAUrB,EAAOqB,QAgBvB,OACE,kBAAC1B,EAAA,EAAD,CACET,MATU,CACZJ,OAAQ,OACRyO,MAAO,QACPxO,SAAU,MACVoN,QAAS,GAMP3B,QAAS,OACT1K,QAlBgB,WAClByM,EAAY,CAAEE,KAAMA,EAAMpL,QAASA,MAcnC,oB,4NCnEJ,IAmFemM,EAnFK,SAAC,GAAwB,IAAtBnM,EAAqB,EAArBA,QAAS6C,EAAY,EAAZA,MAAY,EAEFuJ,mBAAS,IAFP,mBAEnCC,EAFmC,KAErBC,EAFqB,KAKpCC,EAAY,CAAEzB,QAAS,GASvBd,EAAmB,SAACvJ,GAExB,IAAM+L,E,qVAAY,IAAQH,GAC1BG,EAAa/L,EAAOtC,OAASsC,EAC7B6L,EAAgBE,IA0ClB,OACE,6BACE,kBAAC,EAAD,CAAmB7N,OAAW,CAAEyM,KAAMvI,EAAO7C,QAASA,EAAQ5B,IAAI,SAAAsC,GAAC,OAAIA,EAAEvC,WACzE,kBAACsO,EAAA,EAAD,CAAO5O,MA3DQ,CAAEH,SAAU,MAAMoN,QAAS,QA4DxC,+BACE,4BAEI9K,EAAQ5B,IAzCC,SAAC8B,GACpB,QAAsBe,IAAlBf,EAAOwB,OAAsB,CAE/B,IAAM6I,OAAiDtJ,IAA/BoL,EAAanM,EAAO/B,OAAuBkO,EAAanM,EAAO/B,OAAOoM,gBAAmBrK,EAAOwB,OAExH,OAAO,kBAAC,EAAD,CAAcqI,QAAU,CAAE5L,MAAO+B,EAAO/B,MAAOoM,gBAAiBA,EAAiB7I,OAAQxB,EAAOwB,QAAWsI,iBAAmBA,IAEvI,OAAO9J,EAAO/B,QAkCsBC,IAAI,SAAA0C,GAAC,OAAI,wBAAIvC,IAAKC,MAAUX,MAAO0O,GAAazL,OAKhF,+BACI+B,EAAMpC,OAnCI,SAAC2B,GAQnB,IANA,IAAIsK,EAEAxM,EADAO,GAAS,EAKJnB,EAAM,EAAGA,EAAMU,EAAQT,OAAOD,IACrCY,EAASF,EAAQV,GACjBoN,EAAUL,EAAanM,EAAO/B,YACK8C,IAA/BoL,EAAanM,EAAO/B,SACsC,IAAxDuO,EAAQnC,gBAAgBvJ,QAAQoB,EAAIlC,EAAOZ,UAC7CmB,GAAS,GAKf,OAAOA,IAiB2BrC,IAAI,SAAC0C,EAAEjC,GAAH,OAlEpB,SAACgE,EAAMhE,GACzB,IAAM8N,EAAa9N,EAAM,IAAM,EACzBhB,EAAQ,CAAEC,gBAAiB6O,EAAa,4BAA8B,GAAIC,MAAOD,EAAa,QAAU,IAC9G,OAAQ,wBAAIpO,IAAKC,MAAUX,MAAOA,GAASgF,EAAMzE,IAAI,SAAA0C,GAAC,OAAI,wBAAIvC,IAAKC,MAAUX,MAAO0O,GAAazL,MA+DhD+L,CAAY/L,EAAEjC,SC3CpDiO,EAnCM,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASlE,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,OAErC,GAAiB,OAAZ4E,IAAqBlE,EACxB,MAAO,GAGT,IAAMhG,EAAQkK,EAAQlK,MAGlBmK,EAAuB,CACzB,CAAE7O,MAAO,mBAAoBmB,MAAO,EAAGoC,OAAQsF,EAAqBnE,EAAMO,OAAOhF,IAAI,SAAAmD,GAAI,OAAIA,EAAKE,KAAK,OACvG,CAAEtD,MAAO,YAAamB,MAAO,EAAIoC,OAAQsF,EAAqBnE,EAAMO,OAAOhF,IAAI,SAAAmD,GAAI,OAAIA,EAAKE,KAAK,OACjG,CAAEtD,MAAO,YAAamB,MAAO,EAAGoC,OAAQsF,EAAqBnE,EAAMO,OAAOhF,IAAI,SAAAmD,GAAI,OAAIA,EAAKE,KAAK,QAGlGuL,EAAuBA,EAAqBtK,OAAQyF,EAAO/J,IAAI,SAAAwD,GAC7D,MAAO,CAAE,MAASA,MAOpB,OACE,kBAACqL,EAAA,EAAD,KACE,yBAAKpP,MAAO,CAAEqO,MAAO,SAAYa,EAAQ7M,QACzC,kBAAC,EAAD,CACE2C,MAAUA,EAAMzE,IAPM,SAACmD,GAAD,OAAUA,EAAK,GAAGE,KAAKiB,OAAOnB,EAAKnD,IAAI,SAACmD,GAAD,OAAUA,EAAKwD,WAQ5E/E,QAAYgN,M,kBCgFLE,GA7GK,SAAC,GAA2B,IAAzB7P,EAAwB,EAAxBA,YAAawL,EAAW,EAAXA,KAAW,EAEKuD,mBAAS,CAAC,oBAFf,mBAErCe,EAFqC,KAEnBC,EAFmB,KAK7C,GAAoB,OAAhB/P,IAAyBwL,EAC3B,MAAO,GAGT,IAIMwE,EAHmB,OAAhBhQ,EAAuB,GAAKA,EAAY4K,OAAO1H,SAASnC,IAAI,SAAAsF,GAAI,OAAMA,EAAKxD,OAAOf,SAKrFoB,EAAWlD,EAAY4K,OAAO1H,SAc9B+M,EAAmB,SAACpN,GAAD,OAAYiN,EAAiBnM,QAAQd,IAAS,GAIjEsK,EAAuB,SAACjD,GAG5B,IAnB8BrH,EAmBxBqN,EAAiBhG,EAAEmD,OAAO3F,MAChCqI,EAlBME,EAFwBpN,EAoBaqN,GAhBlCJ,EAAiB1M,OAAO,SAAAwF,GAAO,OAAIA,IAAY/F,IAGjDiN,EAAiBzK,OAAOxC,KAqDjC,OACE,kBAACsN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,yBAAK7P,MATO,CAChBE,SAAU,QACV4P,WAAY,KACZC,UAAW,OAOL,kBAACJ,EAAA,EAAD,KACE,2BAAOpE,KAAK,WAAY3K,QAvBV,WAEjB0O,EAAiB5N,SAAW8N,EAAe9N,OAE9C6N,EAAoBC,GAIpBD,EAAoB,OAeuC,yBAAKvP,MAAO,CAAEH,SAAU,QAAYyP,EAAiB5N,SAAW8N,EAAe9N,OAAS,aAAe,iBAG5J8N,EAAejP,IAAI,SAAA8B,GACjB,IAAM+K,EAAUqC,EAAiBpN,GAEjC,OACE,kBAACsN,EAAA,EAAD,CAAKjP,IAAKC,OACR,2BAAO4K,KAAK,WAAW6B,QAAYA,EAAU3B,SAAUkB,EAAsBzF,MAAU7E,IAAU,yBAAKrC,MAH5F,CAAEH,SAAU,QAGgGwC,QAQlI,kBAACuN,EAAA,EAAD,CAAKC,GAAI,GAELnN,EAASnC,IAAI,SAACsF,EAAK7E,GAAN,OA3DW,SAACoH,EAAQpH,GAEvC,IAAMhB,EAAQ,CACZgQ,WAAY,WACZC,WAAY,WACZpQ,SAAU,MACV2L,QAASiE,EAAkBrH,EAAQ/F,QAAW,GAAK,QAE/CC,EAAU,OAAO8F,EAAQ/F,OAAQ,UAAY+F,EAAQ9F,QAC3D,OACE,kBAACqN,EAAA,EAAD,CAAKjP,IAAKC,OACR,yBAAKX,MAAQA,EAASkQ,wBAAyB,CAAEC,OAAQ7N,MAgD5B8N,CAAyB,CAAE9N,QAASuD,EAAKvD,QAAQ2B,KAAK,MAAO5B,OAAQwD,EAAKxD,OAAOf,cCjEvG+O,GA9Ba,SAAC,GAAmC,IAAjC9F,EAAgC,EAAhCA,oBAAqBS,EAAW,EAAXA,KAClD,GAA6B,OAAxBT,IAAiCS,EACpC,MAAO,GAIT,IAAM7I,EAAU,CACd,CAAE7B,MAAO,kBAAmBmB,MAAO,EAAGoC,OAAQsF,EAAoBoB,EAAoBhK,IAAI,SAAA+P,GAAI,OAAIA,EAAKjO,WACvG,CAAE/B,MAAO,YAAamB,MAAO,GAC7B,CAAEnB,MAAO,QAASmB,MAAO,IAQ3B,OACE,kBAAC2N,EAAA,EAAD,KACE,yBAAKpP,MAAO,CAACqO,MAAO,SAApB,yBACA,kBAAC,EAAD,CACErJ,MAAUuF,EAAoBhK,IATZ,SAACgQ,GACvB,MAAO,CAACA,EAAGlO,OAAQkO,EAAGpJ,UAAWoJ,EAAGrJ,SAShC/E,QAAYA,M,6NCvBpB,IAgEMqO,GAAuC,SAACjD,EAAK5F,GAKjD,IAAM3C,EAASuI,EAAKjL,QAAQiD,OAAOhF,IAAI,SAAAyG,GAAQ,MAAO,CAAE4C,OAAQ5C,EAAEjD,MAAO4F,KAAM3C,EAAEpD,KAAMsD,MAAOF,EAAEE,SAE1FuJ,EAAelH,EAAYvE,GAK7B7C,EAAU,CACZ,CAAE7B,MAAO,cAAgBmB,MAAO,EAAGoC,OAAQsF,EAAoBnE,EAAMzE,IAAI,SAAAmD,GAAI,OAAIA,EAAKiG,KAAK,OAC3F,CAAErJ,MAAO,cAAgBmB,MAAO,EAAGoC,OAAQsF,EAAoBnE,EAAMzE,IAAI,SAAAmD,GAAI,OAAIA,EAAKiG,KAAK,QAC3F9E,OAAQ8C,EAAQpH,IAAI,SAAAwD,GAAa,MAAO,CAAE,MAASA,MAIrD,OAFA4B,QAAQC,IAAI,WAAYzD,GAGtB,yBAAKzB,IAAKC,OACR,4BAAM4M,EAAKlL,QACX,kBAAC,EAAD,CACE2C,MAAWyL,EAAalQ,IAAI,SAAAmD,GAAI,OAAIA,EAAKiG,KAAK9E,OAAOnB,EAAKG,OAAOtD,IAAI,SAAAyH,GAAG,OAAIA,EAAInE,YAChF1B,QAAUA,MAOHuO,GA/FQ,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,OAAO3F,EAAW,EAAXA,KAE/B,GAAgB,OAAX2F,IAAoB3F,QAAmB5H,IAAXuN,EAC/B,MAAO,GAIT,IAAIrG,EAASnB,EAAoBwH,EAAO/J,MAAMrG,IAAI,SAAAyG,GAAC,OAAIA,EAAEjD,SAErCuG,EAAO5I,OAAS,IAGlC4I,EAAS,CAAC,UAGZ,IAAInI,EAAU,CACZ,CAAE7B,MAAO,YAAamB,MAAO,EAAGoC,OAAQsF,EAAoBwH,EAAO/J,MAAMrG,IAAI,SAAAyG,GAAC,OAAIA,EAAEG,cACpF,CAAE7G,MAAO,YAAamB,MAAO,EAAGoC,OAAQsF,EAAoBwH,EAAO/J,MAAMrG,IAAI,SAAAyG,GAAC,OAAIA,EAAEC,eAGtF9E,EAAUA,EAAQ0C,OAAQyF,EAAO/J,IAAI,SAAAwD,GACnC,MAAO,CAAE,MAASA,MAGpB4M,EAAO/J,MAAQ+J,EAAO/J,MAAMrG,IAAI,SAAAuG,GAC9B,O,uVAAO,IAAKA,EAAZ,CAAe6C,KAAM,CAAE7C,EAAEK,UAAWL,EAAEG,WAAY2C,OAAQ9C,EAAE/C,UAG9D,IAAM6M,EAAerH,EAAYoH,EAAO/J,OAGpCiK,EAEmB,IAYpBF,EAAO/J,MAZElF,OACD,GAIP,6BACE,sFACA,kBAAC,EAAD,CACEsD,MAAW4L,EAAarQ,IAAI,SAAAmD,GAAI,OAAIA,EAAKiG,KAAK9E,OAAOnB,EAAKG,OAAOtD,IAAI,SAAAyH,GAAG,OAAIA,EAAInE,YAChF1B,QAAUA,KAOlB,OACE,kBAACiN,EAAA,EAAD,KAEIyB,EAEF,6DAEEF,EAAO1K,YAAY1F,IAAI,SAAA2F,GAAG,OAAIsK,GAAqCtK,EAAIoE,OCkBhEwG,GApEH,WAAO,IAAD,EAEwBvC,mBAAS,MAFjC,mBAER/O,EAFQ,KAEKuR,EAFL,OAGUxC,mBAAS,eAHnB,mBAGR7O,EAHQ,KAGFsR,EAHE,OAI8BzC,oBAAS,GAJvC,mBAIR1D,EAJQ,KAIQoG,EAJR,KAgChBtL,QAAQC,IAAI,gBAAiBpG,GAE7B,IAAM8K,EAAyB,OAAhB9K,EAAuBA,EAAY4K,OAAOE,OAAS,KAY5D4G,EAAYrG,EAAiC,OAAhBrL,EAEnC,OACE,yBAAKQ,MAPgB,CACrBE,SAAU,aAQR,kBAAC,EAAD,CACE0K,eA1CiB,SAAClB,GACtB,IAAMyH,EAAYzH,EAAEmD,OACduE,EAAOD,EAAUE,MAAM,GACvBC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,WACdT,EACE,CACE3P,OAAQkQ,EAAOhQ,OACdkM,SAAU2D,EAAUE,MAAM,GAAGI,KAC7BrH,OAAQF,EAASoH,EAAOhQ,WAI/BgQ,EAAOI,WAAWN,EAAK,WACvBH,GAAkB,IA4BdpG,eAAiBqG,EACjBpG,qBAAwB,kBAAMmG,GAAkB,MAElD,kBAAC,EAAD,CAAMzR,YAAgBA,EAAkBC,iBA5BnB,SAACC,GACxBsR,EAAQtR,IA2B0EA,KAAMA,IACtF,yBAAKM,MApBY,CACnBI,QAAS,EACT2P,UAAW,OAmBP,kBAAC,GAAD,CAAsB/E,KAAkB,gBAATtL,EAAiCF,YAAgBA,IAChF,kBAAC,GAAD,CAAsBwL,KAAkB,wBAATtL,EAAoC6K,oBAAwC,OAAhB/K,EAAuBA,EAAY4K,OAAOG,oBAAsB,OAC3J,kBAAC,EAAD,CAAsBS,KAAkB,iBAATtL,EAA2B4K,OAAWA,EAAW4E,QAA4B,OAAhB1P,EAAuBA,EAAY4K,OAAO/E,aAAe,OACrJ,kBAAC,EAAD,CAAsB2F,KAAkB,oBAATtL,EAA8B4K,OAAWA,EAAS4E,QAA4B,OAAhB1P,EAAuBA,EAAY4K,OAAOC,yBAA2B,OAClK,kBAAC,GAAD,CAAsBW,KAAkB,mBAATtL,EAA6BiR,OAAyB,OAAhBnR,EAAuBA,EAAY4K,OAAOK,eAAiB,UCxExIkH,IAASC,OAAO,kBAAC,GAAD,MAAS5D,SAAS6D,eAAe,W","file":"static/js/main.5f358619.chunk.js","sourcesContent":["import React from 'react'\r\nimport {  Button } from 'react-bootstrap'\r\n\r\nimport uuidv4 from 'uuid'\r\n\r\nconst Menu = ({ mplusOutput, handlePageChange, page }) => {\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n  const menuoptions = [\r\n    { page: 'wholeoutput',       label: 'Whole output' },\r\n    { page: 'modelfitinformation',  label: 'Model information' },\r\n    { page: 'modelresults',      label: 'Model results' },\r\n    { page: 'stdmodelresults',   label: 'Standardized model results' },\r\n    { page: 'residualoutput',   label: 'Residual output' }\r\n  ]\r\n\r\n  const buttonStyle = {\r\n    margin: '0.5%',\r\n    fontSize: '80%'\r\n  }\r\n\r\n  const buttonStyleWithBorder = {\r\n    margin: '0.5%',\r\n    fontSize: '80%',\r\n    border: '3px solid white'\r\n  }\r\n\r\n  const menuBarStyle = {\r\n    backgroundColor: 'black',\r\n    position: 'fixed',\r\n    width: '100%',\r\n    zIndex: 999,\r\n    top: 0\r\n  }\r\n\r\n\r\n  return(\r\n    <div style={menuBarStyle}>\r\n      {\r\n        menuoptions.map(opt => <Button style={ opt.page === page ? buttonStyleWithBorder : buttonStyle } key={uuidv4()} onClick={ () =>  handlePageChange(opt.page)  }>{ opt.label }</Button>)\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Menu","\r\n\r\n\r\n// Gets hits of given regex (location)\r\nconst extractOccurancesOfRegex = (params) => {\r\n\r\n  const regex = params.regex\r\n  let idx = 0\r\n\r\n  const occurances = []\r\n  let res = ''\r\n  while ((res = regex.exec(params.string)) !== null) {\r\n    occurances.push({ result: res[0], id: 'C'+idx, contentStart: res.index + res[0].length, start: res.index  })\r\n    idx++\r\n  }\r\n\r\n  return { occurances: occurances,\r\n    string: params.string\r\n  }\r\n}\r\n\r\n\r\nexport default extractOccurancesOfRegex","\r\n\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n\r\n\r\n// Adds the end of string to hits gotten by extractOccurencesOfRegec\r\nconst addEnds = (obj) => {\r\n\r\n\r\n  let arr = obj.occurances\r\n  arr[arr.length-1].end = obj.string.length\r\n\r\n  for (let i = (arr.length-2); i >= 0;i--) {\r\n    arr[i].end = arr[(i+1)].start-1\r\n  }\r\n  obj.occurances = arr\r\n\r\n  return obj\r\n}\r\n\r\n// Gets strings between headers (extracted through extractOccurencesOfRegec)\r\nconst extractChapterContent = (headersObj) => {\r\n\r\n  let headers =  headersObj.occurances\r\n  const string = headersObj.string\r\n\r\n  const arr = []\r\n  for (let headerIdx in headers) {\r\n    let header = headers[headerIdx]\r\n    arr.push({\r\n      header: header,\r\n      id: header.id,\r\n      content: string.substring(header.contentStart,header.end).split('\\n')\r\n    })\r\n  }\r\n\r\n  headersObj.occurances = arr\r\n  return(headersObj)\r\n}\r\n\r\n// Brings them all together\r\n\r\nconst extractChapters = (params) => {\r\n\r\n\r\n\r\n  let headers = extractOccurancesOfRegex({ string: params.string, start: 0, chapters: [], regex: params.regex })\r\n\r\n  if (params.filteringRegex) {\r\n    headers.occurances = headers.occurances.filter((h) => !params.filteringRegex.test(h.result))\r\n  }\r\n\r\n  headers = addEnds(headers)\r\n\r\n  let chapters = extractChapterContent(headers)\r\n  return chapters.occurances\r\n\r\n}\r\n\r\nexport { extractChapters, extractChapterContent, addEnds }","const extractTitle = (chapters) => {\r\n  const title = chapters[0].content.filter((c) => c.toLowerCase().indexOf('title:')>-1)\r\n  return title === undefined ? undefined : title[0]\r\n}\r\n\r\nexport default extractTitle","const extractNumberOfGroups = (string) => {\r\n  const RegExpNumberOfGroups = /(Number of groups[ ]+[0-9]{1,2})/\r\n  const StringContainingNumberOfGroups =  string.match(RegExpNumberOfGroups)\r\n  return StringContainingNumberOfGroups ===  null ? undefined : StringContainingNumberOfGroups[0].replace(/[^0-9]/g,'') * 1\r\n}\r\n\r\nexport default extractNumberOfGroups","\r\nimport { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n// Ensure that each cell has as many keys as there are headers in the table\r\n\r\nconst ensureCellKeyCount = ({ cell, headercount }) => {\r\n\r\n  while (cell.keys.length + cell.values.length < headercount) {\r\n    cell.values.push('')\r\n  }\r\n  return cell\r\n}\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells = rowString.split(/([A-Z_\\-0-9.$]+)/).filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Group specific actions\r\n  let grouptableheaders = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  grouptableheaders = addEnds(grouptableheaders)\r\n\r\n  let grouptables = extractChapterContent(grouptableheaders)\r\n\r\n  let tablerows = grouptables.occurances.map((occ) => TableRowsToObject(occ))\r\n\r\n  // Add group as key to cells\r\n  const addKeyToCell = (cell,key) => {\r\n    cell.keys  =  [key].concat(cell.keys)\r\n    return cell\r\n  }\r\n  tablerows = tablerows.map((row) => row.map((cell) => addKeyToCell(cell,group.header.result)))\r\n\r\n  return(tablerows)\r\n}\r\n\r\n\r\n\r\nconst extractResultTable = (params) => {\r\n\r\n  const chapters = params.chapters\r\n  const headerToFind = params.headerToFind\r\n  const tableheaders = params.tableheaders\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (chapters === undefined | chapters === null) {\r\n    alert('No output loaded to get model results from!')\r\n  }\r\n\r\n  let cells\r\n\r\n  // Find the chapter that has the \"headerToFind\" (eg. MODEL RESULTS)\r\n  let modelResults = chapters.filter((chapt) => chapt.header.result === headerToFind)[0]\r\n\r\n  // If output has groups:\r\n  if (NumberOfGroups !== undefined & NumberOfGroups>1)  {\r\n\r\n\r\n    // Find group specific parts of the output\r\n    const RegExpGroup =  /Group [A-Z_]+$/gm\r\n    const groups = extractChapters({ string: modelResults.content.join('\\n'), regex: RegExpGroup })\r\n\r\n    const grouptablerows = groups.map((group) => ExtractTableRows(group))\r\n    cells = grouptablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n\r\n  // If output does not have gtroups\r\n  } else {\r\n\r\n    // This function works as it similar to number of groups = 1\r\n    let tablerows = ExtractTableRows(modelResults)\r\n    cells = tablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n  }\r\n  return(cells)\r\n\r\n}\r\n\r\nexport default extractResultTable","import { extractChapters } from './extractChapters'\r\n\r\n/*\r\nThe structure of residual output is as follows:\r\n   ESTIMATED MODEL AND RESIDUALS (OBSERVED - ESTIMATED) FOR groupname\r\n         Model Estimated Means/Intercepts/Thresholds\r\n         Residuals for Means/Intercepts/Thresholds\r\n         Model Estimated Covariances/Correlations/Residual Correlations\r\n      \t Model Estimated Correlations/Residual Correlations\r\n         Residuals for Covariances/Correlations/Residual Correlations\r\n         Residuals for Correlations/Residual Correlations\r\n\r\n   UNIVARIATE PROPORTIONS FOR CATEGORICAL VARIABLES FOR groupname\r\n*/\r\n\r\nconst parseESTIMATED = (ESTIMATED_GROUP) => {\r\n\r\n  const params = {\r\n    string: ESTIMATED_GROUP.content.join('\\n'),\r\n    regex: /[A-Z][a-zA-Z/ ]{1,}s$/gm\r\n  }\r\n  let chaptersOfEstimated = extractChapters(params)\r\n\r\n\r\n  console.log('chaptersOfEstimated')\r\n\r\n  let group = /FOR (.+$)/.exec(ESTIMATED_GROUP.header.result) // Get group name from header text\r\n\r\n  if (group !== null) { // If no group is found, assume the analysis was not grouped\r\n\r\n    group = group[1] // Cant be done earlier -> would result to error with undefined\r\n    // Add group to each chapter\r\n    chaptersOfEstimated = chaptersOfEstimated.map(chap => {\r\n      return { ...chap, group: group }\r\n    })\r\n  }\r\n\r\n  //console.log('chaptersOfEstimated',chaptersOfEstimated)\r\n\r\n  // Separate based on nature of table\r\n  //  1. Means: Model Estimated Means.. & Residuals for means\r\n  //  2. Covariances: others..\r\n\r\n  const chapterDivider = (chap) => chap.header.result.indexOf('Model Estimated Means') > -1 | chap.header.result.indexOf('Residuals for Means') > -1\r\n\r\n  const means = chaptersOfEstimated.filter(chapterDivider)\r\n  const parsedMeans = means.map(parseMeans)\r\n\r\n  console.log('parsedMeans',parsedMeans)\r\n\r\n  let covariances =  chaptersOfEstimated.filter(chap => !chapterDivider(chap))\r\n\r\n  covariances = covariances.map(cov => {\r\n    return { ...cov, key: cov.header.result }  // Add key for gatherByKey\r\n  })\r\n  // this gathers covarience/correlation tables that are spread into several tables in the output\r\n  const  gatheredCovariances = gatherByKey(covariances)\r\n\r\n  console.log('gatheredCovariances',gatheredCovariances)\r\n\r\n\r\n  let parsedCovariances =   gatheredCovariances.map(table => {\r\n    return {\r\n      header: table.header,\r\n      key: table.header, // Prepare for gatherByKey\r\n      content:  table.content.map(subtable => {\r\n        const str = getTableStructure(subtable)\r\n        return getTableValues(str)\r\n      }).flat()\r\n      // add group\r\n        .map(obs => {\r\n          return { ...obs,group: group, keys: obs.keys }\r\n        })\r\n    }\r\n  })\r\n\r\n  console.log('parsedCovariances',parsedCovariances)\r\n\r\n  return {\r\n    means: parsedMeans,\r\n    covariances: parsedCovariances\r\n  }\r\n}\r\n\r\nconst parseMeans = (means) => {\r\n\r\n  const r =  means.content\r\n    .filter(t => /[^ ]/.test(t))\r\n    .map(m => m.split(' ').filter(res => res.length>1))\r\n    .map(m => m.filter(mo => /[0-9A-Z]/.test(mo) )).filter(m => m.length>0)\r\n\r\n  return r[0].map((o,idx) => {\r\n    return { parameter: o, value: r[1][idx], group: means.group, statistic: means.header.result }\r\n  })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst extractResidualOutput = (ResidualOutputChapter) => {\r\n\r\n\r\n  const params = {\r\n    string: ResidualOutputChapter.chapter.content.join('\\n'),\r\n    regex:  ResidualOutputChapter.NumberOfGroups > 1 ?   /^[A-Z ()-]{2,}FOR.+$/gm : /^[A-Z ()-]+$/gm\r\n  }\r\n  const chaptersOfResidualOutput = extractChapters(params)\r\n\r\n\r\n  // Divide into two for ease\r\n  const ESTIMATED = chaptersOfResidualOutput.filter(chap => chap.header.result.indexOf('ESTIMATED MODEL AND RESIDUAL') > -1)\r\n  const UNIVARIATE = chaptersOfResidualOutput.filter(chap => chap.header.result.indexOf('ESTIMATED MODEL AND RESIDUAL') === -1)\r\n\r\n  console.log('ESTIMATED', ESTIMATED)\r\n  console.log('UNIVARIATE',UNIVARIATE)\r\n\r\n  const PARSED_ESTIMATED  = ESTIMATED.map(parseESTIMATED)\r\n\r\n  console.log('PARSED_ESTIMATED', PARSED_ESTIMATED)\r\n\r\n\r\n  return {\r\n    means: PARSED_ESTIMATED.map(E => E.means.flat()).flat(),\r\n    covariances: gatherByKey( PARSED_ESTIMATED.map(E => E.covariances).flat() )\r\n  }\r\n}\r\n\r\n\r\nconst gatherByKey = arrayOfObjects => {\r\n\r\n  const gatherer = (obj,elem) => {\r\n\r\n    let key = elem.key // Defines the key to distinguish tables\r\n\r\n    if (obj[key]===undefined) {\r\n\r\n      obj[key] = {\r\n        header: key,\r\n        content: [elem.content]\r\n      }\r\n\r\n    } else {\r\n\r\n      obj[key].content.push(elem.content)\r\n    }\r\n\r\n    return obj\r\n  }\r\n\r\n  return Object.entries(arrayOfObjects.reduce(gatherer,{})).map(arr => arr[1])\r\n}\r\n\r\n\r\n\r\n\r\nconst getTableStructure = (table) => {\r\n\r\n  // Remove empty\r\n  table = table.filter(row => row.replace('\\r','').length>0) // Contains new lines\r\n\r\n  // Finds the index of the row that separates header row from table body\r\n  const indexOfTableSeparator = table.findIndex(row => /^[_ \\r]*$/.test(row))\r\n\r\n  // get columns\r\n  const columns = table[(indexOfTableSeparator-1)].split(/[ ]{1,}/).filter(col => col.length>1)\r\n\r\n  // table body\r\n  let body = table.slice((indexOfTableSeparator+1),)\r\n\r\n  return ({\r\n    columns: columns,\r\n    body: body\r\n  })\r\n\r\n}\r\n\r\n\r\nconst getTableValues = ({ body, columns }) => {\r\n\r\n  const rowsSplitted = body.filter(row => /[0-9]/.test(row)).map(row => row.split(/[ ]{1,}/).filter(cell => cell.length>0))\r\n\r\n  const assignColumnNamesToValues = (values) => {\r\n\r\n    const rowKey = values[0]\r\n\r\n    return values.slice(1,).map((val,idx) => {\r\n      return {\r\n        rowKey: rowKey,\r\n        colKey: columns[idx],\r\n        keys: [rowKey,columns[idx]],\r\n        value: val\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  return rowsSplitted.map(assignColumnNamesToValues).flat()\r\n\r\n}\r\n\r\n\r\nexport default extractResidualOutput","\r\n\r\n\r\n\r\nconst cellsToGroupComparison = (obj,elem) => {\r\n\r\n  let key = elem.keys.slice(1,3).join('') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      keys: elem.keys.slice(1,3),\r\n      values: [\r\n        {\r\n          group: elem.keys[0],\r\n          values: elem.values\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      group: elem.keys[0],\r\n      values: elem.values\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nconst columnsToRows = ({ cells, variables }) => {\r\n\r\n  let cellsForGroupComparison =  Object.values( cells.reduce(cellsToGroupComparison,{}) )\r\n\r\n  const extractVariableValuesPerGroup = (cellForGroupComparison,variable,variableIndex) => {\r\n    return cellForGroupComparison.values.map((groupvalues) =>  { return({ keys: cellForGroupComparison.keys.concat(variable),group: groupvalues.group,  value: groupvalues.values[variableIndex] }) } )\r\n  }\r\n\r\n  cellsForGroupComparison = variables.map((variable,idx) => {\r\n    return cellsForGroupComparison.map((cell) => extractVariableValuesPerGroup(cell,variable,idx))\r\n  }).flat()\r\n\r\n  return cellsForGroupComparison//.flat()\r\n}\r\n\r\n\r\nexport default columnsToRows\r\n","const getUniqueFromArray = (arr) => {\r\n\r\n  let f = (obj,elem) => {\r\n    obj[elem] = 1\r\n    return obj\r\n  }\r\n  const obj =   arr.reduce(f,{})\r\n\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\n\r\nconst trimString = (s) => {\r\n  return s.replace(/^[ ]{1,}/,'').replace(/[ ]{1,}$/,'')\r\n}\r\n\r\n\r\nconst rowToColumn = (obs) => {\r\n\r\n  const pivoted = obs.reduce(pivot,{})\r\n  return Object.entries(pivoted).map(e => e[1])\r\n\r\n\r\n}\r\n\r\n\r\nconst pivot = (obj,elem) => {\r\n\r\n  let key = elem.rows.join('_') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      rows: elem.rows,\r\n      values: [\r\n        {\r\n          column: elem.column,\r\n          values: elem.value\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      column: elem.column,\r\n      values: elem.value\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nexport { getUniqueFromArray, trimString, rowToColumn }","\r\n\r\nimport { extractChapters } from './extractChapters'\r\nimport { trimString } from './utils'\r\n\r\n\r\n\r\n// this handles (extracst numbers and titles) single chapter in model fit information\r\nconst handleModelFitChapter = (chap) => {\r\n\r\n\r\n  const header = chap.header.result\r\n\r\n  const handleRow = (row) => {\r\n    // extract number and name of statistic\r\n    // by splitting with two or more spaces\r\n    const splitted = trimString(row).split(/[ ]{2,}/)\r\n    const statistic =  trimString(splitted[0])\r\n\r\n    return({\r\n      header: header,\r\n      statistic:  statistic,\r\n      value: splitted.length === 1 ? -1 : splitted.slice(1,).map(s => trimString(s)).join(', ')//splittetrimString(splitted[1])\r\n    })\r\n\r\n  }\r\n\r\n  return  chap.content.map(handleRow)\r\n\r\n}\r\n\r\n\r\n// modelInformationChapter = temp1.parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION')\r\n\r\nconst extractModelFitInformation = (modelInformationChapter) => {\r\n\r\n\r\n\r\n  // The model fit information is structured as follows:\r\n  // HEADER ROW\r\n  //      NAME_OF_STATISTIC       VALUE_OF_STATISTIC\r\n  // with exception of the first statistic 'Number of free parameters'\r\n\r\n\r\n  // First get chapters of model fit information based on header rows\r\n  const params = {\r\n    string: modelInformationChapter.content.join('\\n'),\r\n    regex: /^[A-Z*].+$/gm\r\n  }\r\n  let chaptersOfModelInformation = extractChapters(params)\r\n\r\n  // MANIPULATIONS\r\n\r\n  // 1. Remove useless chapter starting with *\r\n  chaptersOfModelInformation = chaptersOfModelInformation.filter(chap => chap.header.result.substring(0,1)!=='*')\r\n\r\n  // 2. Handle exception of first statistic and clean empty objects from content array\r\n  chaptersOfModelInformation = chaptersOfModelInformation.map(chap =>  {\r\n    chap.content = chap.content.filter(c => c.length>1)\r\n\r\n    if (chap.content.length === 0) {\r\n\r\n      chap.content = [ chap.header.result ] // if empty, replace w/ header\r\n      chap.header.result =  trimString( chap.header.result.replace(/[0-9]{1,}/,'') )//  removing any numbers from header (for exception Number of free parameters') // \r\n    }\r\n    return chap\r\n  })\r\n\r\n  // Get statistics\r\n  const statistics = chaptersOfModelInformation.map( handleModelFitChapter )\r\n\r\n  return statistics.flat()\r\n\r\n}\r\n\r\nexport default extractModelFitInformation\r\n","\r\nimport { extractChapters } from './extractChapters'\r\nimport extractTitle    from './extractTitle'\r\nimport extractNumberOfGroups from './extractNumberOfGroups'\r\nimport extractResultTable from './extractResultTable'\r\nimport extractResidualOutput from './extractResidualOutput'\r\nimport columnsToRows from './columnsToRows'\r\nimport extractModelFitInformation from './extractModelFitInformation'\r\n\r\nimport { getUniqueFromArray } from './utils'\r\n\r\nconst parseOut = (mplusoutputstring) => {\r\n\r\n  const parsed = {}\r\n\r\n  // Extract main chapters\r\n  const RegExpChapter = /(^[A-Z][A-Z 0-9-]+[A-Z]$)/gm\r\n  parsed.chapters =  extractChapters({ string: mplusoutputstring, regex: RegExpChapter, filteringRegex: / (BY|WITH|ON)$/m  })\r\n  parsed.title    =  extractTitle(parsed.chapters)\r\n  parsed.NumberOfGroups = extractNumberOfGroups(mplusoutputstring)\r\n\r\n  // Extract model results\r\n  const variables = ['Estimate','S.E.','Est/S.E.','P-Value']\r\n  const tableheaders = ['Column1','Column2','Column3'].concat(variables)\r\n\r\n  let header = 'MODEL RESULTS'\r\n\r\n  let cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.modelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Extract standardized model results\r\n\r\n  header = 'STANDARDIZED MODEL RESULTS'\r\n\r\n  cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.standardizedModelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Get group names from model results\r\n  parsed.groups = getUniqueFromArray( parsed.modelResults.cells.flat().map((c) => c.group ) )\r\n\r\n  // extractModelFitInformation\r\n\r\n  parsed.modelFitInformation = extractModelFitInformation(parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION'))\r\n\r\n  // extractResidualOutput\r\n  try {\r\n    parsed.residualOutput = extractResidualOutput({ chapter: parsed.chapters.find(chap => chap.header.result==='RESIDUAL OUTPUT'), NumberOfGroups: parsed.NumberOfGroups })\r\n  } catch(e) {\r\n    console.log('Error: ', e.message)\r\n  }\r\n  return parsed\r\n}\r\n\r\nexport default parseOut","import React from 'react'\r\n\r\nimport {  Button, Modal } from 'react-bootstrap'\r\n\r\n\r\nconst FileLoader = (  { handleFileLoad, showFileUpload, handleShowFileChange }) => {\r\n\r\n  if (!showFileUpload) {\r\n    return('')\r\n  }\r\n\r\n  const inputStyle = {\r\n    display: 'none'\r\n  }\r\n\r\n\r\n  const handleUpload = () => handleShowFileChange()\r\n\r\n\r\n  return(\r\n\r\n    <Modal show={true}onHide={handleUpload}>\r\n      <Modal.Header>\r\n        <Modal.Title>Mplus output viewer</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>Upload an .out -file from Mplus</Modal.Body>\r\n      <Modal.Footer>\r\n        <Button primary={'true'} > <input id=\"file-upload\" type=\"file\" style={inputStyle} onChange={ handleFileLoad }></input>\r\n          <label htmlFor=\"file-upload\" className=\"custom-file-upload\"  style={{ margin: '0px' }}>Upload</label>\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default FileLoader","import React, { useReducer, useEffect } from 'react'\r\n\r\n\r\nimport { FaAngleRight,FaAngleDown } from 'react-icons/fa'\r\n\r\n\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n  case 'show':\r\n    return { display: 'block', show: true }\r\n  case 'hide':\r\n    return { display: 'none', show: false }\r\n  default:\r\n    throw new Error()\r\n  }\r\n}\r\n\r\nconst initialShowState = () =>  { return({ display: 'block', show: true } )}\r\n\r\n\r\nconst CheckboxList = ({ options, handleListChange }) => {\r\n\r\n  const [showlist, dispatch] = useReducer(reducer,initialShowState)\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'hide' })\r\n  },[])\r\n\r\n  // Shorthand for checking if option is selected\r\n  const isOptionSelected = (option) => options.selectedOptions.indexOf(option)>-1\r\n\r\n  // On check change\r\n  const handleCheckBoxChange = (e) => {\r\n    const clickedOption = e.target.value\r\n    const isSelected = isOptionSelected(clickedOption)\r\n    const updatedOptions = isSelected ? options.selectedOptions.filter(opt => opt !== clickedOption) :  options.selectedOptions.concat(clickedOption)\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: updatedOptions\r\n    })\r\n  }\r\n\r\n  const areAllSelected = () => options.selectedOptions === options.values\r\n  // Select all\r\n  const toggleSelectAll = () => {\r\n\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: areAllSelected() ? [] : options.values\r\n    })\r\n\r\n  }\r\n\r\n\r\n  // Toggle list\r\n\r\n  const toggleListDisplay = () => {\r\n    if (showlist.show) {\r\n      dispatch({ type: 'hide' })\r\n    } else {\r\n      dispatch({ type: 'show' })\r\n    }\r\n  }\r\n\r\n\r\n  const listStyle = {\r\n\r\n    position: 'absolute',\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    border: '1px solid black',\r\n    boxShadow: '1px 1px'\r\n  }\r\n\r\n  const buttonStyle = {\r\n\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    backgroundColor: 'white',\r\n    padding: '3px',\r\n    margin: '2px'\r\n  }\r\n\r\n  const angle = showlist ? <FaAngleDown/> : <FaAngleRight/>\r\n\r\n  const selectAllButtonStyle = {\r\n    border: '1px solid black',\r\n    backgroundColor: 'white',\r\n    marginBottom: '10px'\r\n  }\r\n\r\n\r\n  return(\r\n    <div className={'buttonContainer'}>\r\n      <button style={buttonStyle} onClick={toggleListDisplay}>{ options.label}{angle}</button>\r\n      <div style={listStyle} className={'hidden'}  >\r\n        <button style={selectAllButtonStyle} onClick={ toggleSelectAll }>(De-)select all</button>\r\n        {\r\n          options.values.map((val, idx) => {\r\n            const checked = isOptionSelected(val)\r\n            return(\r\n              <div key={idx + val}><input type='checkbox' checked={checked} onChange={handleCheckBoxChange}  value={val} />{ val}</div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default CheckboxList","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst convertArrayOfCellsToCSV = (args) => {\r\n\r\n  let headers,data,delimiter\r\n\r\n  headers = args.headers\r\n  data    = args.data\r\n  delimiter = args.delimiter || ';'\r\n\r\n  let result = ''\r\n\r\n  result += headers.join(delimiter) + '\\n'\r\n\r\n\r\n  result += data.map((cell) => {\r\n    if (!Array.isArray(cell)) {\r\n      return cell.join(delimiter)\r\n    }\r\n    return cell.join(delimiter)\r\n  }).join('\\n')\r\n\r\n  return result\r\n}\r\n\r\nconst downloadCSV = (args) => {\r\n\r\n\r\n  let data, filename, link\r\n  let csv = convertArrayOfCellsToCSV(args)\r\n  if (csv === null) return\r\n\r\n\r\n  filename = args.filename || 'export.csv'\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv\r\n  }\r\n  data = encodeURI(csv)\r\n\r\n  link = document.createElement('a')\r\n  link.setAttribute('href', data)\r\n  link.setAttribute('download', filename)\r\n  link.click()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DownloadCSVbutton = ({ params, float }) => {\r\n\r\n  if (params === null) {\r\n    return('')\r\n  }\r\n\r\n  const data = params.data\r\n  const headers = params.headers\r\n\r\n  const handleClick = () => {\r\n    downloadCSV({ data: data, headers: headers })\r\n\r\n\r\n  }\r\n\r\n\r\n  const style = {\r\n    margin: '0.5%',\r\n    float: 'right',\r\n    fontSize: '75%',\r\n    padding: 3\r\n  }\r\n\r\n  return(\r\n    <Button\r\n      style = { style }\r\n      primary={'true'}\r\n      onClick={ handleClick }\r\n    >\r\n      Download as CSV\r\n    </Button>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default DownloadCSVbutton","import React,{ useState } from 'react'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nimport uuidv4 from 'uuid'\r\nimport CheckboxList from './CheckboxList'\r\n\r\nimport DownloadCSVbutton from './DownloadCSVbutton'\r\n\r\n// Componente\r\n\r\n\r\nconst ResultTable = ({ headers, cells }) => {\r\n\r\n  const [tableFilters, setTableFilters] = useState({})\r\n\r\n  const tableStyle = { fontSize: '75%',padding: '1px' }\r\n  const cellStyle = { padding: 2 }\r\n\r\n  const dataToCells = (cells,idx) => {\r\n    const everyother = idx % 2 === 0\r\n    const style = { backgroundColor: everyother ? 'rgba(185, 186, 187, 0.13)' : '', color: everyother ? 'black' : '' }\r\n    return( <tr key={uuidv4()} style={style}>{ cells.map(c => <td key={uuidv4()} style={cellStyle}>{ c }</td>)}</tr>    )\r\n  }\r\n\r\n  // handle list change\r\n  const handleListChange = (filter) => {\r\n\r\n    const filterUpdate = { ...tableFilters }\r\n    filterUpdate[filter.label] = filter     // This fails if a table has two columns with identical names\r\n    setTableFilters(filterUpdate)\r\n  }\r\n\r\n\r\n\r\n  // handle headers\r\n  // if header has 'values' -attribute: create a select tag with options\r\n  // if not, plain string header\r\n  const createHeader = (header) => {\r\n    if (header.values !== undefined) {\r\n\r\n      const selectedOptions = tableFilters[header.label] !== undefined ? tableFilters[header.label].selectedOptions  : header.values\r\n\r\n      return(<CheckboxList options={ { label: header.label, selectedOptions: selectedOptions, values: header.values } } handleListChange={ handleListChange }/>)\r\n    }\r\n    return header.label\r\n  }\r\n\r\n  // apply filter set in state\r\n  // TODO: horrible\r\n  const applyFilter = (row) => {\r\n\r\n    let filters\r\n    let filter = true\r\n    let header\r\n    // loop through header and see if exists in filters\r\n    // Header is in filters, check that row value (of header index)\r\n    // is included in 'selectedOptions' attribute\r\n    for (let index=0; index<headers.length;index++) {\r\n      header = headers[index]\r\n      filters = tableFilters[header.label]\r\n      if (tableFilters[header.label] !== undefined) {\r\n        if (filters.selectedOptions.indexOf(row[header.index]) === -1) {\r\n          filter = false\r\n        }\r\n      }\r\n    }\r\n\r\n    return filter\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <DownloadCSVbutton params = { { data: cells, headers: headers.map(h => h.label ) } } />\r\n      <Table style={tableStyle}  >\r\n        <thead>\r\n          <tr>\r\n            {\r\n              headers.map(createHeader).map(c => <th key={uuidv4()} style={cellStyle}>{ c }</th>)\r\n            }\r\n          </tr>\r\n\r\n        </thead>\r\n        <tbody>\r\n          { cells.filter(applyFilter).map((c,idx) => dataToCells(c,idx)) }\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default ResultTable","import React from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport ResultTable from './ResultTable'\r\nimport { getUniqueFromArray } from '../utils/utils'\r\n\r\n\r\nconst ModelResults = ({ results, show, groups  }) => {\r\n\r\n  if ( results === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  const cells = results.cells\r\n\r\n\r\n  let headersForGroupTable = [\r\n    { label: 'Parameter header', index: 0, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[0]) ) },\r\n    { label: 'Parameter', index: 1,  values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[1]) ) },\r\n    { label: 'Statistic', index: 2, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[2]) ) }\r\n  ]\r\n\r\n  headersForGroupTable = headersForGroupTable.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n\r\n\r\n  const cellGroupsAsColumns = (cell) => cell[0].keys.concat(cell.map((cell) => cell.value))\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{ float: 'left' }}>{ results.header }</div>\r\n      <ResultTable\r\n        cells = { cells.map(cellGroupsAsColumns) }\r\n        headers = { headersForGroupTable }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nexport default ModelResults","import React,{ useState } from 'react'\r\n\r\nimport {  Col, Row } from 'react-bootstrap'\r\nimport uuidv4 from 'uuid'\r\n\r\nconst WholeOutput = ({ mplusOutput, show }) => {\r\n\r\n  const [ selectedChapters, setSelectedChapters ] = useState(['RESIDUAL OUTPUT'])\r\n\r\n\r\n  if (mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  const getChapterHeaders = () => {\r\n    return mplusOutput === null ? [] : mplusOutput.parsed.chapters.map(chap =>   chap.header.result  )\r\n  }\r\n\r\n  const chapterHeaders = getChapterHeaders()\r\n\r\n  const chapters = mplusOutput.parsed.chapters\r\n\r\n  const toggleChapterSelection = (header) => {\r\n\r\n    if (  isHeaderSelected(header)  ) {\r\n      // Included in selected chapters -> remove it\r\n      return selectedChapters.filter(chapter => chapter !== header)\r\n    }\r\n    // Not included in selected chapters -> add it\r\n    return selectedChapters.concat(header)\r\n\r\n  }\r\n\r\n  // Shorthand for checking if header is selected\r\n  const isHeaderSelected = (header) => selectedChapters.indexOf(header)>-1\r\n\r\n  // Function handle checkbox changes\r\n\r\n  const handleCheckBoxChange = (e) => {\r\n    //e.preventDefault()\r\n\r\n    const clickedChapter = e.target.value\r\n    setSelectedChapters(toggleChapterSelection(clickedChapter))\r\n  }\r\n\r\n  // A container for each chapter\r\n  const chapterContentContainer = (chapter,idx) => {\r\n\r\n    const style = {\r\n      whiteSpace: 'pre-wrap',\r\n      fontFamily: 'Consolas',\r\n      fontSize: '70%',\r\n      display: isHeaderSelected( chapter.header ) ? '' : 'none'\r\n    }\r\n    const content = '<h6>'+chapter.header +'</h6>\\n' + chapter.content\r\n    return(\r\n      <Row key={uuidv4()}>\r\n        <div style={ style }  dangerouslySetInnerHTML={{ __html: content }} />\r\n      </Row>\r\n    )\r\n  }\r\n\r\n\r\n  // (De-)select all\r\n  const toggleSelectAll = () => {\r\n\r\n    if ( selectedChapters.length !== chapterHeaders.length) {\r\n\r\n      setSelectedChapters(chapterHeaders)\r\n\r\n    } else {\r\n\r\n      setSelectedChapters([])\r\n    }\r\n  }\r\n\r\n  const menuStyle = {\r\n    position: 'fixed',\r\n    marginLeft: '5%',\r\n    marginTop: '2%'\r\n  }\r\n\r\n  return(\r\n    <Row>\r\n      <Col xs={4}>\r\n        <div style = {menuStyle} >\r\n          <Row>\r\n            <input type='checkbox'  onClick={ toggleSelectAll }/><div style={{ fontSize: '65%' }}>{  selectedChapters.length !== chapterHeaders.length ? 'SELECT ALL' : 'DESELECT ALL' }</div>\r\n          </Row>\r\n          {\r\n            chapterHeaders.map(header =>  {\r\n              const checked = isHeaderSelected(header)\r\n              const style = { fontSize: '65%' }\r\n              return(\r\n                <Row key={uuidv4()}>\r\n                  <input type='checkbox' checked = { checked } onChange={handleCheckBoxChange} value = { header }/><div style={style}>{ header }</div>\r\n                </Row>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n\r\n      </Col>\r\n      <Col xs={8}>\r\n        {\r\n          chapters.map((chap,idx) => chapterContentContainer( { content: chap.content.join('\\n'), header: chap.header.result },idx) )\r\n        }\r\n      </Col>\r\n    </Row>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default WholeOutput","import React from 'react'\r\n\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\n\r\nimport { getUniqueFromArray } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\n\r\n\r\nconst ModelFitInformation = ({ modelFitInformation, show }) => {\r\n  if ( modelFitInformation === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  // Hard coded headers for table\r\n  const headers = [\r\n    { label: 'Statistic group', index: 0, values: getUniqueFromArray( modelFitInformation.map(info => info.header) ) },\r\n    { label: 'Statistic', index: 1 },\r\n    { label: 'Value', index: 2 }\r\n  ]\r\n\r\n  const objectsToArrays = (ob) => {\r\n    return([ob.header, ob.statistic, ob.value ])\r\n  }\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{float: 'left' }}>MODEL FIT INFORMATION</div>\r\n      <ResultTable\r\n        cells = { modelFitInformation.map(objectsToArrays) }\r\n        headers = { headers }\r\n      />\r\n\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\nexport default ModelFitInformation","import React from 'react'\r\n\r\nimport { getUniqueFromArray, rowToColumn } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\nimport uuidv4 from 'uuid'\r\n\r\nconst ResidualOutput = ({ output,show }) => {\r\n\r\n  if ( output === null || !show || output === undefined ) {\r\n    return('')\r\n  }\r\n\r\n\r\n  let groups = getUniqueFromArray( output.means.map(o => o.group) )\r\n\r\n  const groupsExist = groups.length > 0 ? true : false\r\n\r\n  if ( !groupsExist ) {\r\n    groups = ['Value']\r\n  }\r\n\r\n  let headers = [\r\n    { label: 'Statistic', index: 0, values: getUniqueFromArray( output.means.map(o => o.statistic) ) },\r\n    { label: 'Parameter', index: 1, values: getUniqueFromArray( output.means.map(o => o.parameter) ) },\r\n  ]\r\n\r\n  headers = headers.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n  // Define rows and column for pivoting\r\n  output.means = output.means.map(m => {\r\n    return { ...m, rows: [ m.statistic, m.parameter], column: m.group }\r\n  })\r\n\r\n  const pivotedMeans = rowToColumn(output.means)\r\n\r\n  // If no group present, no output.means\r\n  let meansTable = ((means) => {\r\n\r\n    if (means.length === 0 ) {\r\n      return ''\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>Estimates and residuals for Means/Intercepts/Tresholds</h3>\r\n        <ResultTable\r\n          cells = {  pivotedMeans.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n          headers={ headers }/>\r\n      </div>\r\n    )\r\n  })(output.means)\r\n\r\n  // Return tables\r\n\r\n  return(\r\n    <Container>\r\n      {\r\n        meansTable\r\n      }\r\n      <h2>Covariance/Correlation tables</h2>\r\n      {\r\n        output.covariances.map(cov => correlationOrCovarianceTableFromData(cov,groups))\r\n      }\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\n\r\nconst correlationOrCovarianceTableFromData = (data,columns) => {\r\n\r\n\r\n\r\n\r\n  const cells  = data.content.flat().map(o => {  return { column: o.group, rows: o.keys, value: o.value } })\r\n\r\n  const pivotedCells = rowToColumn(cells)\r\n\r\n  //console.log('cells', cells)\r\n  //console.log('pivotedCells', pivotedCells)\r\n\r\n  let headers = [\r\n    { label: 'Parameter 1',  index: 0, values: getUniqueFromArray( cells.map(cell => cell.rows[0] ) )  },\r\n    { label: 'Parameter 2',  index: 1, values: getUniqueFromArray( cells.map(cell => cell.rows[1] ) ) },\r\n  ].concat( columns.map(group => {   return({ 'label': group })  }))\r\n\r\n  console.log('headewrs', headers)\r\n\r\n  return(\r\n    <div key={uuidv4()} >\r\n      <h3>{ data.header }</h3>\r\n      <ResultTable\r\n        cells = {  pivotedCells.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n        headers={ headers }/>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default ResidualOutput","import React, { useState, useEffect } from 'react'\nimport Menu from './components/Menu'\n\nimport dummydata from './dummydata/dummy.js'\nimport dummydata_single from './dummydata/dummy_single'\n\n\nimport parseOut from './utils/parseOut'\nimport FileLoader from './components/FileLoader'\nimport ModelResults from './components/ModelResults'\nimport WholeOutput from './components/WholeOutput'\nimport ModelFitInformation from './components/ModelFitInformation'\nimport ResidualOutput from './components/ResidualOutput'\n\n\nconst App = () => {\n\n  const [ mplusOutput, setMplusOutput ] = useState(null)\n  const [ page, setPage ] = useState('wholeoutput')\n  const [ showFileUpload, setShowFileUpload ] = useState(true)\n\n  //useEffect(() => { setMplusOutput({ filename: 'dummydata', string: dummydata.raw,parsed: parseOut(dummydata.raw) })  }, [])\n  //useEffect(() => { setMplusOutput({ filename: 'dummydata', string: dummydata_single.raw,parsed: parseOut(dummydata_single.raw) })  }, [])\n\n\n  const handleFileLoad = (e) => {\n    const fileInput = e.target\n    const file = fileInput.files[0]\n    const reader = new FileReader()\n\n    reader.onload = () =>  {\n      setMplusOutput(\n        {\n          string: reader.result\n          ,filename: fileInput.files[0].name\n          ,parsed: parseOut(reader.result)\n        })\n    }\n\n    reader.readAsText(file,'ISO-881')\n    setShowFileUpload(false)\n  }\n\n  const handlePageChange = (page) => {\n    setPage(page)\n  }\n\n  console.log('mplusOutput: ', mplusOutput)\n\n  const groups = mplusOutput !== null ? mplusOutput.parsed.groups : null\n\n  // Menu is position: fixed, so this:\n  const contentStyle = {\n    zIndex: -1,\n    marginTop: '5%'\n\n  }\n  const containerStyle = {\n    position: 'relative'\n  }\n\n  const showModal = showFileUpload & mplusOutput === null\n\n  return (\n    <div style={containerStyle}>\n\n      <FileLoader\n        handleFileLoad={handleFileLoad}\n        showFileUpload={ showModal }\n        handleShowFileChange = {() => setShowFileUpload(false) }/>\n\n      <Menu mplusOutput = { mplusOutput }     handlePageChange = { handlePageChange } page={page}/>\n      <div style={contentStyle}>\n        <WholeOutput          show = { page === 'wholeoutput' }         mplusOutput = { mplusOutput } />\n        <ModelFitInformation  show = { page === 'modelfitinformation' }    modelFitInformation = { mplusOutput !== null ? mplusOutput.parsed.modelFitInformation : null } />\n        <ModelResults         show = { page === 'modelresults' }  groups = { groups }   results = { mplusOutput !== null ? mplusOutput.parsed.modelResults : null } />\n        <ModelResults         show = { page === 'stdmodelresults' }  groups = { groups } results = { mplusOutput !== null ? mplusOutput.parsed.standardizedModelResults : null } />\n        <ResidualOutput       show = { page === 'residualoutput' }  output={ mplusOutput !== null ? mplusOutput.parsed.residualOutput : null }/>\n      </div>\n    </div>\n  )\n\n}\nexport default App\n","\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport React from 'react'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}