{"version":3,"sources":["components/Navbar.js","utils/extractOccurancesOfRegex.js","utils/extractChapters.js","utils/extractTitle.js","utils/extractNumberOfGroups.js","utils/extractResultTable.js","utils/columnsToRows.js","utils/utils.js","utils/extractModelFitInformation.js","utils/parseOut.js","components/FileLoader.js","components/DownloadCSVbutton.js","components/ResultTable.js","components/ModelResults.js","components/WholeOutput.js","components/ModelFitInformation.js","App.js","index.js"],"names":["Navbar","mplusOutput","handlePageChange","parsed","NumberOfGroups","Menu","Item","onClick","Grid","columns","doubling","style","marginBottom","Column","inverted","extractOccurancesOfRegex","params","regex","idx","occurances","res","exec","string","push","result","id","contentStart","index","length","start","addEnds","obj","arr","end","i","extractChapterContent","headersObj","headers","headerIdx","header","content","substring","split","extractChapters","chapters","filteringRegex","filter","h","test","extractTitle","title","c","toLowerCase","indexOf","undefined","extractNumberOfGroups","StringContainingNumberOfGroups","match","replace","ensureCellKeyCount","cell","headercount","keys","values","ExtractTableRows","group","grouptableheaders","join","tablerows","map","occ","originalTableRows","r","or","row","additionalKey","rowObj","splice","rowAsObject","TableRowsToObject","key","concat","addKeyToCell","extractResultTable","cells","headerToFind","tableheaders","alert","modelResults","chapt","flat","cellsToGroupComparison","elem","slice","columnsToRows","variables","cellsForGroupComparison","Object","reduce","variable","cellForGroupComparison","variableIndex","groupvalues","value","extractVariableValuesPerGroup","trimString","s","handleModelFitChapter","chap","splitted","statistic","extractModelFitInformation","modelInformationChapter","chaptersOfModelInformation","parseOut","mplusoutputstring","standardizedModelResults","groups","getOwnPropertyNames","getUniqueFromArray","modelFitInformation","find","FileLoader","handleFileLoad","Container","Row","centered","Button","primary","fontSize","Input","type","display","color","onChange","htmlFor","className","downloadCSV","args","data","filename","link","csv","delimiter","Array","isArray","convertArrayOfCellsToCSV","encodeURI","document","createElement","setAttribute","click","DownloadCSVbutton","float","margin","Icon","size","name","ResultTable","cellToTableRow","Table","celled","selectable","striped","collapsing","compact","Header","HeaderCell","Body","ModelResults","results","show","headersForGroupTable","dataToCSVconversion","groupRow","Cell","WholeOutput","useState","selectedChapters","setSelectedChapters","chapterHeaders","isHeaderSelected","handleCheckBoxChange","e","clickedChapter","target","innerText","chapter","width","Sticky","checked","Checkbox","label","whiteSpace","fontFamily","dangerouslySetInnerHTML","__html","chapterContentContainer","ModelFitInformation","f","console","log","as","stat","App","setMplusOutput","page","setPage","fileInput","file","files","reader","FileReader","onload","readAsText","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0515af2d.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Grid, Menu } from 'semantic-ui-react'\r\n\r\nconst Navbar = ({ mplusOutput, handlePageChange }) => {\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n  const LinkToGroupComparison =  mplusOutput.parsed.NumberOfGroups > 1 ? <Menu.Item onClick={ () =>  handlePageChange('groupcomparison') }>Group comparison</Menu.Item> : ''\r\n\r\n  const extraStyle = {\r\n    marginBottom: '2%'\r\n  }\r\n\r\n  return(\r\n    <Grid columns={1} doubling style={ extraStyle }>\r\n      <Grid.Column>\r\n        <Menu inverted>\r\n          <Menu.Item  onClick={ () =>  handlePageChange('wholeoutput') }>Whole output</Menu.Item>\r\n          <Menu.Item  onClick={ () =>  handlePageChange('modelinformation') }>Model information</Menu.Item>\r\n          <Menu.Item  onClick={ () =>  handlePageChange('modelresults') }>Model results</Menu.Item>\r\n          <Menu.Item  onClick={ () =>  handlePageChange('stdmodelresults') }>Standardized model results</Menu.Item>\r\n         \r\n        </Menu>\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n\r\n}\r\nexport default Navbar","\r\n\r\n\r\n// Gets hits of given regex (location)\r\nconst extractOccurancesOfRegex = (params) => {\r\n\r\n  const regex = params.regex\r\n  let idx = 0\r\n\r\n  const occurances = []\r\n  let res = ''\r\n  while ((res = regex.exec(params.string)) !== null) {\r\n    occurances.push({ result: res[0], id: 'C'+idx, contentStart: res.index + res[0].length, start: res.index  })\r\n    idx++\r\n  }\r\n\r\n  return { occurances: occurances,\r\n    string: params.string\r\n  }\r\n}\r\n\r\n\r\nexport default extractOccurancesOfRegex","\r\n\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n\r\n\r\n// Adds the end of string to hits gotten by extractOccurencesOfRegec\r\nconst addEnds = (obj) => {\r\n\r\n\r\n  let arr = obj.occurances\r\n  arr[arr.length-1].end = obj.string.length\r\n\r\n  for (let i = (arr.length-2); i >= 0;i--) {\r\n    arr[i].end = arr[(i+1)].start-1\r\n  }\r\n  obj.occurances = arr\r\n\r\n  return obj\r\n}\r\n\r\n// Gets strings between headers (extracted through extractOccurencesOfRegec)\r\nconst extractChapterContent = (headersObj) => {\r\n\r\n  let headers =  headersObj.occurances\r\n  const string = headersObj.string\r\n\r\n  const arr = []\r\n  for (let headerIdx in headers) {\r\n    let header = headers[headerIdx]\r\n    arr.push({\r\n      header: header,\r\n      id: header.id,\r\n      content: string.substring(header.contentStart,header.end).split('\\n')\r\n    })\r\n  }\r\n\r\n  headersObj.occurances = arr\r\n  return(headersObj)\r\n}\r\n\r\n// Brings them all together\r\n\r\nconst extractChapters = (params) => {\r\n\r\n\r\n\r\n  let headers = extractOccurancesOfRegex({ string: params.string, start: 0, chapters: [], regex: params.regex })\r\n\r\n  if (params.filteringRegex) {\r\n    headers.occurances = headers.occurances.filter((h) => !params.filteringRegex.test(h.result))\r\n  }\r\n\r\n  headers = addEnds(headers)\r\n\r\n  let chapters = extractChapterContent(headers)\r\n  return chapters.occurances\r\n\r\n}\r\n\r\nexport { extractChapters, extractChapterContent, addEnds }","const extractTitle = (chapters) => {\r\n  const title = chapters[0].content.filter((c) => c.toLowerCase().indexOf('title:')>-1)\r\n  return title === undefined ? undefined : title[0]\r\n}\r\n\r\nexport default extractTitle","const extractNumberOfGroups = (string) => {\r\n  const RegExpNumberOfGroups = /(Number of groups[ ]+[0-9]{1,2})/\r\n  const StringContainingNumberOfGroups =  string.match(RegExpNumberOfGroups)\r\n  return StringContainingNumberOfGroups ===  null ? undefined : StringContainingNumberOfGroups[0].replace(/[^0-9]/g,'') * 1\r\n}\r\n\r\nexport default extractNumberOfGroups","\r\nimport { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n// Ensure that each cell has as many keys as there are headers in the table\r\n\r\nconst ensureCellKeyCount = ({ cell, headercount }) => {\r\n\r\n  while (cell.keys.length + cell.values.length < headercount) {\r\n    cell.values.push('')\r\n  }\r\n  return cell\r\n}\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells = rowString.split(/([A-Z_\\-0-9.$]+)/).filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Group specific actions\r\n  let grouptableheaders = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  grouptableheaders = addEnds(grouptableheaders)\r\n\r\n  let grouptables = extractChapterContent(grouptableheaders)\r\n\r\n  let tablerows = grouptables.occurances.map((occ) => TableRowsToObject(occ))\r\n\r\n  // Add group as key to cells\r\n  const addKeyToCell = (cell,key) => {\r\n    cell.keys  =  [key].concat(cell.keys)\r\n    return cell\r\n  }\r\n  tablerows = tablerows.map((row) => row.map((cell) => addKeyToCell(cell,group.header.result)))\r\n\r\n  return(tablerows)\r\n}\r\n\r\n\r\n\r\nconst extractResultTable = (params) => {\r\n\r\n  const chapters = params.chapters\r\n  const headerToFind = params.headerToFind\r\n  const tableheaders = params.tableheaders\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (chapters === undefined | chapters === null) {\r\n    alert('No output loaded to get model results from!')\r\n  }\r\n\r\n  let cells\r\n\r\n  // Find the chapter that has the \"headerToFind\" (eg. MODEL RESULTS)\r\n  let modelResults = chapters.filter((chapt) => chapt.header.result === headerToFind)[0]\r\n\r\n  // If output has groups:\r\n  if (NumberOfGroups !== undefined & NumberOfGroups>1)  {\r\n\r\n\r\n    // Find group specific parts of the output\r\n    const RegExpGroup =  /Group [A-Z_]+$/gm\r\n    const groups = extractChapters({ string: modelResults.content.join('\\n'), regex: RegExpGroup })\r\n\r\n    const grouptablerows = groups.map((group) => ExtractTableRows(group))\r\n    cells = grouptablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n\r\n  // If output does not have gtroups\r\n  } else {\r\n\r\n    // This function works as it similar to number of groups = 1\r\n    let tablerows = ExtractTableRows(modelResults)\r\n    cells = tablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n  }\r\n  return(cells)\r\n\r\n}\r\n\r\nexport default extractResultTable","\r\n\r\n\r\n\r\nconst cellsToGroupComparison = (obj,elem) => {\r\n\r\n  let key = elem.keys.slice(1,3).join('') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      keys: elem.keys.slice(1,3),\r\n      values: [\r\n        {\r\n          group: elem.keys[0],\r\n          values: elem.values\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      group: elem.keys[0],\r\n      values: elem.values\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nconst columnsToRows = ({ cells, variables }) => {\r\n\r\n  let cellsForGroupComparison =  Object.values( cells.reduce(cellsToGroupComparison,{}) )\r\n\r\n  const extractVariableValuesPerGroup = (cellForGroupComparison,variable,variableIndex) => {\r\n    return cellForGroupComparison.values.map((groupvalues) =>  { return({ keys: cellForGroupComparison.keys.concat(variable),group: groupvalues.group,  value: groupvalues.values[variableIndex] }) } )\r\n  }\r\n\r\n  cellsForGroupComparison = variables.map((variable,idx) => {\r\n    return cellsForGroupComparison.map((cell) => extractVariableValuesPerGroup(cell,variable,idx))\r\n  }).flat()\r\n\r\n  return cellsForGroupComparison//.flat()\r\n}\r\n\r\n\r\nexport default columnsToRows\r\n","const getUniqueFromArray = (arr) => {\r\n\r\n  let f = (obj,elem) => {\r\n    obj[elem] = 1\r\n    return obj\r\n  }\r\n  const obj =   arr.reduce(f,{})\r\n\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\n\r\nconst trimString = (s) => {\r\n  return s.replace(/^[ ]{1,}/,'').replace(/[ ]{1,}$/,'')\r\n}\r\n\r\n\r\n\r\n\r\nexport { getUniqueFromArray, trimString }","\r\n\r\nimport { extractChapters } from './extractChapters'\r\nimport { trimString } from './utils'\r\n\r\n\r\n\r\n// this handles (extracst numbers and titles) single chapter in model fit information\r\nconst handleModelFitChapter = (chap) => {\r\n\r\n\r\n  const header = chap.header.result\r\n\r\n  const handleRow = (row) => {\r\n    // extract number and name of statistic\r\n    // by splitting with two or more spaces\r\n    const splitted = trimString(row).split(/[ ]{2,}/)\r\n    const statistic =  trimString(splitted[0])\r\n\r\n    return({\r\n      header: header,\r\n      statistic:  statistic,\r\n      value: splitted.length === 1 ? -1 : splitted.slice(1,).map(s => trimString(s)).join(', ')//splittetrimString(splitted[1])\r\n    })\r\n\r\n  }\r\n\r\n  return  chap.content.map(handleRow)\r\n\r\n}\r\n\r\n\r\n// modelInformationChapter = temp1.parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION')\r\n\r\nconst extractModelFitInformation = (modelInformationChapter) => {\r\n\r\n\r\n\r\n  // The model fit information is structured as follows:\r\n  // HEADER ROW\r\n  //      NAME_OF_STATISTIC       VALUE_OF_STATISTIC\r\n  // with exception of the first statistic 'Number of free parameters'\r\n\r\n\r\n  // First get chapters of model fit information based on header rows\r\n  const params = {\r\n    string: modelInformationChapter.content.join('\\n'),\r\n    regex: /^[A-Z*].+$/gm\r\n  }\r\n  let chaptersOfModelInformation = extractChapters(params)\r\n\r\n  // MANIPULATIONS\r\n\r\n  // 1. Remove useless chapter starting with *\r\n  chaptersOfModelInformation = chaptersOfModelInformation.filter(chap => chap.header.result.substring(0,1)!=='*')\r\n\r\n  // 2. Handle exception of first statistic and clean empty objects from content array\r\n  chaptersOfModelInformation = chaptersOfModelInformation.map(chap =>  {\r\n    chap.content = chap.content.filter(c => c.length>1)\r\n\r\n    if (chap.content.length === 0) {\r\n\r\n      chap.content = [ chap.header.result ] // if empty, replace w/ header\r\n      chap.header.result =  trimString( chap.header.result.replace(/[0-9]{1,}/,'') )//  removing any numbers from header (for exception Number of free parameters') // \r\n    }\r\n    return chap\r\n  })\r\n\r\n  // Get statistics\r\n  const statistics = chaptersOfModelInformation.map( handleModelFitChapter )\r\n\r\n  return statistics.flat()\r\n\r\n}\r\n\r\nexport default extractModelFitInformation\r\n","\r\nimport { extractChapters } from './extractChapters'\r\nimport extractTitle    from './extractTitle'\r\nimport extractNumberOfGroups from './extractNumberOfGroups'\r\nimport extractResultTable from './extractResultTable'\r\nimport columnsToRows from './columnsToRows'\r\nimport extractModelFitInformation from './extractModelFitInformation'\r\n\r\nimport { getUniqueFromArray } from './utils'\r\n\r\nconst parseOut = (mplusoutputstring) => {\r\n\r\n  const parsed = {}\r\n\r\n  // Extract main chapters\r\n  const RegExpChapter = /(^[A-Z][A-Z 0-9-]+[A-Z]$)/gm\r\n  parsed.chapters =  extractChapters({ string: mplusoutputstring, regex: RegExpChapter, filteringRegex: / (BY|WITH|ON)$/m  })\r\n  parsed.title    =  extractTitle(parsed.chapters)\r\n  parsed.NumberOfGroups = extractNumberOfGroups(mplusoutputstring)\r\n\r\n  // Extract model results\r\n  const variables = ['Estimate','S.E.','Est/S.E.','P-Value']\r\n  const tableheaders = ['Column1','Column2','Column3'].concat(variables)\r\n\r\n  let header = 'MODEL RESULTS'\r\n\r\n  let cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.modelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Extract standardized model results\r\n\r\n  header = 'STANDARDIZED MODEL RESULTS'\r\n\r\n  cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.standardizedModelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Get group names from model results\r\n  parsed.groups = getUniqueFromArray( parsed.modelResults.cells.flat().map((c) => c.group ) )\r\n\r\n  // extractModelFitInformation\r\n\r\n  parsed.modelFitInformation = extractModelFitInformation(parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION'))\r\n\r\n  return parsed\r\n}\r\n\r\nexport default parseOut","import React from 'react'\r\nimport {  Button, Input, Grid, Container } from 'semantic-ui-react'\r\n\r\nconst FileLoader = (  { handleFileLoad, mplusOutput }) => {\r\n  if (mplusOutput !== null) {\r\n    return('')\r\n  }\r\n\r\n  const inputStyle = {\r\n    display: 'none',\r\n    color: 'red'\r\n  }\r\n\r\n  const buttonStyle = {\r\n    fontSize: '200%',\r\n\r\n  }\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <Grid>\r\n        <Grid.Row></Grid.Row>\r\n        <Grid.Row></Grid.Row>\r\n        <Grid.Row></Grid.Row>\r\n        <Grid.Row></Grid.Row>\r\n        <Grid.Row centered>\r\n          <Button primary style={buttonStyle}> <Input id=\"file-upload\" type=\"file\" style={inputStyle} onChange={ handleFileLoad }></Input>\r\n            <label htmlFor=\"file-upload\" className=\"custom-file-upload\">Upload .out -file</label>\r\n          </Button>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Container>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default FileLoader","import React from 'react'\r\nimport { Button, Icon } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nconst convertArrayOfCellsToCSV = (args) => {\r\n\r\n  let headers,data,delimiter\r\n\r\n  headers = args.headers\r\n  data    = args.data\r\n  delimiter = args.delimiter || ';'\r\n\r\n  let result = ''\r\n\r\n  result += headers.join(delimiter) + '\\n'\r\n\r\n\r\n  result += data.map((cell) => {\r\n    if (!Array.isArray(cell)) {\r\n      return cell.join(delimiter)\r\n    }\r\n    return cell.join(delimiter)\r\n  }).join('\\n')\r\n\r\n  return result\r\n}\r\n\r\nconst downloadCSV = (args) => {\r\n\r\n\r\n  let data, filename, link\r\n  let csv = convertArrayOfCellsToCSV(args)\r\n  if (csv === null) return\r\n\r\n\r\n  filename = args.filename || 'export.csv'\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv\r\n  }\r\n  data = encodeURI(csv)\r\n\r\n  link = document.createElement('a')\r\n  link.setAttribute('href', data)\r\n  link.setAttribute('download', filename)\r\n  link.click()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DownloadCSVbutton = ({ params, float }) => {\r\n\r\n  if (params === null) {\r\n    return('')\r\n  }\r\n\r\n  const data = params.data\r\n  const headers = params.headers\r\n\r\n  const handleClick = () => {\r\n    downloadCSV({ data: data, headers: headers })\r\n\r\n\r\n  }\r\n\r\n\r\n  const style = {\r\n    margin: '0.5%',\r\n    float: float\r\n  }\r\n  return(\r\n    <Button style = { style } primary onClick={ handleClick } >\r\n      <Icon size='small' name='download' />\r\n        CSV\r\n    </Button>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default DownloadCSVbutton","import React from 'react'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nconst ResultTable = ({ headers, cells, cellToTableRow }) => {\r\n\r\n  return(\r\n    <Table celled selectable striped collapsing compact>\r\n      <Table.Header>\r\n        <Table.Row>\r\n          {\r\n            headers.map(c => <Table.HeaderCell celled striped>{ c }</Table.HeaderCell>)\r\n          }\r\n        </Table.Row>\r\n      </Table.Header>\r\n      <Table.Body>\r\n        { cells.map(cellToTableRow) }\r\n      </Table.Body>\r\n    </Table>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default ResultTable","import React from 'react'\r\nimport { Container, Header, Table } from 'semantic-ui-react'\r\nimport DownloadCSVbutton from './DownloadCSVbutton'\r\n\r\nimport ResultTable from './ResultTable'\r\n\r\n\r\n\r\n\r\n\r\nconst ModelResults = ({ results, show, groups  }) => {\r\n\r\n  if ( results === null || !show ) {\r\n    return('')\r\n  }\r\n  const headersForGroupTable = ['Parameter header','Parameter','Value type'].concat( groups )\r\n  const headersForCSV = ['Parameter header','Parameter','Value type','Group','Value']\r\n\r\n  const cells = results.cells\r\n\r\n\r\n  const cellGroupsAsColumns = (cell) => cell[0].keys.concat(cell.map((cell) => cell.value))\r\n\r\n  const groupGrowsAsCells = (groupRow) => {\r\n\r\n    return(\r\n      <Table.Row>\r\n        { cellGroupsAsColumns(groupRow).map(c => <Table.Cell>{ c }</Table.Cell>  )}\r\n      </Table.Row>\r\n    )\r\n\r\n  }\r\n\r\n  // Expects array of arrays\r\n  const dataToCSVconversion = cells.flat().map(cell => [...cell.keys].concat(cell.group).concat(cell.value) )\r\n\r\n  return(\r\n    <Container>\r\n      <Header>{ results.header }\r\n        <DownloadCSVbutton params = { { data: dataToCSVconversion, headers: headersForCSV } } />\r\n      </Header>\r\n      <ResultTable\r\n        cells = { cells }\r\n        cellToTableRow = { groupGrowsAsCells }\r\n        headers = { headersForGroupTable }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nexport default ModelResults","import React,{ useState } from 'react'\r\n\r\nimport { Grid, Checkbox, Sticky, Header, Button } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nconst WholeOutput = ({ mplusOutput, show }) => {\r\n\r\n  const [ selectedChapters, setSelectedChapters ] = useState([])\r\n\r\n\r\n  if (mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  const getChapterHeaders = () => {\r\n    return mplusOutput === null ? [] : mplusOutput.parsed.chapters.map(chap =>   chap.header.result  )\r\n  }\r\n\r\n  const chapterHeaders = getChapterHeaders()\r\n\r\n  const chapters = mplusOutput.parsed.chapters\r\n\r\n  const toggleChapterSelection = (header) => {\r\n\r\n    if (  isHeaderSelected(header)  ) {\r\n      // Included in selected chapters -> remove it\r\n      return selectedChapters.filter(chapter => chapter !== header)\r\n    }\r\n    // Not included in selected chapters -> add it\r\n    return selectedChapters.concat(header)\r\n\r\n  }\r\n\r\n  // Shorthand for checking if header is selected\r\n  const isHeaderSelected = (header) => selectedChapters.indexOf(header)>-1\r\n\r\n  // Function handle checkbox changes\r\n\r\n  const handleCheckBoxChange = (e) => {\r\n\r\n    const clickedChapter = e.target.innerText\r\n    setSelectedChapters(toggleChapterSelection(clickedChapter))\r\n  }\r\n\r\n  // A container for each chapter\r\n  const chapterContentContainer = (chapter,idx) => {\r\n\r\n    const style = {\r\n      whiteSpace: 'pre-wrap',\r\n      fontFamily: 'Consolas',\r\n      display: isHeaderSelected( chapter.header ) ? '' : 'none'\r\n    }\r\n    return(\r\n      <div>\r\n        <div></div>\r\n        <Header style={ style }>{ chapter.header }</Header>\r\n        <div key={ 'chapter_'+idx } style={ style }  dangerouslySetInnerHTML={{ __html: chapter.content }} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  // (De-)select all\r\n  const toggleSelectAll = () => {\r\n\r\n    if ( selectedChapters.length !== chapterHeaders.length) {\r\n\r\n      setSelectedChapters(chapterHeaders)\r\n\r\n    } else {\r\n\r\n      setSelectedChapters([])\r\n    }\r\n  }\r\n\r\n  return(\r\n\r\n    <Grid columns={2} doubling>\r\n      <Grid.Column width={4}>\r\n        <Grid.Row>\r\n          <Button primary onClick={ toggleSelectAll }>{  selectedChapters.length !== chapterHeaders.length ? 'SELECT ALL' : 'DESELECT ALL' }</Button>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Sticky>\r\n            {\r\n              chapterHeaders.map(header =>  {\r\n                const checked = isHeaderSelected(header)\r\n                return(\r\n                  <Grid.Row key={ 'checkbox_'+header}><Checkbox label={ header } checked = {checked} onChange={handleCheckBoxChange} /></Grid.Row>\r\n                )\r\n              })\r\n            }\r\n          </Sticky>\r\n        </Grid.Row>\r\n      </Grid.Column>\r\n      <Grid.Column width={12}>\r\n        {\r\n          chapters.map((chap,idx) => chapterContentContainer( { content: chap.content.join('\\n'), header: chap.header.result },idx) )\r\n        }\r\n      </Grid.Column>\r\n\r\n    </Grid>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default WholeOutput","import React from 'react'\r\nimport { Segment, Table, Header, Container } from 'semantic-ui-react'\r\nimport DownloadCSVButton from './DownloadCSVbutton'\r\n\r\n\r\nimport ResultTable from './ResultTable'\r\n\r\n\r\nconst ModelFitInformation = ({ modelFitInformation, show }) => {\r\n  if ( modelFitInformation === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  // Hard coded headers for table (and CSV)\r\n  const headers = ['Statistic group','Statistic','Value']\r\n\r\n  const statisticToTableRow = (stat) => {\r\n    return(\r\n      <Table.Row key = { stat.header+stat.statistic+stat.value }>\r\n        <Table.Cell>{ stat.header }</Table.Cell>\r\n        <Table.Cell>{ stat.statistic }</Table.Cell>\r\n        <Table.Cell>{ stat.value }</Table.Cell>\r\n      </Table.Row>)\r\n  }\r\n\r\n  // Expects array of arrays\r\n  const dataToCSVconversion = modelFitInformation.map(f => [ f.header, f.statistic, f.value  ])\r\n  console.log('modelfit', dataToCSVconversion)\r\n\r\n  return(\r\n    <Container>\r\n      <Header as='h4'>\r\n        MODEL FIT INFORMATION\r\n        <DownloadCSVButton  params = { { data: dataToCSVconversion, headers: headers } } />\r\n      </Header>\r\n\r\n      <ResultTable\r\n        cells = { modelFitInformation }\r\n        headers = { headers }\r\n        cellToTableRow = { statisticToTableRow }\r\n      />\r\n\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\nexport default ModelFitInformation","import React, { useState, useEffect } from 'react'\nimport { Container, Sticky } from 'semantic-ui-react'\nimport Navbar from './components/Navbar'\n\n//import dummydata from './dummydata/dummy.js'\n\n\nimport parseOut from './utils/parseOut'\nimport FileLoader from './components/FileLoader'\nimport ModelResults from './components/ModelResults'\nimport WholeOutput from './components/WholeOutput'\nimport GroupComparison from './dummydata/deadcode/GroupComparison'\nimport ModelFitInformation from './components/ModelFitInformation'\n\n\nconst App = () => {\n\n  const [ mplusOutput, setMplusOutput ] = useState(null)\n  const [ page, setPage ] = useState('modelinformation')\n\n\n  //useEffect(() => { setMplusOutput({ filename: 'dummydata', string: dummydata.raw,parsed: parseOut(dummydata.raw) })  }, [])\n\n\n  const handleFileLoad = (e) => {\n    const fileInput = e.target\n    const file = fileInput.files[0]\n    const reader = new FileReader()\n\n    reader.onload = () =>  {\n      setMplusOutput(\n        {\n          string: reader.result\n          ,filename: fileInput.files[0].name\n          ,parsed: parseOut(reader.result)\n        })\n    }\n\n    reader.readAsText(file,'ISO-881')\n  }\n\n  const handlePageChange = (page) => {\n    setPage(page)\n  }\n\n  console.log('mplusOutput: ', mplusOutput)\n\n  const groups = mplusOutput !== null ? mplusOutput.parsed.groups : null\n\n  return (\n    <Container>\n      <FileLoader mplusOutput = { mplusOutput } handleFileLoad={handleFileLoad}/>\n      <Sticky>\n        <Navbar mplusOutput = { mplusOutput } handlePageChange = { handlePageChange }/>\n      </Sticky>\n      <WholeOutput          show = { page === 'wholeoutput' }         mplusOutput = { mplusOutput } />\n      <ModelFitInformation  show = { page === 'modelinformation' }    modelFitInformation = { mplusOutput !== null ? mplusOutput.parsed.modelFitInformation : null } />\n      <ModelResults         show = { page === 'modelresults' }  groups = { groups }   results = { mplusOutput !== null ? mplusOutput.parsed.modelResults : null } />\n      <ModelResults         show = { page === 'stdmodelresults' }  groups = { groups } results = { mplusOutput !== null ? mplusOutput.parsed.standardizedModelResults : null } />\n    </Container>\n  )\n\n}\nexport default App\n","\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport React from 'react'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}