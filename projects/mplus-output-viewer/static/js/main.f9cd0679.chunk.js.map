{"version":3,"sources":["components/Navbar.js","utils/extractOccurancesOfRegex.js","utils/extractChapters.js","utils/extractTitle.js","utils/extractNumberOfGroups.js","utils/extractResultTable.js","utils/columnsToRows.js","utils/parseOut.js","utils/utils.js","components/FileLoader.js","components/ModelResults.js","components/WholeOutput.js","App.js","index.js"],"names":["Navbar","mplusOutput","LinkToGroupComparison","undefined","parsed","NumberOfGroups","to","style","textDecoration","Menu","Item","Grid","columns","doubling","Column","extractOccurancesOfRegex","params","regex","idx","occurances","res","exec","string","push","result","id","contentStart","index","length","start","addEnds","obj","arr","end","i","extractChapterContent","headersObj","headers","headerIdx","header","content","substring","split","extractChapters","chapters","filteringRegex","filter","h","test","extractTitle","title","c","toLowerCase","indexOf","extractNumberOfGroups","StringContainingNumberOfGroups","match","replace","ensureCellKeyCount","cell","headercount","keys","values","ExtractTableRows","group","grouptableheaders","join","tablerows","map","occ","originalTableRows","r","or","row","additionalKey","rowObj","splice","rowAsObject","TableRowsToObject","key","concat","addKeyToCell","extractResultTable","cells","headerToFind","tableheaders","alert","modelResults","chapt","flat","cellsToGroupComparison","elem","slice","columnsToRows","variables","cellsForGroupComparison","Object","reduce","variable","cellForGroupComparison","variableIndex","groupvalues","value","extractVariableValuesPerGroup","parseOut","mplusoutputstring","standardizedModelResults","groups","getOwnPropertyNames","getUniqueFromArray","FileLoader","handleFileLoad","Header","Button","Input","type","display","color","onChange","ModelResults","results","Container","Table","Body","Row","Cell","WholeOutput","useState","selectedChapters","setSelectedChapters","chapterHeaders","chap","isHeaderSelected","handleCheckBoxChange","e","clickedChapter","target","innerText","chapter","width","onClick","Sticky","checked","Checkbox","label","whiteSpace","fontFamily","dangerouslySetInnerHTML","__html","chapterContentContainer","App","setMplusOutput","fileInput","file","files","reader","FileReader","onload","filename","name","readAsText","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f9cd0679.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Grid, Menu, Header } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navbar = ({ mplusOutput }) => {\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n\r\n  const LinkToGroupComparison =  mplusOutput.parsed.NumberOfGroups !== undefined ? <Link to='groupcomparison' style={{ textDecoration: 'none' }}><Menu.Item>Group comparison</Menu.Item></Link> : null\r\n\r\n  return(\r\n    <Grid columns={1} doubling>\r\n      <Grid.Column>\r\n        <Menu>\r\n          <Link to='wholeoutput' style={{ textDecoration: 'none' }}><Menu.Item>Whole output</Menu.Item></Link>\r\n          <Link to='modelresults' style={{ textDecoration: 'none' }}><Menu.Item>Model results</Menu.Item></Link>\r\n          <Link to='standardizedmodelresults' style={{ textDecoration: 'none' }}><Menu.Item>Standardized model results</Menu.Item></Link>\r\n          { LinkToGroupComparison }\r\n        </Menu>\r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n}\r\nexport default Navbar","\r\n\r\n\r\n// Gets hits of given regex (location)\r\nconst extractOccurancesOfRegex = (params) => {\r\n\r\n  const regex = params.regex\r\n  let idx = 0\r\n\r\n  const occurances = []\r\n  let res = ''\r\n  while ((res = regex.exec(params.string)) !== null) {\r\n    occurances.push({ result: res[0], id: 'C'+idx, contentStart: res.index + res[0].length, start: res.index  })\r\n    idx++\r\n  }\r\n\r\n  return { occurances: occurances,\r\n    string: params.string\r\n  }\r\n}\r\n\r\n\r\nexport default extractOccurancesOfRegex","\r\n\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n\r\n\r\n// Adds the end of string to hits gotten by extractOccurencesOfRegec\r\nconst addEnds = (obj) => {\r\n\r\n\r\n  let arr = obj.occurances\r\n  arr[arr.length-1].end = obj.string.length\r\n\r\n  for (let i = (arr.length-2); i >= 0;i--) {\r\n    arr[i].end = arr[(i+1)].start-1\r\n  }\r\n  obj.occurances = arr\r\n\r\n  return obj\r\n}\r\n\r\n// Gets strings between headers (extracted through extractOccurencesOfRegec)\r\nconst extractChapterContent = (headersObj) => {\r\n\r\n  let headers =  headersObj.occurances\r\n  const string = headersObj.string\r\n\r\n  const arr = []\r\n  for (let headerIdx in headers) {\r\n    let header = headers[headerIdx]\r\n    arr.push({\r\n      header: header,\r\n      id: header.id,\r\n      content: string.substring(header.contentStart,header.end).split('\\n')\r\n    })\r\n  }\r\n\r\n  headersObj.occurances = arr\r\n  return(headersObj)\r\n}\r\n\r\n// Brings them all together\r\n\r\nconst extractChapters = (params) => {\r\n\r\n\r\n\r\n  let headers = extractOccurancesOfRegex({ string: params.string, start: 0, chapters: [], regex: params.regex })\r\n\r\n  if (params.filteringRegex) {\r\n    headers.occurances = headers.occurances.filter((h) => !params.filteringRegex.test(h.result))\r\n  }\r\n\r\n  headers = addEnds(headers)\r\n\r\n  let chapters = extractChapterContent(headers)\r\n  return chapters.occurances\r\n\r\n}\r\n\r\nexport { extractChapters, extractChapterContent, addEnds }","const extractTitle = (chapters) => {\r\n  const title = chapters[0].content.filter((c) => c.toLowerCase().indexOf('title:')>-1)\r\n  return title === undefined ? undefined : title[0]\r\n}\r\n\r\nexport default extractTitle","const extractNumberOfGroups = (string) => {\r\n  const RegExpNumberOfGroups = /(Number of groups[ ]+[0-9]{1,2})/\r\n  const StringContainingNumberOfGroups =  string.match(RegExpNumberOfGroups)\r\n  return StringContainingNumberOfGroups ===  null ? undefined : StringContainingNumberOfGroups[0].replace(/[^0-9]/g,'') * 1\r\n}\r\n\r\nexport default extractNumberOfGroups","\r\nimport { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n// Ensure that each cell has as many keys as there are headers in the table\r\n\r\nconst ensureCellKeyCount = ({ cell, headercount }) => {\r\n\r\n  while (cell.keys.length + cell.values.length < headercount) {\r\n    cell.values.push('')\r\n  }\r\n  return cell\r\n}\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells = rowString.split(/([A-Z_\\-0-9.$]+)/).filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Group specific actions\r\n  let grouptableheaders = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  grouptableheaders = addEnds(grouptableheaders)\r\n\r\n  let grouptables = extractChapterContent(grouptableheaders)\r\n\r\n  let tablerows = grouptables.occurances.map((occ) => TableRowsToObject(occ))\r\n\r\n  // Add group as key to cells\r\n  const addKeyToCell = (cell,key) => {\r\n    cell.keys  =  [key].concat(cell.keys)\r\n    return cell\r\n  }\r\n  tablerows = tablerows.map((row) => row.map((cell) => addKeyToCell(cell,group.header.result)))\r\n\r\n  return(tablerows)\r\n}\r\n\r\n\r\n\r\nconst extractResultTable = (params) => {\r\n\r\n  const chapters = params.chapters\r\n  const headerToFind = params.headerToFind\r\n  const tableheaders = params.tableheaders\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (chapters === undefined | chapters === null) {\r\n    alert('No output loaded to get model results from!')\r\n  }\r\n\r\n  let cells\r\n\r\n  // Find the chapter that has the \"headerToFind\" (eg. MODEL RESULTS)\r\n  let modelResults = chapters.filter((chapt) => chapt.header.result === headerToFind)[0]\r\n\r\n  // If output has groups:\r\n  if (NumberOfGroups !== undefined & NumberOfGroups>1)  {\r\n\r\n\r\n    // Find group specific parts of the output\r\n    const RegExpGroup =  /Group [A-Z_]+$/gm\r\n    const groups = extractChapters({ string: modelResults.content.join('\\n'), regex: RegExpGroup })\r\n\r\n    const grouptablerows = groups.map((group) => ExtractTableRows(group))\r\n    cells = grouptablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n\r\n  // If output does not have gtroups\r\n  } else {\r\n\r\n    // This function works as it similar to number of groups = 1\r\n    let tablerows = ExtractTableRows(modelResults)\r\n    cells = tablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n  }\r\n  return(cells)\r\n\r\n}\r\n\r\nexport default extractResultTable","\r\n\r\n\r\n\r\nconst cellsToGroupComparison = (obj,elem) => {\r\n\r\n  let key = elem.keys.slice(1,3).join('') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      keys: elem.keys.slice(1,3),\r\n      values: [\r\n        {\r\n          group: elem.keys[0],\r\n          values: elem.values\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      group: elem.keys[0],\r\n      values: elem.values\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nconst columnsToRows = ({ cells, variables }) => {\r\n\r\n  let cellsForGroupComparison =  Object.values( cells.reduce(cellsToGroupComparison,{}) )\r\n\r\n  const extractVariableValuesPerGroup = (cellForGroupComparison,variable,variableIndex) => {\r\n    return cellForGroupComparison.values.map((groupvalues) =>  { return({ keys: cellForGroupComparison.keys.concat(variable).concat(groupvalues.group),  value: groupvalues.values[variableIndex] }) } )\r\n  }\r\n\r\n  cellsForGroupComparison = variables.map((variable,idx) => {\r\n    return cellsForGroupComparison.map((cell) => extractVariableValuesPerGroup(cell,variable,idx))\r\n  }).flat()\r\n\r\n  return cellsForGroupComparison.flat()\r\n}\r\n\r\n\r\nexport default columnsToRows\r\n","\r\nimport { extractChapters } from './extractChapters'\r\nimport extractTitle    from './extractTitle'\r\nimport extractNumberOfGroups from './extractNumberOfGroups'\r\nimport extractResultTable from './extractResultTable'\r\nimport columnsToRows from './columnsToRows'\r\nimport { getUniqueFromArray } from './utils'\r\n\r\nconst parseOut = (mplusoutputstring) => {\r\n\r\n  const parsed = {}\r\n\r\n  // Extract main chapters\r\n  const RegExpChapter = /(^[A-Z][A-Z 0-9]+[A-Z]$)/gm\r\n  parsed.chapters =  extractChapters({ string: mplusoutputstring, regex: RegExpChapter, filteringRegex: / (BY|WITH|ON)$/m  })\r\n  parsed.title    =  extractTitle(parsed.chapters)\r\n  parsed.NumberOfGroups = extractNumberOfGroups(mplusoutputstring)\r\n\r\n  // Extract model results\r\n  const variables = ['Estimate','S.E.','Est/S.E.','P-Value']\r\n  const tableheaders = ['Column1','Column2','Column3'].concat(variables)\r\n\r\n  let header = 'MODEL RESULTS'\r\n\r\n  let cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.modelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Extract standardized model results\r\n\r\n  header = 'STANDARDIZED MODEL RESULTS'\r\n\r\n  cells = extractResultTable(\r\n    { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n  )\r\n\r\n  parsed.standardizedModelResults = {\r\n    header: header,\r\n    cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n  }\r\n\r\n  // Get group names from model results\r\n  parsed.groups =  getUniqueFromArray( parsed.modelResults.cells.map((c) => c.group ) )\r\n\r\n\r\n\r\n  return parsed\r\n}\r\n\r\nexport default parseOut","const getUniqueFromArray = (arr) => {\r\n\r\n  let f = (obj,elem) => {\r\n    obj[elem] = 1\r\n    return obj\r\n  }\r\n  const obj =   arr.reduce(f,{})\r\n\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\n\r\nexport { getUniqueFromArray }","import React from 'react'\r\nimport { Header, Button, Input } from 'semantic-ui-react'\r\n\r\nconst FileLoader = (  { handleFileLoad, mplusOutput }) => {\r\n  if (mplusOutput !== null) {\r\n    return('')\r\n  }\r\n\r\n  const inputStyle = {\r\n    display: 'block',\r\n    color: 'red'\r\n  }\r\n\r\n\r\n\r\n  return(\r\n    <div>\r\n      <Header>\r\n            Load .out file\r\n      </Header>\r\n      <Button>\r\n        <Input type=\"file\" style={inputStyle} onChange={ handleFileLoad }></Input>\r\n          Load\r\n      </Button>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default FileLoader","import React from 'react'\r\nimport { Container, Header, Table } from 'semantic-ui-react'\r\n\r\nconst ModelResults = ({ results }) => {\r\n\r\n  if (results === null) {\r\n    return('')\r\n  }\r\n  const cells = results.cells\r\n  const cellToTableRow = (cell) => {\r\n    return(\r\n      <Table.Row>\r\n        {cell.keys.concat(cell.value).map((key) => <Table.Cell>{ key }</Table.Cell>)}\r\n      </Table.Row>\r\n    )\r\n  }\r\n\r\n  return(\r\n    <Container>\r\n      <Header>{ results.header }</Header>\r\n      <Table>\r\n        <Table.Body>\r\n          { cells.map(cellToTableRow) }\r\n        </Table.Body>\r\n      </Table>\r\n\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nexport default ModelResults","import React,{ useState, useEffect } from 'react'\r\n\r\nimport { Grid, Checkbox, Sticky, Header, Button } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nconst WholeOutput = ({ mplusOutput }) => {\r\n\r\n  const [ selectedChapters, setSelectedChapters ] = useState([])\r\n\r\n\r\n  const getChapterHeaders = () => {\r\n    return mplusOutput === null ? [] : mplusOutput.parsed.chapters.map(chap =>   chap.header.result  )\r\n  }\r\n\r\n  const chapterHeaders = getChapterHeaders()\r\n  /*\r\n  useEffect(() => {\r\n    setSelectedChapters(getChapterHeaders())\r\n  }, [mplusOutput])\r\n  */\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n  const chapters = mplusOutput.parsed.chapters\r\n\r\n  const toggleChapterSelection = (header) => {\r\n\r\n    if (  isHeaderSelected(header)  ) {\r\n      // Included in selected chapters -> remove it\r\n      return selectedChapters.filter(chapter => chapter !== header)\r\n    }\r\n    // Not included in selected chapters -> add it\r\n    return selectedChapters.concat(header)\r\n\r\n  }\r\n\r\n  const isHeaderSelected = (header) => selectedChapters.indexOf(header)>-1\r\n\r\n  // Function handle checkbox changes\r\n\r\n  const handleCheckBoxChange = (e) => {\r\n\r\n    const clickedChapter = e.target.innerText\r\n    setSelectedChapters(toggleChapterSelection(clickedChapter))\r\n  }\r\n\r\n\r\n  const checkBox = (header) =>  {\r\n\r\n    const checked = isHeaderSelected(header)\r\n\r\n    return(\r\n      <Grid.Row key={ 'checkbox_'+header}><Checkbox label={ header } checked = {checked} onChange={handleCheckBoxChange} /></Grid.Row>\r\n    )\r\n  }\r\n\r\n  const chapterContentContainer = (chapter,idx) => {\r\n\r\n    const style = {\r\n      whiteSpace: 'pre-wrap',\r\n      fontFamily: 'Consolas',\r\n      display: isHeaderSelected( chapter.header ) ? '' : 'none'\r\n    }\r\n    return(\r\n      <div>\r\n        <div></div>\r\n        <Header style={ style }>{ chapter.header }</Header>\r\n        <div key={ 'chapter_'+idx } style={ style }  dangerouslySetInnerHTML={{ __html: chapter.content }} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  // (De-)select all\r\n  const toggleSelectAll = () => {\r\n\r\n    if ( selectedChapters.length !== chapterHeaders.length) {\r\n\r\n      setSelectedChapters(chapterHeaders)\r\n\r\n    } else {\r\n\r\n      setSelectedChapters([])\r\n    }\r\n  }\r\n\r\n  return(\r\n\r\n    <Grid columns={2} doubling>     \r\n      <Grid.Column width={4}>\r\n        <Grid.Row>\r\n          <Button onClick={ toggleSelectAll }>{  selectedChapters.length !== chapterHeaders.length ? 'SELECT ALL' : 'DESELECT ALL' }</Button>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <Sticky>\r\n            {\r\n              chapterHeaders.map(checkBox)\r\n            }\r\n          </Sticky>\r\n        </Grid.Row>\r\n      </Grid.Column>\r\n      <Grid.Column width={12}>\r\n        {\r\n          chapters.map((chap,idx) => chapterContentContainer( { content: chap.content.join('\\n'), header: chap.header.result },idx) )\r\n        }\r\n      </Grid.Column>\r\n\r\n    </Grid>\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default WholeOutput","import React, { useState, useEffect } from 'react'\nimport { Container, Sticky } from 'semantic-ui-react'\nimport Navbar from './components/Navbar'\n//import dummydata from './dummydata/dummy.js'\n\nimport {\n  BrowserRouter as Router,\n  Route, Link, Redirect, withRouter\n} from 'react-router-dom'\n\nimport parseOut from './utils/parseOut'\nimport FileLoader from './components/FileLoader'\nimport ModelResults from './components/ModelResults'\nimport WholeOutput from './components/WholeOutput'\n\n\nconst App = () => {\n\n  const [ mplusOutput, setMplusOutput ] = useState(null)\n\n\n  // useEffect(() => { setMplusOutput({ filename: 'dummydata', string: dummydata.raw,parsed: parseOut(dummydata.raw) })  }, [])\n\n\n  const handleFileLoad = (e) => {\n    const fileInput = e.target\n    const file = fileInput.files[0]\n    const reader = new FileReader()\n\n    reader.onload = () =>  {\n      setMplusOutput(\n        {\n          string: reader.result\n          ,filename: fileInput.files[0].name\n          ,parsed: parseOut(reader.result)\n        })\n    }\n\n    reader.readAsText(file,'ISO-881')\n  }\n\n  return (\n    <Container>\n      <Router>\n        <FileLoader mplusOutput = { mplusOutput } handleFileLoad={handleFileLoad}/>\n        <Sticky>\n          <Navbar mplusOutput = { mplusOutput }/>\n        </Sticky>\n        <Route path=\"/wholeoutput\" render={() => <WholeOutput mplusOutput={mplusOutput} />} />\n        <Route path=\"/modelresults\" render={() => <ModelResults results = { mplusOutput !== null ? mplusOutput.parsed.modelResults : null } />} />\n        <Route path=\"/standardizedmodelresults\" render={() => <ModelResults results = { mplusOutput !== null ? mplusOutput.parsed.standardizedModelResults : null } />} />\n      </Router>\n    </Container>\n  )\n}\nexport default App\n","\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport React from 'react'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}