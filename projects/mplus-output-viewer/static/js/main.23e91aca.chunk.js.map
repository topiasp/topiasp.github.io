{"version":3,"sources":["components/Menu.js","utils/extractOccurancesOfRegex.js","utils/extractChapters.js","utils/extractTitle.js","utils/extractNumberOfGroups.js","utils/extractResultTable.js","utils/utils.js","utils/extractModelModIndices.js","utils/extractResidualOutput.js","utils/columnsToRows.js","utils/extractModelFitInformation.js","utils/parseOut.js","components/FileLoader.js","components/CheckboxList.js","components/DownloadCSVbutton.js","components/ResultTable.js","components/ModelResults.js","components/WholeOutput.js","components/ModelFitInformation.js","components/ResidualOutput.js","components/ModelModificationIndices.js","App.js","index.js"],"names":["Menu","mplusOutput","handlePageChange","page","buttonStyle","margin","fontSize","buttonStyleWithBorder","border","style","backgroundColor","position","width","zIndex","top","label","map","opt","Button","key","uuidv4","onClick","extractOccurancesOfRegex","params","regex","idx","occurances","res","exec","string","push","result","id","contentStart","index","length","start","addEnds","obj","arr","end","i","extractChapterContent","headersObj","headers","headerIdx","header","content","substring","split","extractChapters","chapters","filteringRegex","filter","h","test","extractTitle","title","c","toLowerCase","indexOf","undefined","extractNumberOfGroups","StringContainingNumberOfGroups","match","replace","ensureCellKeyCount","cell","headercount","keys","values","ExtractTableRows","group","grouptableheaders","join","tablerows","occ","originalTableRows","r","or","row","additionalKey","rowObj","splice","rowAsObject","TableRowsToObject","concat","addKeyToCell","extractResultTable","cells","headerToFind","tableheaders","NumberOfGroups","Error","modelResults","find","chapt","flat","getUniqueFromArray","reduce","elem","Object","getOwnPropertyNames","trimString","s","rowToColumn","obs","pivoted","pivot","entries","e","rows","column","value","trim","extractModelIndicesTable","chapter","modVariables","minimumMIvalue","groupName","subtableheaders","subtableCells","val","grouptable","tablerow","columns","table","a","b","console","log","parseESTIMATED","ESTIMATED_GROUP","chaptersOfEstimated","chap","chapterDivider","parsedMeans","parseMeans","covariances","cov","means","gatherByKey","subtable","str","getTableStructure","getTableValues","parseUNIVARIATETABLE","headerRegex","datarows","minDepth","findIndex","t","tableRows","subtableHeader","tot","cur","rowStart","rowFix","m","mo","o","parameter","statistic","arrayOfObjects","indexOfTableSeparator","col","body","slice","rowKey","colKey","extractResidualOutput","ResidualOutputChapter","chaptersOfResidualOutput","ESTIMATED","UNIVARIATE","PARSED_ESTIMATED","PARSED_UNIVARIATE_SINGLE_TABLE","E","univariateProportions","cellsToGroupComparison","columnsToRows","variables","cellsForGroupComparison","variable","cellForGroupComparison","variableIndex","groupvalues","extractVariableValuesPerGroup","handleModelFitChapter","splitted","extractModelFitInformation","modelInformationChapter","chaptersOfModelInformation","parseOut","mplusoutputstring","parsed","alert","message","standardizedModelResults","groups","modelFitInformation","residualOutput","modelIndices","FileLoader","handleFileLoad","showFileUpload","handleShowFileChange","useState","dragStatus","setDragStatus","dropAreaStyle","background","display","alignItems","justifyContent","transition","padding","Modal","show","onHide","Header","Title","Body","className","onDrop","event","preventDefault","stopPropagation","file","dataTransfer","files","name","target","onDragEnter","onDragOver","onDragLeave","primary","type","onChange","htmlFor","reducer","state","action","initialShowState","CheckboxList","options","handleListChange","useReducer","showlist","dispatch","useEffect","isOptionSelected","option","selectedOptions","handleCheckBoxChange","clickedOption","updatedOptions","angle","borderRadius","boxShadow","marginBottom","checked","downloadCSV","args","data","filename","link","csv","delimiter","Array","isArray","convertArrayOfCellsToCSV","encodeURI","document","createElement","setAttribute","click","DownloadCSVbutton","float","ResultTable","tableFilters","setTableFilters","cellStyle","filterUpdate","Table","filters","everyother","color","dataToCells","ModelResults","results","headersForGroupTable","Container","WholeOutput","selectedChapters","setSelectedChapters","chapterHeaders","isHeaderSelected","clickedChapter","Row","Col","xs","marginLeft","marginTop","whiteSpace","fontFamily","dangerouslySetInnerHTML","__html","chapterContentContainer","ModelFitInformation","info","ob","correlationOrCovarianceTableFromData","pivotedCells","ResidualOutput","output","pivotedMeans","meansTable","propTable","props","manipulateModificationIndicesToTableCells","indices","v","ModelModificationIndices","modelmodificationindices","App","setMplusOutput","setPage","setShowFileUpload","showModal","reader","FileReader","onload","readAsText","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.23e91aca.chunk.js","sourcesContent":["import React from 'react'\r\nimport {  Button } from 'react-bootstrap'\r\n\r\nimport uuidv4 from 'uuid'\r\n\r\nconst Menu = ({ mplusOutput, handlePageChange, page }) => {\r\n  if (mplusOutput === null) {\r\n    return('')\r\n  }\r\n\r\n  const menuoptions = [\r\n    { page: 'wholeoutput',       label: 'Whole output' },\r\n    { page: 'modelfitinformation',  label: 'Model information' },\r\n    { page: 'modelresults',      label: 'Model results' },\r\n    { page: 'stdmodelresults',   label: 'Standardized model results' },\r\n    { page: 'residualoutput',   label: 'Residual output' },\r\n    { page: 'modelmodificationindices', label: 'Model modification indices' }\r\n  ]\r\n\r\n  const buttonStyle = {\r\n    margin: '0.5%',\r\n    fontSize: '80%'\r\n  }\r\n\r\n  const buttonStyleWithBorder = {\r\n    margin: '0.5%',\r\n    fontSize: '80%',\r\n    border: '3px solid white'\r\n  }\r\n\r\n  const menuBarStyle = {\r\n    backgroundColor: 'black',\r\n    position: 'fixed',\r\n    width: '100%',\r\n    zIndex: 999,\r\n    top: 0\r\n  }\r\n\r\n\r\n  return(\r\n    <div style={menuBarStyle}>\r\n      {\r\n        menuoptions.map(opt => <Button style={ opt.page === page ? buttonStyleWithBorder : buttonStyle } key={uuidv4()} onClick={ () =>  handlePageChange(opt.page)  }>{ opt.label }</Button>)\r\n      }\r\n    </div>\r\n\r\n  )\r\n}\r\nexport default Menu","\r\n\r\n\r\n// Gets hits of given regex (location)\r\nconst extractOccurancesOfRegex = (params) => {\r\n\r\n  const regex = params.regex\r\n  let idx = 0\r\n\r\n  const occurances = []\r\n  let res = ''\r\n  while ((res = regex.exec(params.string)) !== null) {\r\n    occurances.push({ result: res[0], id: 'C'+idx, contentStart: res.index + res[0].length, start: res.index  })\r\n    idx++\r\n  }\r\n\r\n  return { occurances: occurances,\r\n    string: params.string\r\n  }\r\n}\r\n\r\n\r\nexport default extractOccurancesOfRegex","\r\n\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n\r\n\r\n// Adds the end of string to hits gotten by extractOccurencesOfRegec\r\nconst addEnds = (obj) => {\r\n\r\n\r\n  let arr = obj.occurances\r\n  arr[arr.length-1].end = obj.string.length\r\n\r\n  for (let i = (arr.length-2); i >= 0;i--) {\r\n    arr[i].end = arr[(i+1)].start-1\r\n  }\r\n  obj.occurances = arr\r\n\r\n  return obj\r\n}\r\n\r\n// Gets strings between headers (extracted through extractOccurencesOfRegec)\r\nconst extractChapterContent = (headersObj) => {\r\n\r\n  let headers =  headersObj.occurances\r\n  const string = headersObj.string\r\n\r\n  const arr = []\r\n  for (let headerIdx in headers) {\r\n    let header = headers[headerIdx]\r\n    arr.push({\r\n      header: header,\r\n      id: header.id,\r\n      content: string.substring(header.contentStart,header.end).split('\\n')\r\n    })\r\n  }\r\n\r\n  headersObj.occurances = arr\r\n  return(headersObj)\r\n}\r\n\r\n// Brings them all together\r\n\r\nconst extractChapters = (params) => {\r\n\r\n\r\n\r\n  let headers = extractOccurancesOfRegex({ string: params.string, start: 0, chapters: [], regex: params.regex })\r\n\r\n  if (params.filteringRegex) {\r\n    headers.occurances = headers.occurances.filter((h) => !params.filteringRegex.test(h.result))\r\n  }\r\n\r\n  headers = addEnds(headers)\r\n\r\n  let chapters = extractChapterContent(headers)\r\n  return chapters.occurances\r\n\r\n}\r\n\r\nexport { extractChapters, extractChapterContent, addEnds }","const extractTitle = (chapters) => {\r\n  const title = chapters[0].content.filter((c) => c.toLowerCase().indexOf('title:')>-1)\r\n  return title === undefined ? undefined : title[0]\r\n}\r\n\r\nexport default extractTitle","const extractNumberOfGroups = (string) => {\r\n  const RegExpNumberOfGroups = /(Number of groups[ ]+[0-9]{1,2})/\r\n  const StringContainingNumberOfGroups =  string.match(RegExpNumberOfGroups)\r\n  return StringContainingNumberOfGroups ===  null ? undefined : StringContainingNumberOfGroups[0].replace(/[^0-9]/g,'') * 1\r\n}\r\n\r\nexport default extractNumberOfGroups","\r\nimport { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\n\r\n\r\n// Ensure that each cell has as many keys as there are headers in the table\r\n\r\nconst ensureCellKeyCount = ({ cell, headercount }) => {\r\n\r\n  while (cell.keys.length + cell.values.length < headercount) {\r\n    cell.values.push('')\r\n  }\r\n  return cell\r\n}\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells = rowString.split(/([A-Z_\\-0-9.$]+)/).filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Group specific actions\r\n  let grouptableheaders = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  grouptableheaders = addEnds(grouptableheaders)\r\n\r\n  let grouptables = extractChapterContent(grouptableheaders)\r\n\r\n  let tablerows = grouptables.occurances.map((occ) => TableRowsToObject(occ))\r\n\r\n  // Add group as key to cells\r\n  const addKeyToCell = (cell,key) => {\r\n    cell.keys  =  [key].concat(cell.keys)\r\n    return cell\r\n  }\r\n  tablerows = tablerows.map((row) => row.map((cell) => addKeyToCell(cell,group.header.result)))\r\n\r\n  return(tablerows)\r\n}\r\n\r\n\r\n\r\nconst extractResultTable = (params) => {\r\n\r\n  const chapters = params.chapters\r\n  const headerToFind = params.headerToFind\r\n  const tableheaders = params.tableheaders\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (chapters === undefined | chapters === null) {\r\n    throw new Error('MODEL RESULTS chapter not found!')\r\n  }\r\n\r\n  let cells\r\n\r\n  // Find the chapter that has the \"headerToFind\" (eg. MODEL RESULTS)\r\n  let modelResults = chapters.find((chapt) => chapt.header.result === headerToFind)\r\n\r\n  // If output has groups:\r\n  if (NumberOfGroups !== undefined & NumberOfGroups>1)  {\r\n\r\n\r\n    // Find group specific parts of the output\r\n    const RegExpGroup =  /Group [A-Z_]+$/gm\r\n    const groups = extractChapters({ string: modelResults.content.join('\\n'), regex: RegExpGroup })\r\n\r\n    const grouptablerows = groups.map((group) => ExtractTableRows(group))\r\n    cells = grouptablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n\r\n  // If output does not have gtroups\r\n  } else {\r\n\r\n    // This function works as it similar to number of groups = 1\r\n    let tablerows = ExtractTableRows(modelResults)\r\n    cells = tablerows.map((arr) => arr.flat()).flat()\r\n    cells = cells.map((cell) => ensureCellKeyCount({ cell: cell, headercount: tableheaders.length }))\r\n  }\r\n  return(cells)\r\n\r\n}\r\n\r\nexport default extractResultTable","const getUniqueFromArray = (arr) => {\r\n\r\n  let f = (obj,elem) => {\r\n    obj[elem] = 1\r\n    return obj\r\n  }\r\n  const obj =   arr.reduce(f,{})\r\n\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\n\r\nconst trimString = (s) => {\r\n  return s.replace(/^[ ]{1,}/,'').replace(/[ ]{1,}$/,'')\r\n}\r\n\r\n\r\nconst rowToColumn = (obs) => {\r\n\r\n  const pivoted = obs.reduce(pivot,{})\r\n  return Object.entries(pivoted).map(e => e[1])\r\n\r\n\r\n}\r\n\r\n\r\nconst pivot = (obj,elem) => {\r\n\r\n  let key = elem.rows.join('_') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      rows: elem.rows,\r\n      values: [\r\n        {\r\n          column: elem.column,\r\n          values: elem.value\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      column: elem.column,\r\n      values: elem.value\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\nconst joinTwoArrays = (a,b) => {\r\n\r\n  if ( a.length !== b.length  ) {\r\n    console.log('warning: array lengths differ in joinToArrays. Combining only lenght of shorter array.')\r\n  }\r\n  const shorterArray = a.length <= b.length ? [...a] : [...b]\r\n\r\n  return shorterArray.map((a,idx) => [a,b[idx]])\r\n}\r\n\r\n\r\nexport { getUniqueFromArray, trimString, rowToColumn, joinTwoArrays }","import { extractChapters, addEnds, extractChapterContent } from './extractChapters'\r\nimport extractOccurancesOfRegex from './extractOccurancesOfRegex'\r\nimport { joinTwoArrays } from '../utils/utils'\r\n\r\n\r\n\r\n// Transform plain text table rows to JS-objects\r\n\r\nvar TableRowsToObject = (occurances) => {\r\n\r\n  const getTableCellsFromRow = (rowString) => {\r\n    let cells =   rowString\r\n      .split(/([0-9]+\\.[0-9]+)/)\r\n      .filter((cell) => /[A-Z0-9]/.test(cell)    )\r\n      .map(cell => cell.trim())\r\n    return(cells)\r\n  }\r\n\r\n\r\n  let originalTableRows =  occurances.content.map((r) =>   getTableCellsFromRow(r)).filter((r) => r.length>0)\r\n\r\n\r\n\r\n  const rowAsObject = (row,additionalKey) => {\r\n    const rowObj = {}\r\n    rowObj.keys = [ additionalKey, row[0] ]\r\n    row.splice(0,1)\r\n    rowObj.values = row\r\n    return rowObj\r\n  }\r\n\r\n  const tableRows = originalTableRows.map((or) => rowAsObject(or,occurances.header.result))\r\n  return(tableRows)\r\n}\r\n\r\n\r\n\r\n\r\n// Extract rows of table\r\nconst ExtractTableRows = (group) => {\r\n\r\n  // Return if no mod indices\r\n  // .includes is dangerous since must account for newline characters\r\n  if ( group.content.find(c => c.indexOf('No modification indices above the minimum value')>-1) ) {\r\n    return(undefined)\r\n  }\r\n\r\n  const groupName = group.header.result.replace('Group ','')\r\n\r\n  group.content = group.content.filter(c => c.length>1)\r\n\r\n  let  subtableheaders  = extractOccurancesOfRegex({ string: group.content.join('\\n'), start: 0, chapters: [], regex: /(.+[A-Za-z]$)/gm })\r\n  subtableheaders       = addEnds(subtableheaders)\r\n  const subtables       = extractChapterContent(subtableheaders)\r\n\r\n  let subtableCells     = subtables.occurances.map(TableRowsToObject).flat().map(cell => ({ ...cell, values: cell.values.filter(val => !(/[^0-9.-]/.test(val))) }) )\r\n  subtableCells = subtableCells.map(cell => ({ ...cell, keys: [groupName].concat(cell.keys) }) )\r\n\r\n\r\n  return( subtableCells )\r\n}\r\n\r\n\r\n\r\nconst extractModelIndicesTable = (params) => {\r\n\r\n  const chapter = params.chapter\r\n  const NumberOfGroups = params.NumberOfGroups\r\n\r\n  if (NumberOfGroups === 1) {\r\n    // Apparently, if no groups in analysis -> no mod indices\r\n    return undefined\r\n  }\r\n\r\n\r\n  const modVariables =  ['M.I.'  ,'E.P.C.' ,'Std E.P.C.' ,'StdYX E.P.C.']\r\n\r\n\r\n  if (chapter === undefined | chapter === null) {\r\n    throw new Error('MODEL MODIFICATION INDICES chapter not found!')\r\n  }\r\n\r\n  // Find limit for minimum M.I. value\r\n  const minimumMIvalue = chapter.content.find(row => row.indexOf('Minimum M.I. value for printing the modification index')>-1)\r\n\r\n\r\n  // Find group specific parts of the output\r\n  const RegExpGroup =  /Group [A-Z_]+$/gm\r\n  const groups = extractChapters({ string: chapter.content.join('\\n'), regex: RegExpGroup })\r\n\r\n  const cells = groups\r\n    .map((group) => ExtractTableRows(group))\r\n    .filter(grouptable => grouptable !== undefined)\r\n    .flat()\r\n    .map(tablerow => ({ ...tablerow, columns: modVariables }))\r\n    .map(table => {\r\n      return joinTwoArrays(table.columns,table.values).map(arr => ({ keys: table.keys.concat(arr[0]), value: arr[1]   }))\r\n    }).flat()\r\n\r\n\r\n  return({\r\n    cells,\r\n    minimumMIvalue\r\n  })\r\n\r\n}\r\n\r\nexport default extractModelIndicesTable","import { extractChapters } from './extractChapters'\r\n\r\n/*\r\nThe structure of residual output is as follows:\r\n   ESTIMATED MODEL AND RESIDUALS (OBSERVED - ESTIMATED) FOR groupname\r\n         Model Estimated Means/Intercepts/Thresholds\r\n         Residuals for Means/Intercepts/Thresholds\r\n         Standardized Residuals (z-scores) for Means/Intercepts/Threshold\r\n         Normalized Residuals for Means/Intercepts/Threshold\r\n         Model Estimated Covariances/Correlations/Residual Correlations\r\n      \t Model Estimated Correlations/Residual Correlations\r\n         Residuals for Covariances/Correlations/Residual Correlations\r\n         Residuals for Correlations/Residual Correlations\r\n\r\n   UNIVARIATE PROPORTIONS FOR CATEGORICAL VARIABLES FOR groupname\r\n*/\r\n\r\nconst parseESTIMATED = (ESTIMATED_GROUP) => {\r\n\r\n\r\n  const params = {\r\n    string: ESTIMATED_GROUP.content.join('\\n'),\r\n    regex: /[A-Z][a-z][a-zA-Z/ ()\\\\-]{1,}$/gm\r\n  }\r\n  let chaptersOfEstimated = extractChapters(params)\r\n\r\n\r\n  let group = /FOR (.+$)/.exec(ESTIMATED_GROUP.header.result) // Get group name from header text\r\n\r\n  if (group !== null) { // If no group is found, assume the analysis was not grouped\r\n\r\n    group = group[1] // Cant be done earlier -> would result to error with undefined\r\n    // Add group to each chapter\r\n    chaptersOfEstimated = chaptersOfEstimated.map(chap => {\r\n      return { ...chap, group: group }\r\n    })\r\n  }\r\n\r\n\r\n  // Separate based on nature of table\r\n  //  1. Means: Model Estimated Means.. & Residuals for means\r\n  //  2. Covariances: These are cross-tabulations\r\n\r\n  const chapterDivider = (chap) => /Residuals.+for Means/.test(chap.header.result) |  chap.header.result.indexOf('Model Estimated Means') > -1\r\n\r\n  const means = chaptersOfEstimated.filter(chapterDivider)\r\n  const parsedMeans = means.map(parseMeans)\r\n\r\n\r\n  let covariances =  chaptersOfEstimated.filter(chap => !chapterDivider(chap))\r\n\r\n  covariances = covariances.map(cov => {\r\n    return { ...cov, key: cov.header.result }  // Add key for gatherByKey\r\n  })\r\n  // this gathers covarience/correlation tables that are spread into several tables in the output\r\n  const  gatheredCovariances = gatherByKey(covariances)\r\n\r\n\r\n  let parsedCovariances =   gatheredCovariances.map(table => {\r\n    return {\r\n      header: table.header,\r\n      key: table.header, // Prepare for gatherByKey\r\n      content:  table.content.map(subtable => {\r\n        const str = getTableStructure(subtable)\r\n        return getTableValues(str)\r\n      }).flat()\r\n      // add group\r\n        .map(obs => {\r\n          return { ...obs,group: group, keys: obs.keys }\r\n        })\r\n    }\r\n  })\r\n\r\n\r\n  return {\r\n    means: parsedMeans,\r\n    covariances: parsedCovariances\r\n  }\r\n}\r\n\r\n\r\nvar parseUNIVARIATETABLE = table => {\r\n\r\n  var rows = table.content.filter(row => row!=='')\r\n  var group = /FOR ([^ ]+)$/.exec(table.header.result) // Get group name from header text. It is assumed that group name does not contain white spaces\r\n\r\n  group = group ? group[1] : 'Unknown group' //\r\n\r\n  var headerRegex = /Variable.+Observed/\r\n\r\n  var header = rows.find(row => row.match(headerRegex))\r\n  var datarows = rows.filter(row => !row.match(headerRegex))\r\n \r\n  // Count the number of blanks\r\n  // This tells us the indentation of rows\r\n  var rowDepth = datarows.map(r => r.split(' ').findIndex(c => c!==''))\r\n  var minDepth = rowDepth.reduce((t,c) => c<t ? c : t)\r\n  // find and mark subtableheaders\r\n  datarows = datarows.map(row => ({ content: row, subtableHeader: row.split(' ').findIndex(c => c!=='')  === minDepth    })  )\r\n\r\n  var subtables = datarows.reduce((tot,cur) => {\r\n\r\n    if (cur.subtableHeader) {\r\n      return( tot.concat([{ header: cur.content.replace(/^[ ]+/,''), rows: [] }]) )\r\n    }\r\n\r\n    tot[ (tot.length-1)].rows.push( cur )\r\n    return(tot)\r\n\r\n  } ,[])\r\n\r\n  // Create table rows: group, subtable header, values\r\n  const tableRows = subtables.map(subtable => {\r\n    const rowStart = [ group,subtable.header ]\r\n\r\n    return subtable.rows.map(row => {\r\n      // Category 1 -> Category1. Eases splitting\r\n      const rowFix = row.content.replace(/Category[ ]+([0-9]?)/,'Category$1')\r\n\r\n      return rowStart.concat(  rowFix.split(/[ ]+/gi).filter(val => val !== '') )\r\n    })\r\n\r\n  })\r\n\r\n  return {\r\n    headers: header.split(/[ ]{2,}/g).filter(val => val !== ''),\r\n    cells: tableRows\r\n  }\r\n}\r\n\r\n\r\nconst parseMeans = (means) => {\r\n\r\n  const r =  means.content\r\n    .filter(t => /[^ ]/.test(t))\r\n    .map(m => m.split(' ').filter(res => res.length>1))\r\n    .map(m => m.filter(mo => /[0-9A-Z]/.test(mo) )).filter(m => m.length>0)\r\n\r\n  return r[0].map((o,idx) => {\r\n    return { parameter: o, value: r[1][idx], group: means.group, statistic: means.header.result }\r\n  })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst extractResidualOutput = (ResidualOutputChapter) => {\r\n\r\n\r\n  const params = {\r\n    string: ResidualOutputChapter.chapter.content.join('\\n'),\r\n    regex:  ResidualOutputChapter.NumberOfGroups > 1 ?   /^[A-Z ()-]{2,}FOR.+$/gm : /^[A-Z ()-]+$/gm\r\n  }\r\n  const chaptersOfResidualOutput = extractChapters(params)\r\n\r\n\r\n  // Divide into two for ease\r\n  const ESTIMATED = chaptersOfResidualOutput.filter(chap => chap.header.result.indexOf('ESTIMATED MODEL AND RESIDUAL') > -1)\r\n  const UNIVARIATE = chaptersOfResidualOutput.filter(chap => chap.header.result.indexOf('ESTIMATED MODEL AND RESIDUAL') === -1)\r\n\r\n  const PARSED_ESTIMATED  = ESTIMATED.map(parseESTIMATED)\r\n  const PARSED_UNIVARIATE = UNIVARIATE.map(parseUNIVARIATETABLE)\r\n  const PARSED_UNIVARIATE_SINGLE_TABLE = PARSED_UNIVARIATE.reduce((tot,cur) => (!tot) ? cur : { ...tot, cells: tot.cells.concat(cur.cells) }, undefined)\r\n\r\n\r\n\r\n  return {\r\n    means: PARSED_ESTIMATED.map(E => E.means.flat()).flat(),\r\n    covariances: gatherByKey( PARSED_ESTIMATED.map(E => E.covariances).flat() ),\r\n    univariateProportions: {\r\n      ...PARSED_UNIVARIATE_SINGLE_TABLE\r\n      ,cells: PARSED_UNIVARIATE_SINGLE_TABLE.cells.flat()\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst gatherByKey = arrayOfObjects => {\r\n\r\n  const gatherer = (obj,elem) => {\r\n\r\n    let key = elem.key // Defines the key to distinguish tables\r\n\r\n    if (obj[key]===undefined) {\r\n\r\n      obj[key] = {\r\n        header: key,\r\n        content: [elem.content]\r\n      }\r\n\r\n    } else {\r\n\r\n      obj[key].content.push(elem.content)\r\n    }\r\n\r\n    return obj\r\n  }\r\n\r\n  return Object.entries(arrayOfObjects.reduce(gatherer,{})).map(arr => arr[1])\r\n}\r\n\r\n\r\n\r\n\r\nconst getTableStructure = (table) => {\r\n\r\n  // Remove empty\r\n  table = table.filter(row => row.replace('\\r','').length>0) // Contains new lines\r\n\r\n  // Finds the index of the row that separates header row from table body\r\n  const indexOfTableSeparator = table.findIndex(row => /^[_ \\r]*$/.test(row))\r\n\r\n  // get columns\r\n  const columns = table[(indexOfTableSeparator-1)].split(/[ ]{1,}/).filter(col => col.length>1)\r\n\r\n  // table body\r\n  let body = table.slice((indexOfTableSeparator+1),)\r\n\r\n  return ({\r\n    columns: columns,\r\n    body: body\r\n  })\r\n\r\n}\r\n\r\n\r\nconst getTableValues = ({ body, columns }) => {\r\n\r\n  const rowsSplitted = body.filter(row => /[0-9]/.test(row)).map(row => row.split(/[ ]{1,}/).filter(cell => cell.length>0))\r\n\r\n  const assignColumnNamesToValues = (values) => {\r\n\r\n    const rowKey = values[0]\r\n\r\n    return values.slice(1,).map((val,idx) => {\r\n      return {\r\n        rowKey: rowKey,\r\n        colKey: columns[idx],\r\n        keys: [rowKey,columns[idx]],\r\n        value: val\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  return rowsSplitted.map(assignColumnNamesToValues).flat()\r\n\r\n}\r\n\r\n\r\nexport default extractResidualOutput","\r\n\r\n\r\n\r\nconst cellsToGroupComparison = (obj,elem) => {\r\n\r\n  let key = elem.keys.slice(1,3).join('') // Defines the 'key' to distinguish variables\r\n\r\n  if (obj[key]===undefined) {\r\n\r\n    obj[key] = {\r\n      keys: elem.keys.slice(1,3),\r\n      values: [\r\n        {\r\n          group: elem.keys[0],\r\n          values: elem.values\r\n        }\r\n      ]\r\n    }\r\n\r\n  } else {\r\n\r\n    obj[key].values.push({\r\n      group: elem.keys[0],\r\n      values: elem.values\r\n\r\n    })\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n\r\n\r\n\r\nconst columnsToRows = ({ cells, variables }) => {\r\n\r\n  let cellsForGroupComparison =  Object.values( cells.reduce(cellsToGroupComparison,{}) )\r\n\r\n  const extractVariableValuesPerGroup = (cellForGroupComparison,variable,variableIndex) => {\r\n    return cellForGroupComparison.values.map((groupvalues) =>  { return({ keys: cellForGroupComparison.keys.concat(variable),group: groupvalues.group,  value: groupvalues.values[variableIndex] }) } )\r\n  }\r\n\r\n  cellsForGroupComparison = variables.map((variable,idx) => {\r\n    return cellsForGroupComparison.map((cell) => extractVariableValuesPerGroup(cell,variable,idx))\r\n  }).flat()\r\n\r\n  return cellsForGroupComparison//.flat()\r\n}\r\n\r\n\r\nexport default columnsToRows\r\n","\r\n\r\nimport { extractChapters } from './extractChapters'\r\nimport { trimString } from './utils'\r\n\r\n\r\n\r\n// this handles (extracst numbers and titles) single chapter in model fit information\r\nconst handleModelFitChapter = (chap) => {\r\n\r\n\r\n  const header = chap.header.result\r\n\r\n  const handleRow = (row) => {\r\n    // extract number and name of statistic\r\n    // by splitting with two or more spaces\r\n    const splitted = trimString(row).split(/[ ]{2,}/)\r\n    const statistic =  trimString(splitted[0])\r\n\r\n    return({\r\n      header: header,\r\n      statistic:  statistic,\r\n      value: splitted.length === 1 ? -1 : splitted.slice(1,).map(s => trimString(s)).join(', ')//splittetrimString(splitted[1])\r\n    })\r\n\r\n  }\r\n\r\n  return  chap.content.map(handleRow)\r\n\r\n}\r\n\r\n\r\n// modelInformationChapter = temp1.parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION')\r\n\r\nconst extractModelFitInformation = (modelInformationChapter) => {\r\n\r\n\r\n\r\n  // The model fit information is structured as follows:\r\n  // HEADER ROW\r\n  //      NAME_OF_STATISTIC       VALUE_OF_STATISTIC\r\n  // with exception of the first statistic 'Number of free parameters'\r\n\r\n\r\n  // First get chapters of model fit information based on header rows\r\n  const params = {\r\n    string: modelInformationChapter.content.join('\\n'),\r\n    regex: /^[A-Z*].+$/gm\r\n  }\r\n  let chaptersOfModelInformation = extractChapters(params)\r\n\r\n  // MANIPULATIONS\r\n\r\n  // 1. Remove useless chapter starting with *\r\n  chaptersOfModelInformation = chaptersOfModelInformation.filter(chap => chap.header.result.substring(0,1)!=='*')\r\n\r\n  // 2. Handle exception of first statistic and clean empty objects from content array\r\n  chaptersOfModelInformation = chaptersOfModelInformation.map(chap =>  {\r\n    chap.content = chap.content.filter(c => c.length>1)\r\n\r\n    if (chap.content.length === 0) {\r\n\r\n      chap.content = [ chap.header.result ] // if empty, replace w/ header\r\n      chap.header.result =  trimString( chap.header.result.replace(/[0-9]{1,}/,'') )//  removing any numbers from header (for exception Number of free parameters') // \r\n    }\r\n    return chap\r\n  })\r\n\r\n  // Get statistics\r\n  const statistics = chaptersOfModelInformation.map( handleModelFitChapter )\r\n\r\n  return statistics.flat()\r\n\r\n}\r\n\r\nexport default extractModelFitInformation\r\n","\r\nimport { extractChapters } from './extractChapters'\r\nimport extractTitle    from './extractTitle'\r\nimport extractNumberOfGroups from './extractNumberOfGroups'\r\nimport extractResultTable from './extractResultTable'\r\nimport extractModelIndicesTable from './extractModelModIndices'\r\nimport extractResidualOutput from './extractResidualOutput'\r\nimport columnsToRows from './columnsToRows'\r\nimport extractModelFitInformation from './extractModelFitInformation'\r\n\r\nimport { getUniqueFromArray } from './utils'\r\n\r\nconst parseOut = (mplusoutputstring) => {\r\n\r\n  const parsed = {}\r\n\r\n  // Extract main chapters\r\n  const RegExpChapter = /(^[A-Z][A-Z 0-9-]+[A-Z]$)/gm\r\n  try {\r\n    parsed.chapters =  extractChapters({ string: mplusoutputstring, regex: RegExpChapter, filteringRegex: / (BY|WITH|ON)$/m  })\r\n    parsed.title    =  extractTitle(parsed.chapters)\r\n    parsed.NumberOfGroups = extractNumberOfGroups(mplusoutputstring)\r\n  } catch(e) {\r\n    console.log('Error with extracting chapters: ', e)\r\n  }\r\n\r\n  // Create variables\r\n  let header\r\n  let cells\r\n  let tableheaders\r\n  let variables\r\n\r\n  // Extract model results\r\n  try {\r\n    variables = ['Estimate','S.E.','Est/S.E.','P-Value']\r\n    tableheaders = ['Column1','Column2','Column3'].concat(variables)\r\n\r\n    header = 'MODEL RESULTS'\r\n\r\n    cells = extractResultTable(\r\n      { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n    )\r\n\r\n    parsed.modelResults = {\r\n      header: header,\r\n      cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n    }\r\n  } catch(e) {\r\n    alert('Error extracting model results')\r\n    console.log('Error with model results: ', e.message)\r\n  }\r\n\r\n  // Extract standardized model results\r\n  try {\r\n    header = 'STANDARDIZED MODEL RESULTS'\r\n\r\n    cells = extractResultTable(\r\n      { chapters: parsed.chapters, headerToFind: header,tableheaders: tableheaders, NumberOfGroups: parsed.NumberOfGroups  }\r\n    )\r\n\r\n    parsed.standardizedModelResults = {\r\n      header: header,\r\n      cells: columnsToRows({ cells: cells, variables: variables }) // Pivot columns to rows\r\n    }\r\n  } catch(e) {\r\n    console.log('Error with standardized model results: ', e.message)\r\n  }\r\n\r\n  // Get group names from model results\r\n  try {\r\n    parsed.groups = getUniqueFromArray( parsed.modelResults.cells.flat().map((c) => c.group ) )\r\n  } catch(e) {\r\n    console.log('Error extracting group names. Model results: ',parsed.modelResults)\r\n  }\r\n  // extractModelFitInformation\r\n  try {\r\n    parsed.modelFitInformation = extractModelFitInformation(parsed.chapters.find(chap => chap.header.result==='MODEL FIT INFORMATION'))\r\n  } catch(e) {\r\n    console.log('Error with model fit information: ', e.message)\r\n  }\r\n\r\n  // extractResidualOutput\r\n  try {\r\n    parsed.residualOutput = extractResidualOutput({ chapter: parsed.chapters.find(chap => chap.header.result==='RESIDUAL OUTPUT'), NumberOfGroups: parsed.NumberOfGroups })\r\n  } catch(e) {\r\n    console.log('Error with residual output: ', e.message)\r\n  }\r\n\r\n  // extract model mod indices\r\n  try {\r\n    parsed.modelIndices = extractModelIndicesTable(\r\n      { chapter: parsed.chapters.find(chap => chap.header.result==='MODEL MODIFICATION INDICES')\r\n        , NumberOfGroups: parsed.NumberOfGroups\r\n      })\r\n  } catch(e) {\r\n    console.log('Error with mod indices: ', e.message)\r\n  }\r\n\r\n  return parsed\r\n}\r\n\r\nexport default parseOut","import React, { useState } from 'react'\r\n\r\nimport {  Button, Modal } from 'react-bootstrap'\r\n\r\n\r\nconst FileLoader = (  { handleFileLoad, showFileUpload, handleShowFileChange }) => {\r\n\r\n\r\n  const initialDragStatus = 'Drag an .out -file here'\r\n  const [dragStatus,setDragStatus] = useState(initialDragStatus)\r\n\r\n  if (!showFileUpload) {\r\n    return('')\r\n  }\r\n\r\n  const inputStyle = {\r\n    display: 'none'\r\n  }\r\n\r\n\r\n  const handleUpload = () => handleShowFileChange()\r\n\r\n\r\n  const dropAreaStyle = {\r\n    background: '#efefef' ,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    border: 'solid 3px transparent',\r\n    transition: 'all 250ms ease-in-out 0s',\r\n    position: 'relative',\r\n    padding: '35px',\r\n    fontSize: '120%',\r\n  }\r\n\r\n  // Drag and drop functionality\r\n  const onDragEnter = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    setDragStatus('Drop file')\r\n    event.target.style.border = 'dashed black 3px'\r\n  }\r\n  const onDragLeave =  event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    setDragStatus(initialDragStatus)\r\n    event.target.style.border = dropAreaStyle.border\r\n  }\r\n\r\n  const doNothing = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n  }\r\n\r\n  const onDrop = event => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    const file = event.dataTransfer.files[0]\r\n\r\n    if ( file.name.toLowerCase().match(/.out$/) ) {\r\n\r\n      handleFileLoad(file)\r\n\r\n    } else {\r\n\r\n      alert('Not an .out -file!')\r\n      setDragStatus(initialDragStatus)\r\n      event.target.style.border = dropAreaStyle.border\r\n\r\n    }\r\n  }\r\n\r\n  return(\r\n\r\n    <Modal show={true}onHide={handleUpload}>\r\n      <Modal.Header>\r\n        <Modal.Title>Mplus output viewer</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div\r\n          className=\"DropArea\"\r\n          style={dropAreaStyle}\r\n          onDrop={onDrop}\r\n          onDragEnter={onDragEnter}\r\n          onDragOver={doNothing}\r\n          onDragLeave ={onDragLeave}\r\n        >\r\n          { dragStatus }\r\n        </div>\r\n\r\n      </Modal.Body>\r\n\r\n      <Button primary={'true'} >\r\n        <input id=\"file-upload\" type=\"file\" style={inputStyle} onChange={ (e) => handleFileLoad(e.target.files[0]) }></input>\r\n        <label htmlFor=\"file-upload\" className=\"custom-file-upload\"  style={{ margin: '0px' }}>Or use the file explorer</label>\r\n      </Button>\r\n\r\n    </Modal>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default FileLoader","import React, { useReducer, useEffect } from 'react'\r\n\r\n\r\nimport { FaAngleRight,FaAngleDown } from 'react-icons/fa'\r\n\r\n\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n  case 'show':\r\n    return { display: 'block', show: true }\r\n  case 'hide':\r\n    return { display: 'none', show: false }\r\n  default:\r\n    throw new Error()\r\n  }\r\n}\r\n\r\nconst initialShowState = () =>  { return({ display: 'block', show: true } )}\r\n\r\n\r\nconst CheckboxList = ({ options, handleListChange }) => {\r\n\r\n  const [showlist, dispatch] = useReducer(reducer,initialShowState)\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: 'hide' })\r\n  },[])\r\n\r\n  // Shorthand for checking if option is selected\r\n  const isOptionSelected = (option) => options.selectedOptions.indexOf(option)>-1\r\n\r\n  // On check change\r\n  const handleCheckBoxChange = (e) => {\r\n    const clickedOption = e.target.value\r\n    const isSelected = isOptionSelected(clickedOption)\r\n    const updatedOptions = isSelected ? options.selectedOptions.filter(opt => opt !== clickedOption) :  options.selectedOptions.concat(clickedOption)\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: updatedOptions\r\n    })\r\n  }\r\n\r\n  const areAllSelected = () => options.selectedOptions === options.values\r\n  // Select all\r\n  const toggleSelectAll = () => {\r\n\r\n    handleListChange({\r\n      label: options.label,\r\n      selectedOptions: areAllSelected() ? [] : options.values\r\n    })\r\n\r\n  }\r\n\r\n\r\n  // Toggle list\r\n\r\n  const toggleListDisplay = () => {\r\n    if (showlist.show) {\r\n      dispatch({ type: 'hide' })\r\n    } else {\r\n      dispatch({ type: 'show' })\r\n    }\r\n  }\r\n\r\n\r\n  const listStyle = {\r\n\r\n    position: 'absolute',\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    border: '1px solid black',\r\n    boxShadow: '1px 1px'\r\n  }\r\n\r\n  const buttonStyle = {\r\n\r\n    border: 'none',\r\n    borderRadius: '5px',\r\n    backgroundColor: 'white',\r\n    padding: '3px',\r\n    margin: '2px'\r\n  }\r\n\r\n  const angle = showlist ? <FaAngleDown/> : <FaAngleRight/>\r\n\r\n  const selectAllButtonStyle = {\r\n    border: '1px solid black',\r\n    backgroundColor: 'white',\r\n    marginBottom: '10px'\r\n  }\r\n\r\n\r\n  return(\r\n    <div className={'buttonContainer'}>\r\n      <button style={buttonStyle} onClick={toggleListDisplay}>{ options.label}{angle}</button>\r\n      <div style={listStyle} className={'hidden'}  >\r\n        <button style={selectAllButtonStyle} onClick={ toggleSelectAll }>(De-)select all</button>\r\n        {\r\n          options.values.map((val, idx) => {\r\n            const checked = isOptionSelected(val)\r\n            return(\r\n              <div key={idx + val}><input type='checkbox' checked={checked} onChange={handleCheckBoxChange}  value={val} />{ val}</div>\r\n            )\r\n          })\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default CheckboxList","import React from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst convertArrayOfCellsToCSV = (args) => {\r\n\r\n  let headers,data,delimiter\r\n\r\n  headers = args.headers\r\n  data    = args.data\r\n  delimiter = args.delimiter || ';'\r\n\r\n  let result = ''\r\n\r\n  result += headers.join(delimiter) + '\\n'\r\n\r\n\r\n  result += data.map((cell) => {\r\n    if (!Array.isArray(cell)) {\r\n      return cell.join(delimiter)\r\n    }\r\n    return cell.join(delimiter)\r\n  }).join('\\n')\r\n\r\n  return result\r\n}\r\n\r\nconst downloadCSV = (args) => {\r\n\r\n\r\n  let data, filename, link\r\n  let csv = convertArrayOfCellsToCSV(args)\r\n  if (csv === null) return\r\n\r\n\r\n  filename = args.filename || 'export.csv'\r\n\r\n  if (!csv.match(/^data:text\\/csv/i)) {\r\n    csv = 'data:text/csv;charset=utf-8,' + csv\r\n  }\r\n  data = encodeURI(csv)\r\n\r\n  link = document.createElement('a')\r\n  link.setAttribute('href', data)\r\n  link.setAttribute('download', filename)\r\n  link.click()\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst DownloadCSVbutton = ({ params, float }) => {\r\n\r\n  if (params === null) {\r\n    return('')\r\n  }\r\n\r\n  const data = params.data\r\n  const headers = params.headers\r\n\r\n  const handleClick = () => {\r\n    downloadCSV({ data: data, headers: headers })\r\n\r\n\r\n  }\r\n\r\n\r\n  const style = {\r\n    margin: '0.5%',\r\n    float: 'right',\r\n    fontSize: '75%',\r\n    padding: 3\r\n  }\r\n\r\n  return(\r\n    <Button\r\n      style = { style }\r\n      primary={'true'}\r\n      onClick={ handleClick }\r\n    >\r\n      Download as CSV\r\n    </Button>\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default DownloadCSVbutton","import React,{ useState } from 'react'\r\nimport { Table } from 'semantic-ui-react'\r\n\r\nimport uuidv4 from 'uuid'\r\nimport CheckboxList from './CheckboxList'\r\n\r\nimport DownloadCSVbutton from './DownloadCSVbutton'\r\n\r\n// Componente\r\n\r\n\r\nconst ResultTable = ({ headers, cells }) => {\r\n\r\n  const [tableFilters, setTableFilters] = useState({})\r\n\r\n  const tableStyle = { fontSize: '75%',padding: '1px' }\r\n  const cellStyle = { padding: 2 }\r\n\r\n  const dataToCells = (cells,idx) => {\r\n    const everyother = idx % 2 === 0\r\n    const style = { backgroundColor: everyother ? 'rgba(185, 186, 187, 0.13)' : '', color: everyother ? 'black' : '' }\r\n    return( <tr key={uuidv4()} style={style}>{ cells.map(c => <td key={uuidv4()} style={cellStyle}>{ c }</td>)}</tr>    )\r\n  }\r\n\r\n  // handle list change\r\n  const handleListChange = (filter) => {\r\n\r\n    const filterUpdate = { ...tableFilters }\r\n    filterUpdate[filter.label] = filter     // This fails if a table has two columns with identical names\r\n    setTableFilters(filterUpdate)\r\n  }\r\n\r\n\r\n\r\n  // handle headers\r\n  // if header has 'values' -attribute: create a select tag with options\r\n  // if not, plain string header\r\n  const createHeader = (header) => {\r\n    if (header.values !== undefined) {\r\n\r\n      const selectedOptions = tableFilters[header.label] !== undefined ? tableFilters[header.label].selectedOptions  : header.values\r\n\r\n      return(<CheckboxList options={ { label: header.label, selectedOptions: selectedOptions, values: header.values } } handleListChange={ handleListChange }/>)\r\n    }\r\n    return header.label\r\n  }\r\n\r\n  // apply filter set in state\r\n  // TODO: horrible\r\n  const applyFilter = (row) => {\r\n\r\n    let filters\r\n    let filter = true\r\n    let header\r\n    // loop through header and see if exists in filters\r\n    // Header is in filters, check that row value (of header index)\r\n    // is included in 'selectedOptions' attribute\r\n    for (let index=0; index<headers.length;index++) {\r\n      header = headers[index]\r\n      filters = tableFilters[header.label]\r\n      if (tableFilters[header.label] !== undefined) {\r\n        if (filters.selectedOptions.indexOf(row[header.index]) === -1) {\r\n          filter = false\r\n        }\r\n      }\r\n    }\r\n\r\n    return filter\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <DownloadCSVbutton params = { { data: cells, headers: headers.map(h => h.label ) } } />\r\n      <Table style={tableStyle}  >\r\n        <thead>\r\n          <tr>\r\n            {\r\n              headers.map(createHeader).map(c => <th key={uuidv4()} style={cellStyle}>{ c }</th>)\r\n            }\r\n          </tr>\r\n\r\n        </thead>\r\n        <tbody>\r\n          { cells.filter(applyFilter).map((c,idx) => dataToCells(c,idx)) }\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default ResultTable","import React from 'react'\r\nimport { Container } from 'react-bootstrap'\r\nimport ResultTable from './ResultTable'\r\nimport { getUniqueFromArray } from '../utils/utils'\r\n\r\n\r\nconst ModelResults = ({ results, show, groups  }) => {\r\n\r\n  if ( results === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  const cells = results.cells\r\n\r\n\r\n  let headersForGroupTable = [\r\n    { label: 'Parameter header', index: 0, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[0]) ) },\r\n    { label: 'Parameter', index: 1,  values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[1]) ) },\r\n    { label: 'Statistic', index: 2, values: getUniqueFromArray(  cells.flat().map(cell => cell.keys[2]) ) }\r\n  ]\r\n\r\n  headersForGroupTable = headersForGroupTable.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n\r\n\r\n  const cellGroupsAsColumns = (cell) => cell[0].keys.concat(cell.map((cell) => cell.value))\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{ float: 'left' }}>{ results.header }</div>\r\n      <ResultTable\r\n        cells = { cells.map(cellGroupsAsColumns) }\r\n        headers = { headersForGroupTable }\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\n\r\nexport default ModelResults","import React,{ useState } from 'react'\r\n\r\nimport {  Col, Row } from 'react-bootstrap'\r\nimport uuidv4 from 'uuid'\r\n\r\nconst WholeOutput = ({ mplusOutput, show }) => {\r\n\r\n  const [ selectedChapters, setSelectedChapters ] = useState(['THE MODEL ESTIMATION TERMINATED NORMALLY'])\r\n\r\n  const getChapterHeaders = () => {\r\n    return mplusOutput === null ? [] : mplusOutput.parsed.chapters.map(chap =>   chap.header.result  )\r\n  }\r\n\r\n\r\n  if (mplusOutput === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n\r\n\r\n  const chapterHeaders = getChapterHeaders()\r\n\r\n  const chapters = mplusOutput.parsed.chapters\r\n\r\n  const toggleChapterSelection = (header) => {\r\n\r\n    if (  isHeaderSelected(header)  ) {\r\n      // Included in selected chapters -> remove it\r\n      return selectedChapters.filter(chapter => chapter !== header)\r\n    }\r\n    // Not included in selected chapters -> add it\r\n    return selectedChapters.concat(header)\r\n\r\n  }\r\n\r\n  // Shorthand for checking if header is selected\r\n  const isHeaderSelected = (header) => selectedChapters.indexOf(header)>-1\r\n\r\n  // Function handle checkbox changes\r\n\r\n  const handleCheckBoxChange = (e) => {\r\n    //e.preventDefault()\r\n\r\n    const clickedChapter = e.target.value\r\n    setSelectedChapters(toggleChapterSelection(clickedChapter))\r\n  }\r\n\r\n  // A container for each chapter\r\n  const chapterContentContainer = (chapter,idx) => {\r\n\r\n    const style = {\r\n      whiteSpace: 'pre-wrap',\r\n      fontFamily: 'Consolas',\r\n      fontSize: '70%',\r\n      display: isHeaderSelected( chapter.header ) ? '' : 'none'\r\n    }\r\n    const content = '<h6>'+chapter.header +'</h6>\\n' + '<div>' + chapter.content + '</div>'\r\n    return(\r\n      <div key={uuidv4()}>\r\n        <div style={ style }  dangerouslySetInnerHTML={{ __html: content }} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  // (De-)select all\r\n  const toggleSelectAll = () => {\r\n\r\n    if ( selectedChapters.length !== chapterHeaders.length) {\r\n\r\n      setSelectedChapters(chapterHeaders)\r\n\r\n    } else {\r\n\r\n      setSelectedChapters([])\r\n    }\r\n  }\r\n\r\n  const menuStyle = {\r\n    position: 'fixed',\r\n    marginLeft: '5%',\r\n    marginTop: '2%'\r\n  }\r\n\r\n  return(\r\n    <div style={ { width: '100%' } }>\r\n      <Row>\r\n        <Col xs={4}>\r\n          <div style = {menuStyle} >\r\n            <div style={{ fontSize: '65%' }}>\r\n              <input type='checkbox'  onClick={ toggleSelectAll }/>\r\n              {  selectedChapters.length !== chapterHeaders.length ? 'SELECT ALL' : 'DESELECT ALL' }\r\n            </div>\r\n            {\r\n              chapterHeaders.map(header =>  {\r\n                const checked = isHeaderSelected(header)\r\n                const style = { fontSize: '65%' }\r\n                return(\r\n                  <div key={uuidv4()} style={style}>\r\n                    <input type='checkbox' checked = { checked } onChange={handleCheckBoxChange} value = { header }/>\r\n                    { header }\r\n                  </div>\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n\r\n        </Col>\r\n        <Col xs={8}>\r\n          {\r\n            chapters.map((chap,idx) => chapterContentContainer( { content: chap.content.join('\\n'), header: chap.header.result },idx) )\r\n          }\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport default WholeOutput","import React from 'react'\r\n\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\n\r\nimport { getUniqueFromArray } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\n\r\n\r\nconst ModelFitInformation = ({ modelFitInformation, show }) => {\r\n  if ( modelFitInformation === null || !show ) {\r\n    return('')\r\n  }\r\n\r\n  // Hard coded headers for table\r\n  const headers = [\r\n    { label: 'Statistic group', index: 0, values: getUniqueFromArray( modelFitInformation.map(info => info.header) ) },\r\n    { label: 'Statistic', index: 1 },\r\n    { label: 'Value', index: 2 }\r\n  ]\r\n\r\n  const objectsToArrays = (ob) => {\r\n    return([ob.header, ob.statistic, ob.value ])\r\n  }\r\n\r\n\r\n  return(\r\n    <Container>\r\n      <div style={{float: 'left' }}>MODEL FIT INFORMATION</div>\r\n      <ResultTable\r\n        cells = { modelFitInformation.map(objectsToArrays) }\r\n        headers = { headers }\r\n      />\r\n\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\nexport default ModelFitInformation","import React from 'react'\r\n\r\nimport { getUniqueFromArray, rowToColumn } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\nimport uuidv4 from 'uuid'\r\n\r\nconst ResidualOutput = ({ output,show }) => {\r\n\r\n  if ( output === null || !show || output === undefined ) {\r\n    return('')\r\n  }\r\n\r\n\r\n  let groups = getUniqueFromArray( output.means.map(o => o.group) )\r\n\r\n  const groupsExist = groups.length > 0 ? true : false\r\n\r\n  if ( !groupsExist ) {\r\n    groups = ['Value']\r\n  }\r\n\r\n  let headers = [\r\n    { label: 'Statistic', index: 0, values: getUniqueFromArray( output.means.map(o => o.statistic) ) },\r\n    { label: 'Parameter', index: 1, values: getUniqueFromArray( output.means.map(o => o.parameter) ) },\r\n  ]\r\n\r\n  headers = headers.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n  // Define rows and column for pivoting\r\n  output.means = output.means.map(m => {\r\n    return { ...m, rows: [ m.statistic, m.parameter], column: m.group }\r\n  })\r\n\r\n  const pivotedMeans = rowToColumn(output.means)\r\n\r\n  // If no group present, no output.means\r\n  let meansTable = ((means) => {\r\n\r\n    if (means.length === 0 ) {\r\n      return ''\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h3>Estimates and residuals for Means/Intercepts/Tresholds</h3>\r\n        <ResultTable\r\n          cells = {  pivotedMeans.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n          headers={ headers }/>\r\n      </div>\r\n    )\r\n  })(output.means)\r\n  // univariateProportions\r\n  let propTable = ((props) => {\r\n\r\n    if (props.headers.length === 0 ) {\r\n      return ''\r\n    }\r\n\r\n    // Add headers: Group and parameter\r\n\r\n    let headers = [\r\n      { label: 'Group', index: 0, values:  groups },\r\n      { label: 'Variable', index: 1, values: getUniqueFromArray( props.cells.map(o => o[1] ) ) },\r\n      { label: 'Category', index: 1, values: getUniqueFromArray( props.cells.map(o => o[2] ) )   }\r\n    ]\r\n    // Variable = Parameter here\r\n    headers = headers.concat( props.headers.filter(h => h !== 'Variable').map(h => ({ 'label': h }) )  )\r\n\r\n    return (\r\n      <div>\r\n        <h3>Univariate proportions for categorical variables</h3>\r\n        <ResultTable\r\n          cells = {  props.cells }\r\n          headers={  headers }/>\r\n      </div>\r\n    )\r\n  })(output.univariateProportions)\r\n\r\n\r\n  // Return tables\r\n\r\n  return(\r\n    <Container>\r\n      {\r\n        meansTable\r\n      }\r\n      <h2>Covariance/Correlation tables</h2>\r\n      {\r\n        output.covariances.map(cov => correlationOrCovarianceTableFromData(cov,groups))\r\n      }\r\n      <h2></h2>\r\n      {\r\n        propTable\r\n      }\r\n    </Container>\r\n  )\r\n\r\n}\r\n\r\n\r\nconst correlationOrCovarianceTableFromData = (data,columns) => {\r\n\r\n\r\n\r\n\r\n  const cells  = data.content.flat().map(o => {  return { column: o.group, rows: o.keys, value: o.value } })\r\n\r\n  const pivotedCells = rowToColumn(cells)\r\n\r\n\r\n  let headers = [\r\n    { label: 'Parameter 1',  index: 0, values: getUniqueFromArray( cells.map(cell => cell.rows[0] ) )  },\r\n    { label: 'Parameter 2',  index: 1, values: getUniqueFromArray( cells.map(cell => cell.rows[1] ) ) },\r\n  ].concat( columns.map(group => {   return({ 'label': group })  }))\r\n\r\n\r\n  return(\r\n    <div key={uuidv4()} >\r\n      <h3>{ data.header }</h3>\r\n      <ResultTable\r\n        cells = {  pivotedCells.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n        headers={ headers }/>\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default ResidualOutput","import React from 'react'\r\n\r\nimport { getUniqueFromArray, rowToColumn } from '../utils/utils'\r\nimport ResultTable from './ResultTable'\r\nimport { Container } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst ModelModificationIndices = ({ modelmodificationindices,show }) => {\r\n\r\n  if ( modelmodificationindices === null || !show  ) {\r\n    return ''\r\n  }\r\n\r\n  if ( modelmodificationindices === undefined  ) {\r\n    return(\r\n      <Container>\r\n            No model modification indices to display\r\n      </Container>\r\n    )\r\n  }\r\n\r\n\r\n  let groups = getUniqueFromArray( modelmodificationindices.cells.map(o => o.keys[0]) )\r\n  const cells = manipulateModificationIndicesToTableCells(modelmodificationindices.cells, groups)\r\n\r\n\r\n\r\n  // Table headers\r\n  let headers = [\r\n    { label: 'Subtable header', index: 0, values: getUniqueFromArray( cells.map(cell => cell.rows[0]) ) },\r\n    { label: 'Parameter', index: 1, values: getUniqueFromArray( cells.map(cell => cell.rows[1]) ) },\r\n    { label: 'Statistic', index: 1, values: getUniqueFromArray( cells.map(cell => cell.rows[2]) ) },\r\n  ]\r\n\r\n  headers = headers.concat( groups.map(group => {\r\n    return({ 'label': group })\r\n  }))\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <h3>Model modification indices</h3>\r\n      <div>\r\n        { modelmodificationindices.minimumMIvalue }\r\n      </div>\r\n      <div>\r\n        A group is not shown in the table if no modification indices are above the minimum value.\r\n      </div>\r\n      <ResultTable\r\n        cells = {  cells.map(cell => cell.rows.concat(cell.values.map(val => val.values))            )  }\r\n        headers={ headers }/>\r\n    </Container>\r\n  )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst manipulateModificationIndicesToTableCells = (indices,groups) => {\r\n\r\n  let cells = indices.map(cell => ({ ...cell, column: cell.keys[0], rows: cell.keys.slice(1,) }))\r\n  cells = rowToColumn(cells)\r\n\r\n  // add empty cells to table for coherence\r\n  const ensureCellCount = cell => {\r\n    const values =  groups\r\n      .map(group => {\r\n        // Check if value for group exists\r\n        const value = cell.values.find(v => v.column === group)\r\n        // And replace with null observation if not\r\n        return value !== undefined ? value : { column: group, value: null }\r\n      })\r\n\r\n    return { ...cell, values: values }\r\n  }\r\n\r\n  cells = cells.map(ensureCellCount)\r\n  return cells\r\n}\r\n\r\nexport default ModelModificationIndices","import React, { useState, useEffect } from 'react'\nimport Menu from './components/Menu'\n\n\n\nimport parseOut from './utils/parseOut'\nimport FileLoader from './components/FileLoader'\nimport ModelResults from './components/ModelResults'\nimport WholeOutput from './components/WholeOutput'\nimport ModelFitInformation from './components/ModelFitInformation'\nimport ResidualOutput from './components/ResidualOutput'\nimport ModelModificationIndices from './components/ModelModificationIndices'\n\n\n\nconst App = () => {\n\n  const [ mplusOutput, setMplusOutput ] = useState(null)\n  const [ page, setPage ] = useState('wholeoutput')\n  const [ showFileUpload, setShowFileUpload ] = useState(true)\n\n  const handleFileLoad = (file) => {\n\n    const reader = new FileReader()\n\n    reader.onload = () =>  {\n      setMplusOutput(\n        {\n          string: reader.result\n          ,filename: file.name\n          ,parsed: parseOut(reader.result)\n        })\n    }\n\n    reader.readAsText(file,'ISO-881')\n    setShowFileUpload(false)\n  }\n\n  const handlePageChange = (page) => {\n    setPage(page)\n  }\n\n  const groups = mplusOutput !== null ? mplusOutput.parsed.groups : null\n\n  // Menu is position: fixed, so this:\n  const contentStyle = {\n    zIndex: -1,\n    marginTop: '5%'\n\n  }\n  const containerStyle = {\n    position: 'relative'\n  }\n\n  const showModal = showFileUpload & mplusOutput === null\n\n  return (\n    <div style={containerStyle}>\n\n      <FileLoader\n        handleFileLoad={handleFileLoad}\n        showFileUpload={ showModal }\n        handleShowFileChange = {() => setShowFileUpload(false) }/>\n\n      <Menu mplusOutput = { mplusOutput }     handlePageChange = { handlePageChange } page={page}/>\n      <div style={contentStyle}>\n        <WholeOutput          show = { page === 'wholeoutput' }         mplusOutput = { mplusOutput } />\n        <ModelFitInformation  show = { page === 'modelfitinformation' }    modelFitInformation = { mplusOutput !== null ? mplusOutput.parsed.modelFitInformation : null } />\n        <ModelResults         show = { page === 'modelresults' }  groups = { groups }   results = { mplusOutput !== null ? mplusOutput.parsed.modelResults : null } />\n        <ModelResults         show = { page === 'stdmodelresults' }  groups = { groups } results = { mplusOutput !== null ? mplusOutput.parsed.standardizedModelResults : null } />\n        <ResidualOutput       show = { page === 'residualoutput' }  output={ mplusOutput !== null ? mplusOutput.parsed.residualOutput : null }/>\n        <ModelModificationIndices show = {  page === 'modelmodificationindices' } modelmodificationindices={ mplusOutput !== null ? mplusOutput.parsed.modelIndices : null }/>\n      </div>\n    </div>\n  )\n\n}\nexport default App\n","\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport React from 'react'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}